#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef MYCHART_SWIFT_H
#define MYCHART_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Authentication;
@import CoreFoundation;
@import CoreGraphics;
@import CoreLocation;
@import EventKitUI;
@import Foundation;
@import MyChartGlobals;
@import ObjectiveC;
@import PECore;
@import ToDo;
@import UIKit;
@import UserNotifications;
@import WatchConnectivity;
@import WebKit;
#endif

#import <MyChart/MyChart.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MyChart",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSBundle;
@class NSCoder;

/// Helper function for objc to find this.  Also must be UIViewController to work with WPActivityManager
SWIFT_CLASS("_TtC7MyChart35AccountSettingsViewControllerHelper")
@interface AccountSettingsViewControllerHelper : UIViewController
+ (UIViewController * _Nullable)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSBundle (SWIFT_EXTENSION(MyChart))
/// Return the correct mychart app bundle (framework or main, depending on context)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull myChart;)
+ (NSBundle * _Nonnull)myChart SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart38ChangePasswordWebViewControllerManager")
@interface ChangePasswordWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart13CommunityUtil")
@interface CommunityUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_WPRID;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_WPRID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_DEEPLINKURL;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_DEEPLINKURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_ORGID;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_ORGID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEATURE_NO_SPECIFY;)
+ (NSString * _Nonnull)FEATURE_NO_SPECIFY SWIFT_WARN_UNUSED_RESULT;
/// Set deeplink url corresponding to the dxoId which indicate the background update is still going for this organization
/// \param isUpdating true if the organization is still updating
///
/// \param externalOrgId id of the organization we want to check
///
/// \param deepLinkURL url for deep link jump
///
+ (void)setUpdatingStatusWithIsUpdating:(BOOL)isUpdating externalOrgId:(NSString * _Nonnull)externalOrgId deepLinkURL:(NSString * _Nonnull)deepLinkURL;
/// Get the preferences key for tracking if patient has external information is updating.
///
/// returns:
/// the key string for updating preference
+ (NSString * _Nonnull)getCommunityUpdatingPrefsKey SWIFT_WARN_UNUSED_RESULT;
/// get the list of orgs is updating
///
/// returns:
/// the list of org ids
+ (NSArray<NSString *> * _Nonnull)getListOfUpdatingOrgs SWIFT_WARN_UNUSED_RESULT;
/// The Notification when the update complete
/// \param successOrgNames names of the external organizations updated successfully
///
/// \param errorOrgNames names of the external organizations failed updating
///
+ (void)fireUpdateCompleteNotificationWithSuccessOrgNames:(NSString * _Nonnull)successOrgNames errorOrgNames:(NSString * _Nonnull)errorOrgNames focusWPR:(NSString * _Nonnull)focusWPR deepLinkURL:(NSString * _Nonnull)deepLinkURL;
/// The toast when the udpate complete
/// \param successOrgNames names of the external organizations updated successfully
///
/// \param errorOrgNames names of the external organizations failed updating
///
+ (void)fireUpdateCompleteToastWithSuccessOrgNames:(NSString * _Nonnull)successOrgNames errorOrgNames:(NSString * _Nonnull)errorOrgNames;
+ (NSString * _Nonnull)constructAsynLoadingDeepLinkURLWithUpdateContext:(NSString * _Nonnull)updateContext wprId:(NSString * _Nonnull)wprId orgId:(NSString * _Nonnull)orgId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationResponsefoKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationStatusKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationRefreshBannerUpdateKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getUpdateContextURLWithContext:(enum CommunityUpdateContext)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for web requests related to H2G
SWIFT_CLASS("_TtC7MyChart22CommunityWebServiceAPI")
@interface CommunityWebServiceAPI : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// Returns the community webservice for the app
+ (CommunityWebServiceAPI * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Three states of web service:
/// 1 - the web service is running
/// 0 - the web service is paused for the new request
/// -1 - the web service is terminated
- (void)setIsCommunityUpdateStatusRunningWithIsRunning:(NSInteger)isRunning;
- (void)setFeatureIsCurrentlyCheckingStatusWithFeatureBit:(NSString * _Nonnull)featureBit;
- (void)beginBackgroundUpdateTask;
- (void)endBackgroundUpdateTask;
/// send the request to check updating status
+ (void)launchCommunityLoadingStatusRequest;
- (void)getCommunityUpdateStatusAPI;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart43ContactVerificationWebViewControllerManager")
@interface ContactVerificationWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPCustomerServiceSettingsResponse;
@class WebServiceFailedError;

/// protocol for callback contexts
SWIFT_PROTOCOL("_TtP7MyChart23CustomerServiceCallback_")
@protocol CustomerServiceCallback
- (void)onSuccessWithResponse:(WPCustomerServiceSettingsResponse * _Nullable)response;
- (void)onFailureWithError:(WebServiceFailedError * _Nullable)error;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart34DeviceListWebViewControllerManager")
@interface DeviceListWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class EFDataSet;

SWIFT_CLASS("_TtC7MyChart14EFDataSetUtils")
@interface EFDataSetUtils : NSObject
/// Takes the given data set and creates a new data set where each data point represents the sum
/// of all data from the original data set over the course of one time period. For example if
/// the input data has a reading of 5 at 12:20pm and 7 at 12:40pm, the output data set accumulated
/// by hour would have one reading at 12:00pm of 12.
/// Assumes data is in chronilogial order
+ (EFDataSet * _Nullable)accumulatedGraphDataWithDataSet:(EFDataSet * _Nullable)dataSet period:(WPAccumulationPeriod)period SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC7MyChart15EFGraphDataView")
@interface EFGraphDataView : UIView
@property (nonatomic) BOOL showMetadata;
@property (nonatomic, strong) UIColor * _Nullable dataColor;
@property (nonatomic, strong) UIColor * _Nullable abnormalDataColor;
@property (nonatomic, strong) UIColor * _Nullable shadingColor;
@property (nonatomic, strong) UIColor * _Nullable labelColor;
@property (nonatomic) BOOL showBasal;
@property (nonatomic) BOOL showBolus;
@property (nonatomic, readonly) CGRect rectOfGraph;
@property (nonatomic, readonly) EFGraphType graphType;
@property (nonatomic, readonly, strong) EFDataSet * _Nullable dataSet;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Creates a grapher for the current graph type which draws the Y axis and data
- (void)drawRect:(CGRect)rect;
/// If the bounds changed, recalculate coordinates
@property (nonatomic) CGRect bounds;
/// Calculates coordinates for data in the current frame. Coordinates are stored on each
/// data point object
- (void)calculateCoordinatesForData;
/// Sets up the data view for the given data set and graph type
/// \param dataSet the data set to show
///
/// \param graphType the graph type to show
///
- (void)setWithDataSet:(EFDataSet * _Nullable)dataSet graphType:(EFGraphType)graphType;
@end

@class NSDate;

/// Class to be used as an optional X axis for the EFGrapher
SWIFT_CLASS("_TtC7MyChart21EFGraphHorizontalAxis")
@interface EFGraphHorizontalAxis : UIView
@property (nonatomic) EFGraphType graphType;
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Set up the axis with the given date range
/// \param start leading-edge date
///
/// \param end trailing-edge date
///
- (void)setRangeFrom:(NSDate * _Nonnull)start to:(NSDate * _Nonnull)end;
/// If the axis represents one day, draw ticks and hour markings for that day
- (void)drawRect:(CGRect)rect;
@end

@protocol GraphMetadataSwitchDelegate;

SWIFT_CLASS("_TtC7MyChart13EFGraphLegend")
@interface EFGraphLegend : UIView
@property (nonatomic, strong) id <GraphMetadataSwitchDelegate> _Nullable metadataDelegate;
/// required to be set for insulin
@property (nonatomic, strong) UIColor * _Nullable abnormalDataColor;
@property (nonatomic, strong) UIColor * _Nullable dataColor;
@property (nonatomic, strong) UIColor * _Nullable labelColor;
@property (nonatomic) WPFlowsheetRowMetadataType metadataType;
@property (nonatomic, getter=isHidden) BOOL hidden;
- (void)awakeFromNib;
/// Sets on/off values for left and right switches
- (void)setMetadataSwitchWithLeftOn:(BOOL)leftOn rightOn:(BOOL)rightOn;
- (void)drawRect:(CGRect)rect;
/// Draws a shape for a graph indicating a data point is an after meal glucose reading.
/// The shape is a triangle with an outline of the given color filled with white
/// \param point the center point for the shape
///
/// \param context the CGContext in which to draw the shape
///
/// \param color color for the outer part of the shape. should be normal or abnormal data color
///
+ (void)drawBeforeMealShapeCenteredAtPoint:(CGPoint)point context:(CGContextRef _Nullable)context color:(CGColorRef _Nonnull)color;
/// Draws a shape for a graph indicating a data point is an after meal glucose reading.
/// The shape is a triangle with an outline of abnormal or normal data color filled with white
/// \param point the center point for the shape
///
/// \param context the CGContext in which to draw the shape
///
/// \param color color for the outer part of the shape. should be normal or abnormal data color
///
+ (void)drawAfterMealShapeCenteredAtPoint:(CGPoint)point context:(CGContextRef _Nullable)context color:(CGColorRef _Nonnull)color;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart20EFHourlyTrendGrapher")
@interface EFHourlyTrendGrapher : EFGrapher
/// Draws the normal range rectangle, trend bars, and Y axis labels
/// \param frame where to draw the data. should be the same frame called when coordinates were calculated
///
- (void)graphDataSetWithinFrame:(CGRect)frame;
- (null_unspecified instancetype)initWithDataSet:(EFDataSet * _Null_unspecified)dataSet SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EFDataPoint;

SWIFT_CLASS("_TtC7MyChart16EFInsulinDataSet")
@interface EFInsulinDataSet : EFDataSet
@property (nonatomic, strong) EFDataSet * _Nullable basalAccumulatedDataSet;
@property (nonatomic, strong) EFDataSet * _Nullable bolusAccumulatedDataSet;
/// supports hour, day, month based on explicit instant high/low
@property (nonatomic, readonly) WPAccumulationPeriod accumulationPeriod;
/// Creates an insulin data set with the given basal and bolus data sets
/// \param basalDataSet basal data
///
/// \param bolusDataSet bolus data
///
- (nullable instancetype)initWithBasalDataSet:(EFDataSet * _Nullable)basalDataSet bolusDataSet:(EFDataSet * _Nullable)bolusDataSet OBJC_DESIGNATED_INITIALIZER;
/// Sets instants to limit what period of time the data set should effectively represent.
/// Recalculates accumulated data based on the set time period
- (void)setExplicitInstantLow:(NSDate * _Null_unspecified)instantLow explicitInstantHigh:(NSDate * _Null_unspecified)instantHigh;
- (void)setExplicitInstantLow:(NSDate * _Null_unspecified)instantLow explicitInstantHigh:(NSDate * _Null_unspecified)instantHigh autoExpand:(BOOL)autoExpand;
/// Gets the latest i.e. most recent data point. If there is bolus and basal
/// data at the latest instant, returns the bolus point. Ignores explicit
/// instant high/low
- (EFDataPoint * _Nullable)getLatestDataPoint SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithData:(NSArray * _Null_unspecified)data decimals:(int32_t)decimals SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class WKNavigationAction;
@class NSURLRequest;

/// Inherits from the older MO VC - WPWebViewController so that it can add epichttp support for extensibility activities
SWIFT_CLASS("_TtC7MyChart20FDIWebViewController")
@interface FDIWebViewController : WPWebViewController
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (null_unspecified instancetype)initWithRequest:(NSURLRequest * _Null_unspecified)request andPresentationStyle:(WPViewPresentationStyle)style OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithRequest:(NSURLRequest * _Null_unspecified)request allowedHosts:(NSArray * _Null_unspecified)allowHosts andPresentationStyle:(WPViewPresentationStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class WPGetPersonalNotesServiceResponse;

/// Protocol for listeners to results of get personal notes web service call
SWIFT_PROTOCOL("_TtP7MyChart24GetPersonalNotesCallback_")
@protocol GetPersonalNotesCallback
- (void)onGetNotesSuccessWithResponse:(WPGetPersonalNotesServiceResponse * _Nullable)response;
- (void)onGetNotesFailureWithError:(WebServiceFailedError * _Nullable)error;
@end


/// Response class for the getUpdatedPersonalPreferences request
SWIFT_CLASS("_TtC7MyChart30GetPersonalPreferencesResponse")
@interface GetPersonalPreferencesResponse : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class stores metadata about the currently paired watch, if it is also linked to the org
SWIFT_CLASS("_TtC7MyChart18LinkedWatchDetails")
@interface LinkedWatchDetails : NSObject
/// Device id
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// Org Id
@property (nonatomic, copy) NSString * _Nonnull orgId;
/// Org name
@property (nonatomic, copy) NSString * _Nonnull orgName;
/// The WPR who linked the watch
@property (nonatomic, copy) NSString * _Nonnull wprId;
/// The display name for the user who linked the watch
@property (nonatomic, copy) NSString * _Nonnull userNickname;
/// Is the paired watch linked to the current org
@property (nonatomic, readonly) BOOL isLinkedToCurrentOrg;
/// Is the watch paired to this org and to this user?
@property (nonatomic, readonly) BOOL isLinkedToCurrentUser;
/// Removes the seralized data saved using writeToWatchStorage
///
/// returns:
/// successful delete
- (BOOL)unlinkFromOrg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class UISceneSession;
@class UISceneConnectionOptions;
@class UISceneConfiguration;

/// The UIApplicationDelegate for the MyChart (and any Epic-Submitted) app
/// This class is responsible for handling various application initializations such as registering ComponentAPIs and configuring scenes and assigning their scene delegates.
SWIFT_CLASS("_TtC7MyChart18MyChartAppDelegate")
@interface MyChartAppDelegate : WPAppDelegate
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (UISceneConfiguration * _Nonnull)application:(UIApplication * _Nonnull)application configurationForConnectingSceneSession:(UISceneSession * _Nonnull)connectingSceneSession options:(UISceneConnectionOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

SWIFT_CLASS("_TtC7MyChart14MyChartManager")
@interface MyChartManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Called when either the app delegate or scene delegate receives a request to open a URL
/// \param url the URL that was requested
///
///
/// returns:
/// true if the URL was handled, false otherwise
+ (BOOL)onOpenUrl:(NSURL * _Nonnull)url;
@end

@class UIWindow;
@class UIScene;
@class NSUserActivity;

/// The UIWindowSceneDelegate for the MyChart (and any Epic-Submitted) app
/// This class is responsible for handling various events received by the application’s main scene such as deep links and universal links (through the <code>scene(_:openURLContexts:)</code> method)
SWIFT_CLASS("_TtC7MyChart20MyChartSceneDelegate")
@interface MyChartSceneDelegate : NSObject <UIWindowSceneDelegate>
/// The key window for the MyChart (or Epic-Submitted) application
/// This is initialized when <code>scene(_:willConnectTo:options:)</code> is called
@property (nonatomic, strong) UIWindow * _Nullable window;
- (void)scene:(UIScene * _Nonnull)scene willConnectToSession:(UISceneSession * _Nonnull)session options:(UISceneConnectionOptions * _Nonnull)connectionOptions;
- (void)scene:(UIScene * _Nonnull)scene continueUserActivity:(NSUserActivity * _Nonnull)userActivity;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSMutableArray<ObjectType> (SWIFT_EXTENSION(MyChart))
+ (NSMutableArray * _Nonnull)removeDuplicatesFromArray:(NSMutableArray * _Nonnull)original isDuplicate:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(id _Nonnull, id _Nonnull))isDuplicate SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_RESILIENT_CLASS("_TtC7MyChart43PersonalInformationWebViewControllerManager")
@interface PersonalInformationWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PersonalNoteType, open) {
  PersonalNoteTypeAllergy = 1,
  PersonalNoteTypeMedication = 2,
  PersonalNoteTypeHealthIssue = 3,
  PersonalNoteTypeImmunization = 4,
  PersonalNoteTypeReminder = 5,
  PersonalNoteTypeMedicalHistory = 6,
  PersonalNoteTypeSocialHistory = 7,
  PersonalNoteTypeSurgicalHistory = 8,
  PersonalNoteTypeFamilyHistory = 9,
  PersonalNoteTypeFamilyStatus = 10,
  PersonalNoteTypePatientGoals = 11,
};

@class WPSavePersonalNotesServiceResponse;

SWIFT_PROTOCOL("_TtP7MyChart25SavePersonalNotesCallback_")
@protocol SavePersonalNotesCallback
- (void)onSaveNotesSuccessWithResponse:(WPSavePersonalNotesServiceResponse * _Nullable)response;
- (void)onSaveNotesFailureWithError:(WebServiceFailedError * _Nullable)error;
@end

@class WPScreeningsServiceResponse;

/// Protocol for listeners to results of screenings web service call
SWIFT_PROTOCOL("_TtP7MyChart18ScreeningsCallback_")
@protocol ScreeningsCallback
- (void)onSuccessWithResponse:(WPScreeningsServiceResponse * _Nullable)response;
- (void)onFailureWithError:(WebServiceFailedError * _Nullable)error;
@end


/// A utility that manages access to secondary login methods
SWIFT_CLASS("_TtC7MyChart21SecondaryLoginManager")
@interface SecondaryLoginManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Indicates if secondary login can be setup (does not indicate if a secondary login method has been enabled).
/// This method does not guarantee any secondary login methods are available, just that they are not all explicitly disabled.
/// <ul>
///   <li>
///     Returns true if secondary login is available to setup, false otherwise
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isSecondaryLoginFeatureAvailable;)
+ (BOOL)isSecondaryLoginFeatureAvailable SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the passcode login feature is available for the current server.
/// <ul>
///   <li>
///     Returns true if the server supports the feature, false otherwise
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isPasscodeLoginFeatureAvailable;)
+ (BOOL)isPasscodeLoginFeatureAvailable SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the biometric login feature is available for the current server
/// <ul>
///   <li>
///     Returns true if the server supports the feature, false otherwise
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isBiometricLoginFeatureAvailable;)
+ (BOOL)isBiometricLoginFeatureAvailable SWIFT_WARN_UNUSED_RESULT;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for the organization with the given orgId
/// \param orgId the org ID of the organization for which the secondary login token is being removed
///
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
+ (void)removeSecondaryLoginForOrgId:(NSString * _Nonnull)orgId withCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for the organization with the given orgId
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
/// \param orgId the org ID of the organization for which the secondary login token is being removed
///
+ (void)removeSecondaryLoginForOrgId:(NSString * _Nonnull)orgId;
/// Removes the login token used for passcode login for the organization with the given orgId
/// \param orgId the org ID of the organization for which the passcode login token is being removed
///
///
/// returns:
/// true if the passcode login token was found and  successfully removed, false otherwise
+ (void)removePasscodeLoginForOrgId:(NSString * _Nonnull)orgId withCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for passcode login for the organization with the given orgId
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
/// \param orgId the org ID of the organization for which the passcode login token is being removed
///
+ (void)removePasscodeLoginForOrgId:(NSString * _Nonnull)orgId;
/// Removes the login token used for biometric login for the organization with the given orgId
/// \param orgId the org ID of the organization for which the biometric login token is being removed
///
///
/// returns:
/// true if the biometric login token was found and  successfully removed, false otherwise
+ (void)removeBiometricLoginForOrgId:(NSString * _Nonnull)orgId withCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for biometric login for the organization with the given orgId
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
/// \param orgId the org ID of the organization for which the biometric login token is being removed
///
+ (void)removeBiometricLoginForOrgId:(NSString * _Nonnull)orgId;
@end


/// The session manager is shared between the watch and phone targets to manage passing data between the two platforms and overall authentication workflows. It therefore also serves as the WCSessionDelegate.
SWIFT_CLASS("_TtC7MyChart14SessionManager")
@interface SessionManager : NSObject
/// Details for the currently linked watch
@property (nonatomic, readonly, strong) LinkedWatchDetails * _Nullable currentLinkedWatch;
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SessionManager * _Nonnull instance;)
+ (SessionManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// init to be used by singleton only
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SessionManager (SWIFT_EXTENSION(MyChart))
/// Invalidate the watch feed. Called when the feedInvalidatedNotification is posted on the paired phone
- (void)invalidateWatchFeed;
/// The watch can request that the phone remove its local cached data with the watch details
- (void)receiveUnlinkCurrentWatch:(NSDictionary<NSString *, id> * _Nonnull)params :(id _Null_unspecified)replyHandler;
@end

@class WCSession;

@interface SessionManager (SWIFT_EXTENSION(MyChart)) <WCSessionDelegate>
- (void)sessionDidBecomeInactive:(WCSession * _Nonnull)session;
- (void)sessionDidDeactivate:(WCSession * _Nonnull)session;
- (void)session:(WCSession * _Nonnull)session activationDidCompleteWithState:(WCSessionActivationState)activationState error:(NSError * _Nullable)error;
- (void)session:(WCSession * _Nonnull)session didReceiveApplicationContext:(NSDictionary<NSString *, id> * _Nonnull)applicationContext;
- (void)sessionReachabilityDidChange:(WCSession * _Nonnull)session;
/// custom function to parse our own message formats. Requires the message contain a function that is executable by reflection. This could be used by either platform, but currently we only send messages from phone to watch.
- (void)session:(WCSession * _Nonnull)session didReceiveMessage:(NSDictionary<NSString *, id> * _Nonnull)message replyHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))replyHandler;
@end






@interface UILabel (SWIFT_EXTENSION(MyChart))
- (void)setTextOrHide:(NSString * _Nullable)text;
@end







@interface NSUserDefaults (SWIFT_EXTENSION(MyChart))
/// Previously, MyChart saved some data in a shared userdefaults collection because of the original Apple Watch app. A bug in iOS 16 made this collection become unstable and we now use standard userdefaults for all storeage.
+ (NSUserDefaults * _Nullable)legacyCompatibleDefaults SWIFT_WARN_UNUSED_RESULT;
@end


@interface WCSession (SWIFT_EXTENSION(MyChart))
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

@class UIAlertController;
@class UINavigationController;

@interface WPActivityManager (SWIFT_EXTENSION(MyChart))
/// Check the view controller for H2G support and returns an alert controller if it doesn’t
/// \param orgName The H2G org name of context desired for launch if allowed
///
+ (UIAlertController * _Nonnull)getH2GUnsupportedAlertControllerWithOrgName:(NSString * _Nullable)orgName SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isH2GSupportedWithViewController:(UIViewController * _Nullable)viewController andActivity:(WPActivity)activity SWIFT_WARN_UNUSED_RESULT;
+ (enum PEBillingMode)getBillingModeForActivity:(WPActivity)activity SWIFT_WARN_UNUSED_RESULT;
+ (enum PEEstimatesMode)getEstimateModeForActivity:(WPActivity)activity SWIFT_WARN_UNUSED_RESULT;
+ (void)launchConsentAlertforDrivingDirections:(NSString * _Nonnull)urlString in:(UINavigationController * _Nonnull)navigationController;
+ (NSString * _Nonnull)passwordIdentifier2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPActivityWebViewController (SWIFT_EXTENSION(MyChart))
@property (nonatomic, readonly) BOOL supportsH2GLaunchContext;
@end


@interface WPActivityWebViewController (SWIFT_EXTENSION(MyChart))
- (UINavigationController * _Nullable)getNavController SWIFT_WARN_UNUSED_RESULT;
- (void)tryExecuteWithDeepLink:(NSString * _Nullable)deepLink in:(UINavigationController * _Nonnull)navigationController;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
@end

@class PEPatientContext;

/// API class with methods for sending the current website name to the server for affiliate branding
SWIFT_CLASS("_TtC7MyChart32WPAffiliateBrandingWebServiceAPI")
@interface WPAffiliateBrandingWebServiceAPI : NSObject
/// Objective-C wrapper for the web service to set the affiliate branding from the website name
/// \param patientContext the callback object
///
/// \param websiteName website name from the current phonebook entry
///
- (void)setAffiliateBrandingWebsiteInSessionWithPatientContext:(PEPatientContext * _Nonnull)patientContext websiteName:(NSString * _Nonnull)websiteName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This sandbox is for testing native and web passkit workflows
SWIFT_CLASS("_TtC7MyChart34WPAppleWalletSandboxViewController")
@interface WPAppleWalletSandboxViewController : WPViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibName bundle:(NSBundle * _Nullable)bundle SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
@end

@class UITextField;

@interface WPAppleWalletSandboxViewController (SWIFT_EXTENSION(MyChart)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PEPersonProtocol;
@class UIImage;
@class PELocale;
@class PEUserContext;
@protocol PEThemeProtocol;

SWIFT_CLASS("_TtC7MyChart25WPApplicationComponentAPI")
@interface WPApplicationComponentAPI : NSObject <PEApplicationComponentAPIProtocol>
- (void)logout;
- (void)logoutWithDeepLinkUrl:(NSString * _Nonnull)url;
- (void)switchCurrentPerson:(id <PEPersonProtocol> _Nonnull)person;
- (BOOL)switchCurrentPersonWithWprId:(NSString * _Nullable)wprId;
- (BOOL)switchCurrentPersonWithWprId:(NSString * _Nullable)wprId eAccountId:(NSString * _Nullable)eAccountId;
- (BOOL)isInternalBuild SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getApplicationId SWIFT_WARN_UNUSED_RESULT;
- (enum ApplicationType)getApplicationType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isHealthKitDataAvailable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isBrandedApp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSelfSubmittedApp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEpicSubmittedApp SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandedAppOrgId SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getBrandedCustomerImage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTestLibraryExpired SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nullable)getServerPrimaryLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getCurrentLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getDefaultLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getCommandLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getFormatterLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getCurrencyFormatterLocale SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLocaleSettingsDebugDescriptionWithDevice:(BOOL)withDevice SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDatePatternFrom:(NSString * _Nonnull)dateFormatTemplate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFullyAuthenticated SWIFT_WARN_UNUSED_RESULT;
- (void)startIdleTimer;
- (void)stopIdleTimer;
- (void)resetIdleTimer;
- (PEUserContext * _Nullable)getCurrentUserContext SWIFT_WARN_UNUSED_RESULT;
- (PEPatientContext * _Nullable)getCurrentPatientContext SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceUId SWIFT_WARN_UNUSED_RESULT;
- (void)invalidateAlertsForPatient;
- (PELocale * _Nullable)getCurrentLocaleOverride SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldEnableLogoutButton SWIFT_WARN_UNUSED_RESULT;
- (enum PEAppleWatchState)getAppleWatchState SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether the device has timed out
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether the application + org supports printing
- (BOOL)isPrintingSupported SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
- (id <PEThemeProtocol> _Nonnull)getDefaultTheme SWIFT_WARN_UNUSED_RESULT;
/// Helper method to get the launch scheme of the app
- (NSString * _Nullable)getAppLaunchScheme SWIFT_WARN_UNUSED_RESULT;
- (void)clearLoginState;
- (BOOL)isAppReviewModeEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPhonebookUrl SWIFT_WARN_UNUSED_RESULT;
/// Get if the MO Printing Onboarding should be hidden
- (BOOL)shouldSuppressMOPrintingOnboarding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A view controller responsible for showing the check in screen for the Appointment Arrival feature.
SWIFT_CLASS("_TtC7MyChart41WPAppointmentArrivalCheckInViewController")
@interface WPAppointmentArrivalCheckInViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalCheckInViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param csn the appointment csn
///
/// \param displayTime the appointment display time
///
/// \param index the patient index
///
/// \param initiatedWithBeacons Was this for a beacon
///
/// \param enableSnooze Should you enable snoozing
///
/// \param initiatedFromSnooze Was this created from a snooze
///
/// \param arrivedApptOrganizationID the appointment org id
///
/// \param firstUserID The user id for the appt
///
/// \param userInitiated The user initiated this
///
/// \param autoCheckIn And auto check in the user
///
/// \param firstUserID The ID of the user associated with the appt
///
/// \param arrivalWindowEndTime the appointment arrival end time
///
+ (WPAppointmentArrivalCheckInViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext forCSN:(NSString * _Nonnull)csn appointmentTime:(NSDate * _Nonnull)displayTime andPatientIndex:(NSInteger)index andInitiatedWithBeacons:(BOOL)initiatedWithBeacons andEnableSnooze:(BOOL)enableSnooze andInitiatedFromSnooze:(BOOL)initiatedFromSnooze andInitiatedFromUser:(BOOL)userInitiated andOrgID:(NSString * _Nonnull)arrivedApptOrganizationID andFirstUserID:(NSString * _Nonnull)firstUserID andArrivalWindowEndTime:(NSDate * _Nullable)arrivalWindowEndTime SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7MyChart43WPAppointmentArrivalEventAuditWebServiceAPI")
@interface WPAppointmentArrivalEventAuditWebServiceAPI : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ArrivalEventType : NSInteger;

SWIFT_CLASS("_TtC7MyChart32WPAppointmentArrivalEventTracker")
@interface WPAppointmentArrivalEventTracker : NSObject
/// Audit any stored arrival event as soon as possible
/// \param orgId org id
///
/// \param callback completion handler
///
+ (void)auditStoredArrivalEventWithOrgId:(NSString * _Nonnull)orgId;
/// Audit a specific arrival event if possible
/// \param callback completion handler
///
/// \param event event enum
///
/// \param csn csn of the visit
///
/// \param patientIndex patient index of the visit
///
/// \param selfArrivalMechanism self arrival mechanism
///
+ (void)auditArrivalEventWithEvent:(enum ArrivalEventType)event csn:(NSString * _Nonnull)csn patientIndex:(NSInteger)patientIndex selfArrivalMechanism:(NSInteger)selfArrivalMechanism;
/// Store an arrival event to User Defaults to be submitted on a later (generall the next login) date
/// \param arrivalEventType arrival Event type
///
/// \param orgid org id
///
/// \param csn csn
///
/// \param patientIndex patient index
///
/// \param isBeacon bool
///
+ (void)storeArrivalEventWithArrivalEventType:(enum ArrivalEventType)arrivalEventType orgId:(NSString * _Nullable)orgId csn:(NSString * _Nullable)csn patientIndex:(NSInteger)patientIndex isBeacon:(BOOL)isBeacon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ArrivalEventType, open) {
  ArrivalEventTypeVisitTracked = 10,
  ArrivalEventTypeVisitNotified = 11,
  ArrivalEventTypeVisitPrompt = 12,
  ArrivalEventTypeVisitSnoozed = 13,
  ArrivalEventTypeVisitDeclined = 14,
  ArrivalEventTypeUnknown = 99,
};


/// A navigation controller for the workflow to setup Appointment Arrival. The setup workflow may include feature onboarding in addition to actually enabling appointment arrival (along with required OS permissions).
SWIFT_CLASS("_TtC7MyChart40WPAppointmentArrivalNavigationController")
@interface WPAppointmentArrivalNavigationController : WPRootNavigationController
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters.
/// \param userContext the current user context
///
/// \param rootViewController the view controller to display within this navigation controller
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext rootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters. This is for the arrival workflow
/// \param userContext the current user context
///
/// \param csn the appointment csn
///
/// \param isCSNEncrypted Is the provided CSN encrypted. Only respected in MO Appointment Arrival.
///
/// \param displayTime the appointment display time
///
/// \param index the patient index
///
/// \param initiatedWithBeacons Was this for a beacon
///
/// \param enableSnooze Should you enable snoozing
///
/// \param initiatedFromSnooze Was this created from a snooze
///
/// \param userInitiated Was this initiated from locationless arrival mechanism
///
/// \param arrivedApptOrganizationID the appointment org id
///
/// \param firstUserID The user id for the appt
///
/// \param arrivalWindowEndTime Date/time of the arrival end window
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext forCSN:(NSString * _Nonnull)csn andIsCSNEncrypted:(BOOL)isCSNEncrypted appointmentTime:(NSDate * _Nullable)displayTime andPatientIndex:(NSInteger)index andSelfArrivalMechanism:(enum WPAPIAppointmentSelfArrivalMechanism)selfArrivalMechanism andEnableSnooze:(BOOL)enableSnooze andInitiatedFromSnooze:(BOOL)initiatedFromSnooze andOrgID:(NSString * _Nonnull)arrivedApptOrganizationID andFirstUserID:(NSString * _Nonnull)firstUserID andArrivalWindowEndTime:(NSDate * _Nullable)arrivalWindowEndTime ticklerMethod:(NSString * _Nullable)ticklerMethod OBJC_DESIGNATED_INITIALIZER;
/// UINavigationController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// UINavigationController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end


/// A view controller responsible for onboarding users to the Appointment Arrival feature.
SWIFT_CLASS("_TtC7MyChart44WPAppointmentArrivalOnboardingViewController")
@interface WPAppointmentArrivalOnboardingViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalOnboardingViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
+ (WPAppointmentArrivalOnboardingViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UIViewController
- (void)viewWillLayoutSubviews;
/// UIViewController
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPAppointmentArrivalOnboardingViewController (SWIFT_EXTENSION(MyChart)) <IWPPushNotificationsDelegate>
- (void)setPushNotificationsReturnedWith:(enum WPAPISetPushNotificationsStatusResult)status;
- (void)pushNotificationsReturnedWith:(enum WPAPIPushNotificationsStatus)status;
@end


@protocol PEComponentHostProtocol;

@interface WPAppointmentArrivalOnboardingViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
- (BOOL)shouldHideComponentHostEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


/// A view controller responsible for prompting the user for all required permissions and actually enabling Appointment Arrival.
SWIFT_CLASS("_TtC7MyChart45WPAppointmentArrivalPermissionsViewController")
@interface WPAppointmentArrivalPermissionsViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalPermissionsViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
+ (WPAppointmentArrivalPermissionsViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UIViewController
- (void)viewWillAppear:(BOOL)animated;
/// UIViewController
- (void)viewDidAppear:(BOOL)animated;
/// UIViewController
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPAppointmentArrivalPermissionsViewController (SWIFT_EXTENSION(MyChart)) <IWPPushNotificationsDelegate>
- (void)setPushNotificationsReturnedWith:(enum WPAPISetPushNotificationsStatusResult)status;
- (void)pushNotificationsReturnedWith:(enum WPAPIPushNotificationsStatus)status;
@end


@interface WPAppointmentArrivalPermissionsViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart44WPAppointmentArrivalWebViewControllerManager")
@interface WPAppointmentArrivalWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WPOrganizationInfo;
@class WPAppointment;
@class WPComponentContainerViewController;

SWIFT_RESILIENT_CLASS("_TtC7MyChart40WPAppointmentAvsWebViewControllerManager")
@interface WPAppointmentAvsWebViewControllerManager : MyChartWebViewControllerManager
/// Creates the view intent for standard MO AVS.
+ (WPComponentContainerViewController * _Nullable)getViewControllerWithOrgInfo:(WPOrganizationInfo * _Nonnull)orgInfo appointment:(WPAppointment * _Nonnull)appointment isPastAdmission:(BOOL)isPastAdmission SWIFT_WARN_UNUSED_RESULT;
/// Creates the view intent for external to Epic MO AVS (i.e. H2G++).
+ (WPComponentContainerViewController * _Nullable)getDXRViewControllerWithReferenceID:(NSString * _Nonnull)referenceID dxoID:(NSString * _Nonnull)dxoID SWIFT_WARN_UNUSED_RESULT;
/// Creates the view intent for notes MO AVS, with options to hide the AVS tab.
+ (WPComponentContainerViewController * _Nullable)getNotesViewControllerWithOrgInfo:(WPOrganizationInfo * _Nonnull)orgInfo csn:(NSString * _Nullable)csn hideTabs:(BOOL)hideTabs isPastAdmission:(BOOL)isPastAdmission SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPMonitoredForArrivalAppointment;

@interface WPAppointmentLocationManager (SWIFT_EXTENSION(MyChart))
/// Swift-to-objc bridge to register with with the Swift-only FutureAppointmentsLoader
- (void)registerWithFutureAppointmentsLoader;
/// Swift-to-objc bridge to register with with the Swift-only FutureAppointmentsLoader
- (void)unregisterWithFutureAppointmentsLoader;
/// Should be called when leaving the code flow that sets up or updates appointment monitoring
/// \param appointment The appointment that is being monitored, or <code>nil</code> if no appointment is being monitored.
///
- (void)onLeavingAppointmentArrivalMonitoringFlowWithAppointment:(WPMonitoredForArrivalAppointment * _Nullable)appointment;
/// initiates the Hello Patient workflow using the shared instance of the FutureAppointmentsLoader
/// Will only do this if all the appropriate permissions and information required to set up appointment monitoring are available and enabled.
- (void)initiateAppointmentArrivalMonitoring;
@end


/// class with methods for web requests related to Appointment Requests
SWIFT_CLASS("_TtC7MyChart27WPAppointmentRequestService")
@interface WPAppointmentRequestService : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPAppointmentsComponentAPI (SWIFT_EXTENSION(MyChart))
- (void)requestAppointmentLiveActivities_internal;
@end


SWIFT_CLASS("_TtC7MyChart28WPAppointmentsFeatureManager")
@interface WPAppointmentsFeatureManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL panelAppointments2019Available;)
+ (BOOL)panelAppointments2019Available SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAppointmentSummaryAvailable;)
+ (BOOL)pastAppointmentSummaryAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAdmissionSummaryAvailable;)
+ (BOOL)pastAdmissionSummaryAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL appointmentDetailsAvailable;)
+ (BOOL)appointmentDetailsAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL crossOrganizationTelehealthAvailable;)
+ (BOOL)crossOrganizationTelehealthAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAdmissionsAvailable;)
+ (BOOL)pastAdmissionsAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol WPAppointmentsListRowViewModel;

SWIFT_PROTOCOL("_TtP7MyChart21WPAppointmentsListRow_")
@protocol WPAppointmentsListRow
- (void)setWith:(id <WPAppointmentsListRowViewModel> _Nonnull)viewModel;
@end


SWIFT_PROTOCOL("_TtP7MyChart30WPAppointmentsListRowViewModel_")
@protocol WPAppointmentsListRowViewModel
@end

@class WPSpringboardInfo;
@class WPJustScheduledDetails;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC7MyChart32WPAppointmentsListViewController")
@interface WPAppointmentsListViewController : WPTableViewController
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
+ (WPAppointmentsListViewController * _Nonnull)instantiate SWIFT_WARN_UNUSED_RESULT;
+ (WPAppointmentsListViewController * _Nonnull)instantiateWithJustScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil contents:(NSMutableArray * _Nullable)contents SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@end

@class NSData;

@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPPatientVisitGuideLoadedProtocol>
- (void)visitGuideLoadedWithData:(NSData * _Nullable)data;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <CommunityDataRefreshViewDelegate>
- (void)launchRefreshView;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPCancelAppointmentDelegate>
- (void)cancelAppointmentDidNotConfirm;
- (void)cancelAppointmentConfirmed:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
- (void)cancelAppointmentConfirmFailure:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPCustomFeatureLaunchListener>
- (BOOL)showExternalLinkPrompt SWIFT_WARN_UNUSED_RESULT;
- (void)onLaunchSuccess;
- (void)onLaunchFailure:(BOOL)showError;
@end


@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart))
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class WPAttachment;

SWIFT_CLASS("_TtC7MyChart32WPAttachmentUploadViewController")
@interface WPAttachmentUploadViewController : WPViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the view controller with a dcs ID and an optional file extension for the attachment
/// \param dcsID dcs ID of the attachment being launched
///
/// \param dcsExtension optional file extension for the attachment
///
- (nonnull instancetype)initWithAttachment:(WPAttachment * _Nonnull)attachment;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/// Authentication status of the user
typedef SWIFT_ENUM(NSInteger, WPAuthenticationStatus, open) {
  WPAuthenticationStatusNotAuthenticated = 0,
  WPAuthenticationStatusLimitedAuthentication = 1,
  WPAuthenticationStatusFullyAuthenticated = 2,
};


/// View setting the attributes of WPBannerView.xib and generic button behavior
SWIFT_CLASS("_TtC7MyChart12WPBannerView")
@interface WPBannerView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart21WPBillingComponentAPI")
@interface WPBillingComponentAPI : NSObject <PEBillingComponentAPIProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOPaperlessSettingsFeatureIdentifier;)
+ (NSString * _Nonnull)MOPaperlessSettingsFeatureIdentifier SWIFT_WARN_UNUSED_RESULT;
- (enum PEComponentAccessResult)hasAccessForBillingWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getBillingViewControllerForMode:(enum PEBillingMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (enum PEComponentAccessResult)hasAccessForEstimatesWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getEstimatesViewControllerForMode:(enum PEEstimatesMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart39WPBillingDocumentLauncherViewController")
@interface WPBillingDocumentLauncherViewController : WPViewController
/// Initializes the view controller with a blob key, doc type , doc ID, billing system, ear ID, optional pes ID, and optional display name for the scan
/// \param blobKey Blob file name of the document, encrypted by the source organization
///
/// \param docType The type of document to check. 1  - Statements,  2 - Letters, 3 - Receipts
///
/// \param docId The  string identifier of document record
///
/// \param billSys The billing system that the document is associated with
///
/// \param earId The guarantor ID
///
/// \param pesId The estimate  ID. If not null, indicates that this is  an estimate letter
///
/// \param displayName The patient-friendly display name for the scan
///
- (nonnull instancetype)initWithBlobKey:(NSString * _Nonnull)blobKey andDocType:(NSString * _Nonnull)docType andDocId:(NSString * _Nonnull)docId andBillSys:(NSString * _Nonnull)billSys andEarId:(NSString * _Nonnull)earId andPesId:(NSString * _Nullable)pesId andDisplayName:(NSString * _Nullable)displayName OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart33WPBillingWebViewControllerManager")
@interface WPBillingWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart32WPBlobScanLauncherViewController")
@interface WPBlobScanLauncherViewController : WPViewController
/// Initializes the view controller with a blob key, order ID, and optional display name for the scan
/// \param blobKey Blob file name of the document, encrypted by the source organization
///
/// \param ordId Order that the blob scan is attached to, encrypted by the source organization
///
/// \param displayName The patient-friendly display name for the scan
///
/// \param h2gOrgId Org ID for the blob’s source organization, for H2G scans
///
- (nonnull instancetype)initWithBlobKey:(NSString * _Nonnull)blobKey andOrdId:(NSString * _Nonnull)ordId andDisplayName:(NSString * _Nullable)displayName andExternalOrgId:(NSString * _Nullable)h2gOrgId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface WPCampaignViewController (SWIFT_EXTENSION(MyChart))
- (enum WPAPIDeepLinkExecuteResult)executeWithDeepLink:(NSString * _Nullable)deepLink in:(UINavigationController * _Nonnull)navigationController SWIFT_WARN_UNUSED_RESULT;
- (void)launchCampaignScheduling;
- (NSString * _Nullable)getErrorMessageForResult:(enum WPAPIDeepLinkExecuteResult)result SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPCancelAppointmentViewController (SWIFT_EXTENSION(MyChart))
- (void)handleRescheduleInLiveActivities:(NSArray<WPAppointment *> * _Nullable)appointmentsToCancel;
@end

@class NSMutableDictionary;

SWIFT_CLASS("_TtC7MyChart44WPCommunityUpdateMyAccountsWebViewController")
@interface WPCommunityUpdateMyAccountsWebViewController : WPCommunityManageMyAccountsWebViewController
- (nonnull instancetype)init;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (null_unspecified instancetype)init:(NSMutableDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initForLinking OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// response class for getting H2G++ refresh data status
SWIFT_CLASS("_TtC7MyChart23WPCommunityUpdateStatus")
@interface WPCommunityUpdateStatus : NSObject
@property (nonatomic) NSInteger success;
@property (nonatomic, copy) NSString * _Nullable dxoId;
@property (nonatomic, copy) NSString * _Nullable orgName;
@property (nonatomic, copy) NSString * _Nullable focusWPR;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface WPComponentContainerViewController (SWIFT_EXTENSION(MyChart))
- (void)setDeepLinkLaunchParametersInternal:(NSDictionary<NSString *, NSString *> * _Nonnull)params;
@end



SWIFT_CLASS("_TtC7MyChart15WPCookieHandler")
@interface WPCookieHandler : NSObject <WebSessionEventDelegate>
- (void)onWebSessionReadyWithSuccess:(BOOL)success;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEPhonebookEntryProtocol;
@class WPServer;

/// Helper class for WPCoreAuthentication
SWIFT_CLASS("_TtC7MyChart26WPCoreAuthenticationHelper")
@interface WPCoreAuthenticationHelper : NSObject
/// Perform tasks required once full login has completed
+ (void)onLoginCompleted;
/// Tells the application to pend a deep link during the post-signup login workflow.
/// \param deepLinkUrl URL for the deep link to pend. If the epichttp:// prefix is missing, it will be added before creating the deep link.
///
+ (void)pendPostSignupDeepLink:(NSString * _Nonnull)deepLinkUrl;
/// Load the branding settings
+ (void)performLoadingBrandingTasksOnCompletion:(void (^ _Nonnull)(void))onCompletion;
/// Do any extra login tasks after the login is complete.  Including:
/// <ol>
///   <li>
///     Push Notification set up
///   </li>
/// </ol>
+ (void)performAsyncLoginTasksOnCompletion:(void (^ _Nonnull)(BOOL))completionHandler;
/// Attempt to login with a passcode
/// \param passcode The passcode to login with
///
/// \param phonebookEntry The org’s phonebook
///
/// \param onCompletion Listener block
///
+ (void)tryPasscodeLoginWithPasscode:(NSString * _Nonnull)passcode phonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSInteger))onCompletion;
+ (BOOL)isPasscodeSet:(WPServer * _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isBiometricAuthenticationSet:(WPServer * _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
/// Attempt to login with a biometric
/// \param phonebookEntry The org’s phonebook
///
/// \param onCompletion Listener block
///
+ (void)getTokenForBiometricWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))onCompletion;
/// Check if there is username recovery
/// \param phonebookEntry The org
///
///
/// returns:
/// if you can launch username
+ (BOOL)canLaunchUsernameRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Launch the username password recovery
/// \param phonebookEntry The orgs phonebook
///
/// \param mainVc The main VC to launch off
///
/// \param theme The theme of the org
///
+ (void)launchUsernameRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Check if there is password recovery
/// \param phonebookEntry The org
///
///
/// returns:
/// if you can launch password
+ (BOOL)canLaunchPasswordRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Launch the password recovery
/// \param phonebookEntry The orgs phonebook
///
/// \param mainVc The main VC to launch off
///
/// \param theme The theme of the org
///
+ (void)launchPasswordRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Asks whether signup is allowed for the phonebook entry
+ (BOOL)canLaunchSignUpWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Tells the application to launch the sign up workflow for the specified server within the provided navigation controller
/// \param server selected server
///
/// \param navigationController hosting navigation controller
///
/// \param theme The theme of the org
///
+ (void)launchSignUpWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Can the password reset to launched
/// \param phonebookEntry For org
///
///
/// returns:
/// If it can be launched
+ (BOOL)canLaunchPasswordResetWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Launch the password reset
/// \param phonebookEntry The org
///
/// \param mainVc The main VC to launch from
///
/// \param theme The theme of the org
///
+ (void)launchPasswordResetWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Logs the user out with epichttp://logout as the default command
+ (void)logoutForIdleTimeout;
/// Logs the user out with epichttp://logout as the default command
+ (void)logout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart31WPCovidStatusSpringboardManager")
@interface WPCovidStatusSpringboardManager : NSObject <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPCustomAppManager (SWIFT_EXTENSION(MyChart))
/// Perform the deep link for custom feature
/// \param navigationController The navigationController is perform the deep link
///
/// \param url the deep link url
///
+ (void)performDeepLinkForCustomFeatureIn:(UINavigationController * _Nonnull)navigationController withDeepLink:(NSString * _Nullable)deepLink;
@end

@class WPCustomerServiceSettingsTopic;

/// response class for messaging web service that gets customer service settings
SWIFT_CLASS("_TtC7MyChart33WPCustomerServiceSettingsResponse")
@interface WPCustomerServiceSettingsResponse : NSObject
/// List of topics
@property (nonatomic, copy) NSArray<WPCustomerServiceSettingsTopic *> * _Null_unspecified topics;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// class to represent customer service topics in settings loaded from the database
SWIFT_CLASS("_TtC7MyChart30WPCustomerServiceSettingsTopic")
@interface WPCustomerServiceSettingsTopic : NSObject
/// topic ID
@property (nonatomic, copy) NSString * _Nullable ID;
/// topic title
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for web requests related to Customer Service
SWIFT_CLASS("_TtC7MyChart30WPCustomerServiceWebServiceAPI")
@interface WPCustomerServiceWebServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <CustomerServiceCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Objective-C wrapper for the web service to load customer service settings
/// \param patientContext the callback object
///
/// \param encMsgInfo server encrypted workflow-specific information to load the right topics
///
- (void)getSettingsWithPatientContext:(PEPatientContext * _Nonnull)patientContext encMsgInfo:(NSString * _Nonnull)encMsgInfo orgInfo:(WPOrganizationInfo * _Nonnull)orgInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7MyChart28WPDeepLinkHomeViewController")
@interface WPDeepLinkHomeViewController : WPViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// This class is responsible for the creation, access security, and execution of deep links
SWIFT_CLASS("_TtC7MyChart17WPDeepLinkManager")
@interface WPDeepLinkManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpUrlPrefix;)
+ (NSString * _Nonnull)EpicHttpUrlPrefix SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicMyChartUrlPrefix;)
+ (NSString * _Nonnull)EpicMyChartUrlPrefix SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgID;)
+ (NSString * _Nonnull)EpicHttpH2GOrgID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgName;)
+ (NSString * _Nonnull)EpicHttpH2GOrgName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgLogoUrl;)
+ (NSString * _Nonnull)EpicHttpH2GOrgLogoUrl SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if there is a valid pending deep link
+ (BOOL)hasDeepLinkPendingLogin SWIFT_WARN_UNUSED_RESULT;
/// Is the specified URL a valid deep link. See also DeepLink.isValid()
+ (BOOL)isValidDeepLinkUrl:(NSString * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPDeepLinkManager (SWIFT_EXTENSION(MyChart))
/// Get the parameters dictionary for the url of the pending deepLink object, if it exists
+ (NSDictionary<NSString *, NSString *> * _Nullable)legacyGetPendingDeepLinkInfo SWIFT_WARN_UNUSED_RESULT;
/// Get the parameters dictionary for the url of the specified deep link
+ (NSDictionary<NSString *, NSString *> * _Nonnull)legacyGetParamsForLibrary:(NSString * _Nonnull)deepLinkUrl SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart34WPDeepLinkWebViewControllerManager")
@interface WPDeepLinkWebViewControllerManager : MyChartWebViewControllerManager
/// Initialize this manager using the deeplink that has launched the generic webViewController
- (nonnull instancetype)initWithDeepLinkUrl:(NSString * _Nullable)deepLinkUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol CardStyleProtocol;
@protocol TextStyleProtocol;

/// Class representing the default theme for the application, which should be referenced when an organization theme is not available (i.e. prelogin).
SWIFT_CLASS("_TtC7MyChart14WPDefaultTheme")
@interface WPDefaultTheme : NSObject <PEThemeProtocol>
- (NSString * _Nullable)getBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns the default theme for the application
+ (WPDefaultTheme * _Nonnull)getTheme SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
- (id <CardStyleProtocol> _Nonnull)getCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <CardStyleProtocol> _Nonnull)getInteractiveCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <TextStyleProtocol> _Nonnull)getTextStyleWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class WPGetDocumentResponse;

SWIFT_CLASS("_TtC7MyChart32WPDocumentLauncherViewController")
@interface WPDocumentLauncherViewController : WPViewController <WPShareDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the view controller with a dcs ID and an optional file extension for the document
/// \param dcsID dcs ID of the document being launched
///
/// \param dcsExtension optional file extension for the document
///
/// \param orgID H2G org ID for loading H2G documents
///
/// \param useSourceEncryption true if the DCS ID is encrypted at the source org for external documents, false if it’s encrypted at the local org
///
- (nonnull instancetype)initWithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID useSourceEncryption:(BOOL)useSourceEncryption;
/// Initializes the view controller with a dcs ID and an optional file extension for the document. This initializer is always used to download the document
/// \param dcsID dcs ID of the document being launched
///
/// \param dcsExtension optional file extension for the document
///
/// \param orgID H2G org ID for loading H2G documents
///
/// \param useSourceEncryption true if the DCS ID is encrypted at the source org for external documents, false if it’s encrypted at the local org
///
- (nonnull instancetype)initForDownloadwithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID useSourceEncryption:(BOOL)useSourceEncryption;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
/// Callback method that is called after getting the document from the server
/// \param response The response object containing the document object
///
- (void)didGetDocumentWithResponse:(WPGetDocumentResponse * _Nonnull)response;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didShowShareDialog;
- (void)didCancelShareDialog;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart19WPDrivingDirections")
@interface WPDrivingDirections : NSObject
/// Launch maps from the specified address
/// \param address address to search for
///
+ (void)launchMapsWithAddress:(NSString * _Nonnull)address;
/// Launch maps from the specified address with the latitude/longitude as a starting search point
/// \param address address to search for
///
/// \param latitude latitude of starting point
///
/// \param longitude longitude of starting point
///
+ (void)launchMapsWithAddress:(NSString * _Nonnull)address latitude:(float)latitude longitude:(float)longitude;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart49WPECheckInAdditionalStepsWebViewControllerManager")
@interface WPECheckInAdditionalStepsWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartWebParameter;

SWIFT_RESILIENT_CLASS("_TtC7MyChart34WPECheckInWebViewControllerManager")
@interface WPECheckInWebViewControllerManager : MyChartWebViewControllerManager
+ (WPComponentContainerViewController * _Nullable)getViewControllerWithParameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters isEVisit:(BOOL)isEVisit isInpatient:(BOOL)isInpatient orgInfo:(WPOrganizationInfo * _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getDeepLinkParamsForCSN:(NSString * _Nonnull)csn isCsnEncrypted:(BOOL)isCsnEncrypted orgInfo:(WPOrganizationInfo * _Nullable)orgInfo isEVisit:(BOOL)isEVisit isInpatient:(BOOL)isInpatient SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart32WPEVisitWebViewControllerManager")
@interface WPEVisitWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPComponentContainerViewController * _Nullable)getViewController SWIFT_WARN_UNUSED_RESULT;
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPEncounter;

@interface WPEncounterViewController (SWIFT_EXTENSION(MyChart))
- (void)ensureAllPDFDataIsLoadedWithAppt:(WPEncounter * _Nonnull)appt;
@end


/// View controller that forwards an epichttp-based FDI feature to the corresponding view
SWIFT_CLASS("_TtC7MyChart27WPFDILauncherViewController")
@interface WPFDILauncherViewController : UIViewController
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relayKey;)
+ (NSString * _Nonnull)relayKey SWIFT_WARN_UNUSED_RESULT;
/// Initialize and FDI activity with at least one URL specified
/// \param fdiId The FDI to launch
///
- (nonnull instancetype)initWithFdiId:(NSString * _Nonnull)fdiId deepLinkURL:(NSString * _Nonnull)deepLinkURL h2gOrgId:(NSString * _Nullable)h2gOrgId OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didEnterBackground;
/// Returns the correct FDI to use based on Epichttp link
/// \param url epichttp link containing either a webid or an iosid
///
///
/// returns:
/// the correct FDI to launch. Nil if invalid.
+ (NSString * _Nullable)parseFdiFromEpichttp:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns the correct URL to use based on Epichttp link
/// \param url epichttp link containing a url value
///
///
/// returns:
/// the correct URL to launch. Nil if invalid.
+ (NSString * _Nullable)parseUrlFromEpichttp:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface WPFDILauncherViewController (SWIFT_EXTENSION(MyChart)) <WPCustomFeatureLaunchListener>
- (BOOL)showExternalLinkPrompt SWIFT_WARN_UNUSED_RESULT;
- (void)onLaunchSuccess;
- (void)onLaunchFailure:(BOOL)showWebViewSupportError;
@end



SWIFT_CLASS("_TtC7MyChart31WPFamilyAccessWebViewController")
@interface WPFamilyAccessWebViewController : WPActivityWebViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)init;
- (NSInteger)getWebViewPatientIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Serialized class corresponding to CustomFeature.cs to be used for objective C based webservices.
/// When making updates to this object, consider WPCheckInAppointmentResponse.swift which houses the same object representation for swift based webservices.
SWIFT_CLASS("_TtC7MyChart16WPFeatureDetails")
@interface WPFeatureDetails : WPObject
@property (nonatomic, copy) NSString * _Nullable featureId;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic, copy) NSString * _Nullable icon;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart36WPFutureAppointmentCaseProcedureView")
@interface WPFutureAppointmentCaseProcedureView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart29WPFutureAppointmentDetailView")
@interface WPFutureAppointmentDetailView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)buttonTapped;
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
@end

@class WPWaitListEntry;

SWIFT_CLASS("_TtC7MyChart40WPFutureAppointmentDetailsViewController")
@interface WPFutureAppointmentDetailsViewController : WPViewController
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ArriveAppointmentKey;)
+ (NSString * _Nonnull)ArriveAppointmentKey SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL startVideoVisitOnLoad;
/// Instantiates the Future Appointment Details view controller
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param appointment appointment
///
/// \param waitListEntry linked wait list entry for the appointment
///
///
/// returns:
/// The future appointment details view controller
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithAppointment:(WPAppointment * _Nonnull)appointment SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails isEVisit:(BOOL)isEVisit SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails shouldArriveAppointment:(BOOL)shouldArriveAppointment isEVisit:(BOOL)isEVisit SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)reloadData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPOnDemandVideoVisitAlertDelegate>
- (void)showOnDemandVideoVisitAlert:(UIAlertController * _Null_unspecified)alert;
@end

@class EKEventEditViewController;

@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <EKEventEditViewDelegate>
- (void)eventEditViewController:(EKEventEditViewController * _Nonnull)controller didCompleteWithAction:(EKEventEditViewAction)action;
@end


@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPPatientVisitGuideLoadedProtocol>
- (void)visitGuideLoadedWithData:(NSData * _Nullable)data;
@end






@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPCancelAppointmentDelegate>
- (void)cancelAppointmentDidNotConfirm;
- (void)cancelAppointmentConfirmed:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
- (void)cancelAppointmentConfirmFailure:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
@end

@class WPGenericAlertInfo;

SWIFT_CLASS("_TtC7MyChart33WPFutureAppointmentDisplayManager")
@interface WPFutureAppointmentDisplayManager : NSObject
+ (WPGenericAlertInfo * _Nonnull)getJustScheduledAlertInfoWithJustScheduledDetails:(WPJustScheduledDetails * _Nonnull)justScheduledDetails apptDetailsAvailable:(BOOL)apptDetailsAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart29WPFutureAppointmentHeaderView")
@interface WPFutureAppointmentHeaderView : UIStackView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@protocol ImageDataSource;

@interface WPFutureAppointmentHeaderView (SWIFT_EXTENSION(MyChart)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)forSource;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)forSource;
@end

@class WPCardView;
@class NSLayoutConstraint;
@protocol WPViewContainingWebViewDelegate;

SWIFT_CLASS("_TtC7MyChart42WPFutureAppointmentPatientInstructionsView")
@interface WPFutureAppointmentPatientInstructionsView : UIView
@property (nonatomic, weak) IBOutlet WPCardView * _Null_unspecified rootView;
@property (nonatomic, weak) IBOutlet UIStackView * _Null_unspecified stackView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified headerLabel;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified trailingPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified bottomPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified topPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified leadingPaddingConstraint;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// This sets the delegate for the view containing web view so that we can present a web view controller if needed
- (void)setNavigationDelegate:(id <WPViewContainingWebViewDelegate> _Nullable)delegate;
- (void)populateWithContent:(NSString * _Nonnull)content isHtml:(BOOL)isHtml includeHeader:(BOOL)includeHeader;
@end


@interface WPFutureAppointmentPatientInstructionsView (SWIFT_EXTENSION(MyChart)) <WPViewContainingWebViewDelegate>
- (void)navigateToAllowedHostForRequest:(NSURLRequest * _Nullable)request allowedHosts:(NSArray * _Nullable)allowedHosts;
- (void)openUrlInExternalBrowser:(NSURL * _Nullable)url;
@end


SWIFT_CLASS("_TtC7MyChart31WPFutureAppointmentProviderView")
@interface WPFutureAppointmentProviderView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC7MyChart27WPFutureAppointmentTimeView")
@interface WPFutureAppointmentTimeView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
@end


SWIFT_CLASS("_TtC7MyChart33WPFutureAppointmentVideoVisitView")
@interface WPFutureAppointmentVideoVisitView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// response class for getting H2G++ refresh data status
SWIFT_CLASS("_TtC7MyChart34WPGetCommunityUpdateStatusResponse")
@interface WPGetCommunityUpdateStatusResponse : NSObject
@property (nonatomic, copy) NSArray<WPCommunityUpdateStatus *> * _Nonnull communityUpdateStatuses;
@end


/// API class with methods for WebRequests related to Get Personal Notes
SWIFT_CLASS("_TtC7MyChart28WPGetPersonalNotesServiceAPI")
@interface WPGetPersonalNotesServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <GetPersonalNotesCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Get list of personal notes.
/// Callers should first ensure that the health goal functionality is available by checking the IC feature bit
/// \param patientContext the patient context
///
- (void)getPersonalNotesWithPatientContext:(PEPatientContext * _Nonnull)patientContext noteType:(enum PersonalNoteType)noteType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WPPersonalNotesInfo;

/// Response object for getPersonalNotes service call
SWIFT_CLASS("_TtC7MyChart33WPGetPersonalNotesServiceResponse")
@interface WPGetPersonalNotesServiceResponse : NSObject
/// Note
@property (nonatomic, strong) WPPersonalNotesInfo * _Null_unspecified personalNotes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart14WPHKDeviceInfo")
@interface WPHKDeviceInfo : WPDeviceInfo
@property (nonatomic, copy) NSString * _Nullable platform;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum WPHSUpdateStatus : NSInteger;

SWIFT_PROTOCOL("_TtP7MyChart25WPHSPatientUpdateProtocol_")
@protocol WPHSPatientUpdateProtocol
@property (nonatomic, readonly) enum WPHSUpdateStatus status;
@end

typedef SWIFT_ENUM(NSInteger, WPHSUpdateStatus, open) {
  WPHSUpdateStatusReconciled = 0,
  WPHSUpdateStatusAdded = 1,
  WPHSUpdateStatusRemoved = 3,
};


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPHealthSummaryWebViewControllerManager")
@interface WPHealthSummaryWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPHomeTabBarViewController (SWIFT_EXTENSION(MyChart))
- (void)popViewControllerToLoginAnimated:(BOOL)animated;
@end

@class AnimatedImageView;

SWIFT_CLASS("_TtC7MyChart25WPIconTextButtonViewModel")
@interface WPIconTextButtonViewModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly) BOOL keepImageOriginalColor;
@property (nonatomic, readonly, strong) AnimatedImageView * _Nullable animationImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WPScheduleWebViewMode : NSInteger;

/// Class that holds information for a just-scheduled visit
SWIFT_CLASS("_TtC7MyChart22WPJustScheduledDetails")
@interface WPJustScheduledDetails : NSObject
/// Sets all of the just scheduled details fields
/// \param justScheduled true if we are just went through the scheduling workflow and scheduled an appt or appt request
///
/// \param mode enum used for display strings.
///
/// \param numAppts the number of appointments that were scheduled
///
+ (WPJustScheduledDetails * _Nonnull)instantiateWithJustScheduled:(BOOL)justScheduled mode:(enum WPScheduleWebViewMode)mode numAppts:(NSInteger)numAppts SWIFT_WARN_UNUSED_RESULT;
/// Sets all of the just scheduled details fields
/// \param userInfo NSDictionary that follows the deep link userInfo pattern
///
+ (WPJustScheduledDetails * _Nonnull)instantiateWithUserInfo:(NSDictionary * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Puts the just scheduled details object into an NSDictionary to use with deep link’s userInfo pattern
- (NSDictionary * _Nonnull)toUserInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum describing what scheduling workflow just took place
typedef SWIFT_ENUM(NSInteger, WPScheduleWebViewMode, open) {
  WPScheduleWebViewModeUnknown = 0,
  WPScheduleWebViewModeSchedule = 1,
  WPScheduleWebViewModeReschedule = 2,
  WPScheduleWebViewModeApptRequest = 3,
};


SWIFT_CLASS("_TtC7MyChart26WPLettersWebViewController")
@interface WPLettersWebViewController : WPActivityWebViewController
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Modal view controller that shows linking progress between phone and watch
SWIFT_CLASS("_TtC7MyChart30WPLinkAppleWatchViewController")
@interface WPLinkAppleWatchViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@end


SWIFT_CLASS("_TtC7MyChart22WPLoadingTableViewCell")
@interface WPLoadingTableViewCell : UITableViewCell <WPAppointmentsListRow>
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setWith:(id <WPAppointmentsListRowViewModel> _Nonnull)viewModel;
@end


@interface WPLoginToken (SWIFT_EXTENSION(MyChart))
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID)
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
- (void)removeSecondaryLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID)
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
- (void)removeSecondaryLogin;
/// Removes the login token used for passcode login
///
/// returns:
/// true if the passcode login token was found and  successfully removed, false otherwise
- (void)removePasscodeLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for passcode login
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
- (void)removePasscodeLogin;
/// Removes the login token used for biometric login
///
/// returns:
/// true if the biometric login token was found and  successfully removed, false otherwise
- (void)removeBiometricLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for biometric login
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
- (void)removeBiometricLogin;
@end


SWIFT_CLASS("_TtC7MyChart16WPLoginUtilities")
@interface WPLoginUtilities : NSObject
/// Returns a previously saved Username for a given organization.
/// \param organization the organization
///
///
/// returns:
/// the saved username
+ (NSString * _Nonnull)getSavedUsernameForOrganization:(WPServer * _Nonnull)organization SWIFT_WARN_UNUSED_RESULT;
/// Saves away a Username for a given organization into settings. If the passed in userName is empty, then we remove the setting altogether.
/// \param organization the organization for which to save the username
///
/// \param userName the username to save
///
+ (void)setSavedUsernameForOrganization:(WPServer * _Nonnull)organization userName:(NSString * _Nonnull)userName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEComponentHostParentDelegate;

SWIFT_CLASS("_TtC7MyChart33WPMedicationsComponentBridgingAPI")
@interface WPMedicationsComponentBridgingAPI : NSObject <PEMedicationsComponentBridgingAPIProtocol>
/// get the view controller for MO meds
/// \param rxID id of a med
///
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxID:(NSString * _Nullable)rxID eorgID:(NSString * _Nullable)eorgID SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for refilling a specific medication (used for alerts)
/// \param rxID id of the medication being refilled
///
- (UIViewController * _Nullable)getMedicationsViewControllerForRefillWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for outpatient medications in MyChart Now context
- (UIViewController * _Nullable)getMedicationsViewControllerForMCNOutPatientWithParentDelegate:(id <PEComponentHostParentDelegate> _Nullable)parentDelegate SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for MO medication based on certain criterias
/// \param rxId id of a med
///
/// \param isMCNOutPatientContext if the MO med view controller will show outpatient meds in a  MyChart Now context
///
/// \param isRefillContext if the MO med view controller is used in a med refill context
///
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxId:(NSString * _Nullable)rxId isMCNOutPatientContext:(BOOL)isMCNOutPatientContext isRefillContext:(BOOL)isRefillContext parentDelegate:(id <PEComponentHostParentDelegate> _Nullable)parentDelegate eorgID:(NSString * _Nullable)eorgID SWIFT_WARN_UNUSED_RESULT;
/// Checks if the local organization has MO disabled, and if they are on a version supporting MO Medications.
- (BOOL)shouldDisableOutpatientMeds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart43WPMedicationsTabbedWebViewControllerManager")
@interface WPMedicationsTabbedWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart37WPMedicationsWebViewControllerManager")
@interface WPMedicationsWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart33WPMedsPopoutViewControllerManager")
@interface WPMedsPopoutViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImagePickerController;

@interface WPMessageAttachmentListViewController (SWIFT_EXTENSION(MyChart))
- (BOOL)mediaTypeIsImage:(NSString * _Nonnull)typeString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)mediaTypeIsVideo:(NSString * _Nonnull)typeString SWIFT_WARN_UNUSED_RESULT;
- (UIImagePickerController * _Nonnull)getImagePickerWithSourceType:(enum UIImagePickerControllerSourceType)sourceType allowImages:(BOOL)allowImages allowVideos:(BOOL)allowVideos SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPMessageViewController (SWIFT_EXTENSION(MyChart))
- (enum WPAPIDeepLinkExecuteResult)executeWithDeepLink:(NSString * _Nonnull)deepLink in:(UINavigationController * _Nonnull)navigationController SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getErrorMessageForResult:(enum WPAPIDeepLinkExecuteResult)result SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPMessagesTabBarController (SWIFT_EXTENSION(MyChart))
@property (nonatomic, readonly) BOOL supportsH2GLaunchContext;
@property (nonatomic, readonly) BOOL launchesH2GContextLocally;
@end

@class WPMessageViewer;

SWIFT_CLASS("_TtC7MyChart14WPMessagesUtil")
@interface WPMessagesUtil : NSObject
+ (NSArray * _Nonnull)getDisplayableMessageViewersForDetailsWithViewers:(NSArray<WPMessageViewer *> * _Nonnull)viewers showViewersSetting:(WPMessageViewersSetting)showViewersSetting userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
+ (NSArray * _Nonnull)getDisplayableMessageViewersForComposeReplyWithViewers:(NSArray<WPMessageViewer *> * _Nonnull)viewers showViewersSetting:(WPMessageViewersSetting)showViewersSetting confidentialMessagingSetting:(WPConfidentialitySetting)confidentialMessagingSetting userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<WPMessageViewer *> * _Nonnull)reconstructSelectedFromGenericViewersWithSelectedViewers:(NSArray<WPMessageViewer *> * _Nonnull)selectedViewers defaultViewers:(NSArray<WPMessageViewer *> * _Nonnull)defaultViewers userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
/// Open the attachment for preview. If the attachment type is unsupported for preview, will prompt the user to save/share it instead
/// \param attachment attachment object
///
/// \param fromViewController the viewController to be used to present the preview
///
/// \param usingSourceView The view serving as the source of the attachment being shared, used as an anchor for the iOS share UI on iPads
///
/// \param completion The closure to invoke once the attachment has been opened
///
+ (void)openAttachment:(WPAttachment * _Nonnull)attachment fromViewController:(UIViewController * _Nonnull)viewController usingSourceView:(UIView * _Nonnull)sourceView completion:(void (^ _Nullable)(void))completion;
/// Returns navigation controller to preview the attachment. If the type is unsupported for preview, will return a nil
/// \param attachment attachment object
///
///
/// returns:
///
/// <ul>
///   <li>
///     navigation controller to preview the attachment
///   </li>
/// </ul>
+ (WPRootNavigationController * _Nullable)getAttachmentViewerRootNavigationControllerWithAttachment:(WPAttachment * _Nonnull)attachment SWIFT_WARN_UNUSED_RESULT;
/// Display a share dialog that would allow a user to save/share the attachment
/// \param attachment The attachment object being shared
///
/// \param fromViewController The view controller that will present the share dialog
///
/// \param usingSourceView The view serving as the source of the attachment being shared, used as an anchor for the iOS share UI on iPads
///
+ (void)shareAttachment:(WPAttachment * _Nonnull)attachment fromViewController:(WPViewController * _Nullable)viewController usingSourceView:(UIView * _Nullable)sourceView;
/// Constructs a WPAttachment object from an Apple filesystem URL. Currently used to generate an attachment object containing the PDF data stored in Apple’s filesystem
/// \param url The URL of the document within Apple’s file system
///
+ (WPAttachment * _Nullable)getAttachmentFromAppleFileURLWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Checks if a given document is a PDF shared from Apple Health
/// \param fileUrl URL describing where the file is stored in device storage
///
///
/// returns:
/// true if the file is in the inbox directory and matches the Apple Health naming standard (iOS 16+), false otherwise
+ (BOOL)isValidAppleHealthPDF:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// WPMyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
SWIFT_CLASS("_TtC7MyChart30WPMyChartBrandingConfiguration")
@interface WPMyChartBrandingConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Indicates whether or not there is currently a valid configuration for branding shared with the website.
- (BOOL)hasConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Returns the branded color that a customer has configured. Returns nil if not configured.
/// \param brandedColor the PEBrandedColor for which to obtain a color
///
- (UIColor * _Nullable)getColorIfBrandedFor:(enum PEBrandedColor)brandedColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the color to use for the provided PEBrandedColor.  The returned color is based on the hierarchy documented with the brandedColorsMap.
/// \param brandedColor the PEBrandedColor for which to obtain a color
///
- (UIColor * _Nonnull)getColorFor:(enum PEBrandedColor)brandedColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL for the header background image.
- (NSString * _Nullable)getHeaderBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns the base image URL for general image resources.
- (NSString * _Nullable)getBaseImageUrl SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasAcordexLicense SWIFT_WARN_UNUSED_RESULT;
/// Returns the set of colors used to help distinguish and identify people that the user can access.
- (NSArray<UIColor *> * _Nonnull)getColorsForPeople SWIFT_WARN_UNUSED_RESULT;
/// Returns the set of colors used to help distinguish and identify people that the user can access.
- (NSArray<UIColor *> * _Nonnull)getTextColorsForPeople SWIFT_WARN_UNUSED_RESULT;
/// Returns the color in the set of people colors that corresponds to the provided color index.
/// \param colorIndex the color index (1 - 7) for a color in the set of people colors
///
- (UIColor * _Nullable)getColorForPersonAtColorIndex:(NSInteger)colorIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the color in the set of people colors that corresponds to the provided color index.
/// \param colorIndex the color index (1 - 7) for a color in the set of people colors
///
- (UIColor * _Nullable)getTextColorForPersonAtColorIndex:(NSInteger)colorIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the default color for the provided person. The default color should be used if a color index is not on file for a given person.
/// \param person the person to determine a default color for
///
- (UIColor * _Nonnull)getDefaultColorForPerson:(id <PEPersonProtocol> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Returns the default text color for the provided person. The default color should be used if a color index is not on file for a given person
/// \param person the person to determine a default color for
///
- (UIColor * _Nonnull)getDefaultTextColorForPerson:(id <PEPersonProtocol> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Returns the color index of a color in the set of colors for people that matches the provided color, or 0 if a match is not found.
/// \param color the color to search for in the set of colors for people
///
- (NSInteger)getColorIndexForPersonColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPMyChartBrandingConfiguration (SWIFT_EXTENSION(MyChart)) <PEThemeProtocol>
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
- (id <CardStyleProtocol> _Nonnull)getCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <CardStyleProtocol> _Nonnull)getInteractiveCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <TextStyleProtocol> _Nonnull)getTextStyleWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
@end


/// Helper class to load the MyChart Branding configuration from the website
SWIFT_CLASS("_TtC7MyChart36WPMyChartBrandingConfigurationLoader")
@interface WPMyChartBrandingConfigurationLoader : NSObject
/// Loads the MyChartBrandingConfiguration using the provided website URL. MyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
/// \param websiteUrl the URL of the corresponding MyChart website (e.g. “https://server.com/MyChart/”)
///
/// \param completion the completion block called when initialization is complete
///
+ (void)loadLegacyBrandingConfigurationWithWebsiteUrl:(NSString * _Nonnull)websiteUrl completion:(void (^ _Nonnull)(WPMyChartBrandingConfiguration * _Nullable))completion;
/// Loads the MyChartBrandingConfiguration using the provided website URL. MyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
/// \param websiteUrl the URL of the corresponding MyChart website (e.g. “https://server.com/MyChart/”)
///
/// \param hasNewBrandingPaths If it has the new branding paths look up 
///
/// \param brandingLocale The branding locale 
///
/// \param completion the completion block called when initialization is complete
///
+ (void)loadLegacyBrandingConfigurationWithWebsiteUrl:(NSString * _Nonnull)websiteUrl hasNewBrandingPaths:(BOOL)hasNewBrandingPaths brandingLocale:(NSString * _Nonnull)brandingLocale completion:(void (^ _Nonnull)(WPMyChartBrandingConfiguration * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEAppleWatchAPIs;
@class UIBarButtonItem;
@protocol BrandedColorProviderProtocol;
@protocol BrandedAssetsProviderProtocol;

SWIFT_CLASS("_TtC7MyChart24WPMyChartRefComponentAPI")
@interface WPMyChartRefComponentAPI : NSObject <PEMyChartRefComponentAPIProtocol>
/// Container for apple watch APIs
@property (nonatomic, readonly, strong) id <PEAppleWatchAPIs> _Nonnull appleWatch;
///
/// returns:
/// The application key for menu filtering
- (NSArray<NSString *> * _Nonnull)getApplicationKeys SWIFT_WARN_UNUSED_RESULT;
/// Sets the default selected person to bypass the splash screen
/// \param userId the user who is logging in
///
/// \param newDefaultWprId the default selected person’s WPR
///
- (void)setDefaultPersonWprIdFor:(NSString * _Nonnull)userId newDefaultWprId:(NSString * _Nullable)newDefaultWprId;
/// Gets the default selected person when bypassing the splash screen
/// \param userId the user who is logging in
///
///
/// returns:
/// the default selected person’s WPR
- (NSString * _Nullable)getDefaultPersonWprIdFor:(NSString * _Nonnull)userId forHomepageLaunch:(BOOL)forHomepageLaunch SWIFT_WARN_UNUSED_RESULT;
/// Checks for secondary login methods to set up
/// \param phonebook a PEPhonebookEntry that gets converted to a WPServer. If nil, uses the current server
///
///
/// returns:
/// The raw value of PESecondaryLoginMethod
- (NSInteger)getAvailableSecondaryLoginMethodsToSetUpRawValue:(id <PEPhonebookEntryProtocol> _Nullable)phonebook SWIFT_WARN_UNUSED_RESULT;
/// Do not show the feed item for secondary login, even if not set
- (void)setPreventSecondaryLoginAlert:(BOOL)preventAlert;
/// Has the user requested not to see the alert for secondary login?
- (BOOL)getPreventSecondaryLoginAlert SWIFT_WARN_UNUSED_RESULT;
/// Get the currently monitored CSN
///
/// returns:
/// returns the CSN, empty string if no monitored appt
- (NSString * _Nonnull)getMonitoredAppointmentCSN SWIFT_WARN_UNUSED_RESULT;
/// Increments the number of logins completed by the user for this device and installation
- (void)incrementLoginCounter;
/// Sets flag that the app review card has been dismissed
- (void)setAppReviewCardDismissWithDismissed:(BOOL)dismissed;
/// Determines if the app review card should be requested from the server
- (BOOL)shouldDisplayAppReviewCard SWIFT_WARN_UNUSED_RESULT;
/// Sets flag that the background app refresh card has been dismissed
- (void)setBackgroundAppRefreshCardDismissalFlag:(BOOL)isDismissed;
/// Checks if the background app refresh card has been dismissed before
- (BOOL)getBackgroundAppRefreshCardDismissalFlag SWIFT_WARN_UNUSED_RESULT;
/// Helper method that checks if we have viewed secondary login onboarding
/// <ul>
///   <li>
///     Returns True if the user has viewed the secondary login
///   </li>
/// </ul>
- (BOOL)hasUserViewedSecondaryLogin SWIFT_WARN_UNUSED_RESULT;
- (void)setSecondaryLoginViewed;
/// Saves the given email and phone to the users notification preferences
- (void)saveNotificationPreferencesWithEmail:(NSString * _Nonnull)email phone:(NSString * _Nonnull)phone;
/// Returns whether the current push notification is a hand off
- (BOOL)isDeepLinkComingFromHandOff SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the current deep link is coming from push notification
- (BOOL)isDeepLinkComingFromPushNotification SWIFT_WARN_UNUSED_RESULT;
/// Returns whether secondary login is enabled at the current organization for a user other than the one currently logged in
- (BOOL)isSecondaryLoginEnabledForOtherUser SWIFT_WARN_UNUSED_RESULT;
/// Removes the secondary login token for the current org
- (void)removeSecondaryLoginWithOrgId:(NSString * _Nullable)orgId completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// <ul>
///   <li>
///     Returns a boolean indicating whether the current user has a RAT for prelogin Covid Status
///   </li>
/// </ul>
- (BOOL)hasPreloginCovidStatusToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether this is a self-submitted build using the homepage
- (BOOL)isSelfSubmittedCustomerUsingHomepage SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether or not a self-submitted customer has disabled the nav bar logo
- (BOOL)shouldHideEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Get all the cached phonebook entries
- (NSArray<id <PEPhonebookEntryProtocol>> * _Nullable)getCachedPhonebookEntries SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getTestLibraryExpiryMessage SWIFT_WARN_UNUSED_RESULT;
/// Gets the EULA as a utf8-encoded encoded string from the EULA file
/// <ul>
///   <li>
///     Returns the EULA string for displaying the EULA
///   </li>
/// </ul>
- (NSString * _Nullable)getEulaString SWIFT_WARN_UNUSED_RESULT;
/// Gets the privacy policy URL for onboarding
/// <ul>
///   <li>
///     Returns the URL string for the privacy policy
///   </li>
/// </ul>
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
/// Sets the EULA as accepted after onboarding
- (void)setEulaAccepted;
/// Gets the notifications status for onboarding
/// <ul>
///   <li>
///     Returns true if the notifications screen has been viewed or is unavailable
///   </li>
/// </ul>
- (BOOL)hasUserViewedNotificationsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Sets the notifications screen as viewed after onboarding
- (void)setNotificationsOnboardingViewed;
/// Gets the location status for onboarding
/// <ul>
///   <li>
///     Returns true if the location screen has been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedLocationOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Sets the location screen as viewed after onboarding
- (void)setLocationOnboardingViewed;
/// Gets the status for all three pre-login onboarding steps
/// <ul>
///   <li>
///     Returns true if all three steps (EULA, notifications, location) have been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedPreLoginOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Makes a location always auth request
- (void)makeLocationAuthorizationRequest;
/// Makes a location while using auth request
- (void)makeLocationWhileUsingAuthorizationRequest;
/// Gets the authorization status of location
/// <ul>
///   <li>
///     Returns the current CLAuthorizationStatus
///   </li>
/// </ul>
- (CLAuthorizationStatus)getLocationAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
/// Gets branded app settings for push notifications
/// <ul>
///   <li>
///     Returns true if supportsBrandedAppPushNotifications is true
///   </li>
/// </ul>
- (BOOL)supportsPushNotifications SWIFT_WARN_UNUSED_RESULT;
/// Set user declined org’s terms, conditions, proxy statement
- (void)setUserDeclinedOrgTermsConditions;
/// Get create passcode workflow for onboarding
- (UIViewController * _Nullable)getPasscodeWorkflow SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether biometrics for current user and org were enabled
- (void)setBiometrics;
- (BOOL)getBiometrics SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAnimatedBackgroundDisabled SWIFT_WARN_UNUSED_RESULT;
/// Gets the string for the UserInfo entry for a biometrics workflow notification during onboarding, fired after storing biometrics
/// <ul>
///   <li>
///     Returns true if storing biometrics was successful
///   </li>
/// </ul>
- (NSString * _Nonnull)getUserInfoStringForBiometricsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Clears all files from the MyChart cache
/// <ul>
///   <li>
///     Returns true if successful, false otherwise
///   </li>
/// </ul>
- (BOOL)clearCachedFiles;
/// Get the display name of the app, i.e. MyChart.
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
- (void)removeWebServerFromPreferredWithOrgId:(NSString * _Nonnull)orgId;
/// Sets the root nav controller to always use dark status bar icons
- (void)setNavControllerOnboardingOverride:(BOOL)status;
/// Returns whether the language picker is available
- (BOOL)isLanguagePickerAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)launchSettingsLanguagePickerWithVc:(UIViewController * _Nonnull)vc orgName:(NSString * _Nonnull)orgName;
- (void)displayShareDialogWithItemsWithItems:(NSArray * _Nonnull)items presenter:(UIViewController * _Nonnull)presenter fromBarButtonItem:(UIBarButtonItem * _Nonnull)fromBarButtonItem didShow:(void (^ _Nonnull)(void))didShow didCancel:(void (^ _Nullable)(void))didCancel;
- (BOOL)hasDynamicPatientAccessList SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)getWebCSSColorKeysWithColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
- (id <PEThemeProtocol> _Nonnull)getMyChartThemeWithLanguage:(NSString * _Nonnull)language colorProvider:(id <BrandedColorProviderProtocol> _Nonnull)colorProvider assetsProvider:(id <BrandedAssetsProviderProtocol> _Nonnull)assetsProvider cardStyle:(id <CardStyleProtocol> _Nonnull)cardStyle interactiveCardStyle:(id <CardStyleProtocol> _Nonnull)interactiveCardStyle textStyles:(NSArray<id <TextStyleProtocol>> * _Nonnull)textStyles SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowShareWarning SWIFT_WARN_UNUSED_RESULT;
- (void)disableShareWarning;
@property (nonatomic, readonly) BOOL isUserAuthenticationStatusNotAuthenticated;
@property (nonatomic, readonly) BOOL shouldHideEulaCheckbox;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPGenerateAuthTokenResponse;

@interface WPMyChartRefComponentAPI (SWIFT_EXTENSION(MyChart)) <IWPGenerateAuthTokenDelegate>
- (void)didCompleteGenerateAuthTokenRequestWithResponse:(WPGenerateAuthTokenResponse * _Nonnull)response;
@end

@class MyChartPatient;

@interface WPMyChartRefComponentAPI (SWIFT_EXTENSION(MyChart))
- (void)loadPhonebookEntriesWithSuccess:(void (^ _Nonnull)(NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull, BOOL))success failure:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))failure;
- (BOOL)isEULAAccepted SWIFT_WARN_UNUSED_RESULT;
/// Returns if the notifications onboarding has been viewed by the user/device
- (BOOL)notificationsOnboardingViewed SWIFT_WARN_UNUSED_RESULT;
/// Returns if the location onboarding has been viewed by the user/device
- (BOOL)locationOnboardingViewed SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getPreferredOrgIds SWIFT_WARN_UNUSED_RESULT;
- (void)addOrgToPreferredOrgsWithOrg:(id <PEPhonebookEntryProtocol> _Nonnull)org;
@property (nonatomic, readonly, copy) NSString * _Nullable currentInternalPhonebookUrl;
- (void)clearFavoriteOrganizations;
- (UINavigationController * _Nonnull)getOrgSelectionViewController SWIFT_WARN_UNUSED_RESULT;
- (void)scanOrgSelectQRCodeWithViewController:(UIViewController * _Nonnull)viewController;
- (void)loadLegacyThemeForServerWithPbEntry:(id <PEPhonebookEntryProtocol> _Nonnull)pbEntry websiteUrl:(NSString * _Nonnull)websiteUrl hasNewBrandingPaths:(BOOL)hasNewBrandingPaths locale:(NSString * _Nonnull)locale success:(void (^ _Nonnull)(id <PEThemeProtocol> _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
/// Get the cache string for a theme
- (NSString * _Nullable)getLegacyCacheStringForThemeWithTheme:(id <PEThemeProtocol> _Nullable)theme SWIFT_WARN_UNUSED_RESULT;
/// Get the cache string for a theme
- (id <PEThemeProtocol> _Nullable)convertLegacyCacheStringToThemeWithCacheString:(NSString * _Nullable)cacheString SWIFT_WARN_UNUSED_RESULT;
- (void)onPatientsLoadedWithPatients:(NSArray<MyChartPatient *> * _Nonnull)patients;
- (void)onPatientsUpdatedWithPatients:(NSArray<MyChartPatient *> * _Nonnull)patients completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)setAllFeaturesAsDone;
- (enum FeatureLoadStatus)getFeatureLoadStatusForPatientWithAccountID:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
- (void)onLoginCompleted;
- (void)tryPasscodeLoginWithPasscode:(NSString * _Nonnull)passcode server:(id <PEPhonebookEntryProtocol> _Nonnull)server onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSInteger))onCompletion;
- (void)getTokenForBiometricWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))onCompletion;
@property (nonatomic, readonly) BOOL isSecondaryLoginFeatureAvailable;
@property (nonatomic, readonly) BOOL isPasscodeLoginFeatureAvailable;
@property (nonatomic, readonly) BOOL isBiometricLoginFeatureAvailable;
- (BOOL)canLaunchSignUpWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchSignUpWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)canLaunchForgotUsernameWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchForgotUsernameWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)canLaunchForgotPasswordWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchForgotPasswordWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)canLaunchResetPasswordWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchResetPasswordWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)shouldHideOrgSelection SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getPasswordChangeExpireViewControllerOnCompletion:(void (^ _Nonnull)(BOOL, NSString * _Nullable))onCompletion SWIFT_WARN_UNUSED_RESULT;
- (void)loadCustomStringsOnCompletion:(void (^ _Nonnull)(BOOL))onCompletion;
- (void)performAsyncLoginTasksOnCompletion:(void (^ _Nonnull)(BOOL))onCompletion;
- (void)pendPostSignupDeepLink:(NSString * _Nonnull)deepLinkUrl;
- (void)performLoadingBrandingTasksOnCompletion:(void (^ _Nonnull)(void))onCompletion;
- (UIViewController * _Nullable)getTopViewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isWebSessionToolOn SWIFT_WARN_UNUSED_RESULT;
- (void)showAppUriLaunchErrorAlertWithUrl:(NSURL * _Nonnull)url webView:(WKWebView * _Nonnull)webView presentFrom:(UIViewController * _Nonnull)presentFrom;
- (NSString * _Nullable)getAppStoreUrl SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;

@interface WPNavigationTitleView (SWIFT_EXTENSION(MyChart))
- (void)setTitleAccessibilityLabelWithTitle:(NSString * _Nonnull)title patientIndex:(NSInteger)patientIndex;
+ (UIImageView * _Nonnull)createPatientImageViewWithPatientIndex:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart23WPNoImmunizationsNotice")
@interface WPNoImmunizationsNotice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for a table view cell to display that user has no immunizations.
SWIFT_CLASS("_TtC7MyChart36WPNoImmunizationsNoticeTableViewCell")
@interface WPNoImmunizationsNoticeTableViewCell : UITableViewCell
- (void)awakeFromNib;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPNotificationPopdownViewController (SWIFT_EXTENSION(MyChart))
- (enum WPAPIDeepLinkExecuteResult)executeWithDeepLink:(NSString * _Nullable)deepLink in:(UINavigationController * _Nonnull)navigationController;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart33WPOnMyWayWebViewControllerManager")
@interface WPOnMyWayWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPComponentContainerViewController * _Nullable)getViewControllerWithParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEAlertProtocol;

SWIFT_RESILIENT_CLASS("_TtC7MyChart9WPPatient")
@interface WPPatient : MyChartPatient
@property (nonatomic, copy) NSArray<id <PEAlertProtocol>> * _Nonnull alerts;
@property (nonatomic) BOOL hasWebAlerts;
@property (nonatomic) NSInteger numberOfWebAlerts;
/// CID version of account ID, used in Intraconnect environments
@property (nonatomic, copy) NSString * _Nonnull uniqueID;
/// Is this patient a proxy subject of the logged-in user?
@property (nonatomic, readonly) BOOL isProxySubject;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(WPPatient * _Nonnull)patient SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, copy) NSString * _Nonnull accountId;
- (NSString * _Nonnull)getProxyExpirationDate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRefusalPatient SWIFT_WARN_UNUSED_RESULT;
/// This function has the ability to get the raw field value if requested. Most consumers should use the parameterless version or pass false to ensure they use the value from the most recent version of this patient object from the context provider
/// \param getRawValue get the actual value for this patient object
///
///
/// returns:
/// Either the data from the backing field, or the most recent value for this patient from the context provider
- (enum FeatureLoadStatus)getFeatureLoadStatusWithGetRawValue:(BOOL)getRawValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface WPPatient (SWIFT_EXTENSION(MyChart)) <PEPatientIndexProtocol>
- (NSInteger)getPatientIndex SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPPatient (SWIFT_EXTENSION(MyChart)) <PEToDoPatientProtocol>
- (BOOL)getIsCareCompanionEnrolled SWIFT_WARN_UNUSED_RESULT;
@end

@protocol IWPUser;

@interface WPPatient (SWIFT_EXTENSION(MyChart)) <IWPPatient>
- (UIImage * _Nullable)getPersonPhoto:(BOOL)useFallback onImageLoaded:(PersonImageCallback _Nullable)onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (id <IWPUser> _Nullable)asUser SWIFT_WARN_UNUSED_RESULT;
- (id <IWPPatient> _Nullable)asPatient SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPPatient (SWIFT_EXTENSION(MyChart))
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
- (void)updateNickname:(NSString * _Nullable)nickname;
- (void)updateColorIndex:(NSInteger)colorIndex;
- (void)updatePhoto:(UIImage * _Nullable)photo;
- (NSArray<id <PEAlertProtocol>> * _Nonnull)getAlerts SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// Use _Internal here to fix Xcode compliance settings for protocols
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, conditionally, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// Use _Internal here to fix Xcode compliance settings for protocols
/// \param useFallback a boolean indicating whether or not a fallback image should be returned if the person doesn’t have a photo
///
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart36WPPatientEstimatesSpringboardManager")
@interface WPPatientEstimatesSpringboardManager : NSObject <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPHSSectionViewController;

SWIFT_CLASS("_TtC7MyChart27WPPatientGoalsTableViewCell")
@interface WPPatientGoalsTableViewCell : UITableViewCell
- (void)setupWithGoal:(WPPersonalNotesInfo * _Nullable)goal sectionViewController:(WPHSSectionViewController * _Nonnull)sectionViewController;
- (void)layoutSubviews;
- (void)reloadCellWith:(WPPersonalNotesInfo * _Nonnull)goal;
- (void)setTheme:(id <PEThemeProtocol> _Nullable)orgTheme;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

@interface WPPatientGoalsTableViewCell (SWIFT_EXTENSION(MyChart)) <UITextViewDelegate>
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
@end

@class WPGetPatientVisitGuideResponse;

@interface WPPatientVisitGuideLoadingViewController (SWIFT_EXTENSION(MyChart))
- (void)ensurePatientVisitGuideDataIsLoadedWithResponse:(WPGetPatientVisitGuideResponse * _Nonnull)response;
@end


/// Helper to load person photos
SWIFT_CLASS("_TtC7MyChart20WPPersonPhotoManager")
@interface WPPersonPhotoManager : NSObject
/// Helper function to invalidate the cache for a person
+ (void)invalidateImageCacheForPerson:(id <PEPersonProtocol> _Nonnull)person;
/// Helper function to get a person from a patient index
+ (id <PEPersonProtocol> _Nullable)getPersonForPatientIndex:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart19WPPersonalNotesInfo")
@interface WPPersonalNotesInfo : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable personalNoteList;
@property (nonatomic) enum PersonalNoteType type;
@property (nonatomic, copy) NSString * _Nullable updateDate;
- (nonnull instancetype)initWithType:(enum PersonalNoteType)type personalNoteList:(NSArray<NSString *> * _Nullable)personalNoteList OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInfo:(WPPersonalNotesInfo * _Nonnull)info OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing the personal preferences for a person the user has access to.  Updates can be made to personal preferences and committed to the underlying person once they are saved to the database.
SWIFT_CLASS("_TtC7MyChart21WPPersonalPreferences")
@interface WPPersonalPreferences : NSObject
/// Initializes a set of personal preferences for the provided person.
/// \param person the person for which these personal preferences apply to
///
- (nonnull instancetype)initForPerson:(id <PEPersonProtocol> _Nonnull)person OBJC_DESIGNATED_INITIALIZER;
/// Indicates whether or not these personal preferences have had updates made to them.
///
/// returns:
/// True if updates have been made to these personal preferences; False otherwise.
- (BOOL)hasUpdates SWIFT_WARN_UNUSED_RESULT;
/// Updates the nickname for these personal preferences.
/// \param nickname the updated nickname, or empty to use the full name
///
- (void)updateWithNickname:(NSString * _Nonnull)nickname;
/// Updates the color index for these personal preferences.
/// \param colorIndex the updated color index
///
- (void)updateWithColorIndex:(NSInteger)colorIndex;
/// Updates the photo for these personal preferences.
/// \param photo the updated photo
///
- (void)updateWithPhoto:(UIImage * _Nonnull)photo;
/// Deletes the photo for these personal preferences.
- (void)deletePhoto;
/// Commits all updates made to these personal preferences back to the corresponding person. This method should only be called after the updates are saved on the database.
- (void)commitUpdates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UICollectionViewLayoutAttributes;

/// A collection view cell that displays a single set of personal preferences to the user.  The user can interact with the collection view cell to update their personal preferences.
SWIFT_CLASS("_TtC7MyChart39WPPersonalPreferencesCollectionViewCell")
@interface WPPersonalPreferencesCollectionViewCell : UICollectionViewCell
/// UIView
- (void)awakeFromNib;
/// UICollectionViewCell
- (UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPPersonalPreferencesCollectionViewCell (SWIFT_EXTENSION(MyChart)) <UITextFieldDelegate>
/// UITextFieldDelegate
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// UITextFieldDelegate
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end


/// API class with methods for web requests related to Personal Preferences
SWIFT_CLASS("_TtC7MyChart34WPPersonalPreferencesWebServiceAPI")
@interface WPPersonalPreferencesWebServiceAPI : NSObject
/// Saves personal preferences for a list of patients and/or a non-patient user. The provided handlers are invoked depending on web service success or failure.
/// \param updatedPersonalPreferencesList the list of personal preferences to save
///
/// \param successHandler the handler to invoke upon successful completion of the web service
///
/// \param failureHandler the handler to invoke upon failed completion of the web service
///
+ (void)savePersonalPreferencesWithUpdatedPersonalPreferencesList:(NSArray<WPPersonalPreferences *> * _Nullable)updatedPersonalPreferencesList successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(void))failureHandler;
/// Updates personal preferences for the user and all subjects
+ (void)updatePersonalPreferences;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewLayout;

/// A collection view controller that lets the user view and update the personal preferences for each person they have access to, including themselves. Updates made to personal preferences must be saved before they take effect.
SWIFT_CLASS("_TtC7MyChart27WPPersonalizeViewController")
@interface WPPersonalizeViewController : UICollectionViewController
/// Creates an instance of WPPersonalizeViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
+ (WPPersonalizeViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UICollectionViewController
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// UICollectionViewController
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <UICollectionViewDelegateFlowLayout>
/// UICollectionViewDelegateFlowLayout
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// UIImagePickerControllerDelegate
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end


@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


enum WPGetPhonebookStatus : NSInteger;

SWIFT_CLASS("_TtC7MyChart18WPPhonebookService")
@interface WPPhonebookService : NSObject
/// Helper to cache a set of preferred organization servers
+ (void)cachePreferredOrgsWithOrgArray:(NSArray<WPServer *> * _Nonnull)orgArray;
/// Getter for preferred organization servers from cache
+ (NSArray<WPServer *> * _Nonnull)getCachedPreferredOrgs SWIFT_WARN_UNUSED_RESULT;
/// Entrypoint for getting a phonebook
/// \param getPhonebookCallback the callback to be executed on success or failure 
///
+ (void)getPhonebookWithGetPhonebookCallback:(void (^ _Nonnull)(enum WPGetPhonebookStatus, NSArray<WPServer *> * _Nullable, NSString * _Nonnull, BOOL))getPhonebookCallback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum to describe status of the retrieving the phonebook
typedef SWIFT_ENUM(NSInteger, WPGetPhonebookStatus, open) {
  WPGetPhonebookStatusSuccess = 0,
  WPGetPhonebookStatusCustomPhonebookErrorLoading = 1,
  WPGetPhonebookStatusErrorLoading = 2,
  WPGetPhonebookStatusErrorURLDomainLoading = 3,
};


SWIFT_CLASS("_TtC7MyChart33WPPremiumBillingWebViewController")
@interface WPPremiumBillingWebViewController : WPActivityWebViewController
/// @brief initializer used when opening activity
- (nonnull instancetype)init;
/// <ul>
///   <li>
///     @brief initializer used when opening a subactivity
///   </li>
/// </ul>
- (nonnull instancetype)initWithSubmode:(NSString * _Nonnull)submode accountId:(NSString * _Nonnull)accountId;
/// @brief Springboard item for Premium Billing Activity
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// @brief viewDidLoad setup title and navbar as well as inject javascript
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)closePressed:(id _Null_unspecified)sender;
/// @brief callback funtion for intercepting navigation jumps
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// class with methods for web requests related to Preview Features
SWIFT_CLASS("_TtC7MyChart27WPPreviewFeaturesServiceAPI")
@interface WPPreviewFeaturesServiceAPI : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart36WPProxyConfirmationWebViewController")
@interface WPProxyConfirmationWebViewController : WPActivityWebViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)init;
- (NSInteger)getWebViewPatientIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart18WPPushNotification")
@interface WPPushNotification : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart36WPSchedulingWebViewControllerManager")
@interface WPSchedulingWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
/// Constructor to specify the specific sub mode of scheduling for this workflow.
/// \param mode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode OBJC_DESIGNATED_INITIALIZER;
/// Constructor to specify the specific sub mode of scheduling for this workflow.
/// \param mode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
/// \param csn unencrypted csn - used for rescheduling
///
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode csn:(NSString * _Nullable)csn OBJC_DESIGNATED_INITIALIZER;
/// Springboard declaration
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// Gets the Scheduling MO view controller.
/// \param schedulingMode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
/// \param parameters List of QSPs use in the MO jump
///
/// \param orgInfo Organization object for external scheduling
///
///
/// returns:
/// MO Scheduling web view controller
+ (WPComponentContainerViewController * _Nonnull)getSchedulingViewControllerWithMode:(WPMyChartWebViewMode)schedulingMode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters orgInfo:(WPOrganizationInfo * _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the Scheduling MO view controller.
/// \param schedulingMode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
/// \param parameters List of QSPs use in the MO jump
///
/// \param csn CSN of the appointment, if used for rescheduling.
///
/// \param orgInfo Organization object for external scheduling
///
///
/// returns:
/// MO Scheduling web view controller
+ (WPComponentContainerViewController * _Nonnull)getSchedulingViewControllerWithMode:(WPMyChartWebViewMode)schedulingMode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters csn:(NSString * _Nullable)csn orgInfo:(WPOrganizationInfo * _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the list of formatted QSPs needed for scheduling, based on a dictionary of unformatted QSPs.
/// \param parameters Dictionary of unformatted QSPs
///
///
/// returns:
/// List of QSPs needed for scheduling.
+ (NSArray<MyChartWebParameter *> * _Nonnull)getSchedulingQueryParams:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPQuickScheduleWebViewControllerManager")
@interface WPQuickScheduleWebViewControllerManager : WPSchedulingWebViewControllerManager
/// Springboard declaration
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// Gets the On Demand Video Visit MO view controller.
/// \param parameters List of QSPs use in the MO jump
///
///
/// returns:
/// MO On Demand Video Visits  web view controller
+ (WPComponentContainerViewController * _Nonnull)getOnDemandVideoVisitViewController:(NSArray<MyChartWebParameter *> * _Nullable)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode csn:(NSString * _Nullable)csn OBJC_DESIGNATED_INITIALIZER;
@end



/// View for showing all the SVGs in the theme library
SWIFT_CLASS("_TtC7MyChart32WPSVGLibraryViewerViewController")
@interface WPSVGLibraryViewerViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface WPSVGLibraryViewerViewController (SWIFT_EXTENSION(MyChart)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// API class with methods for WebRequests related to Save Personal Notes
SWIFT_CLASS("_TtC7MyChart29WPSavePersonalNotesServiceAPI")
@interface WPSavePersonalNotesServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <SavePersonalNotesCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Save a personal note
/// Callers should first ensure that the health goal functionality is available by checking the IC feature bit
/// \param patientContext the patient context
///
- (void)savePersonalNotesWithPatientContext:(PEPatientContext * _Nonnull)patientContext noteInfo:(WPPersonalNotesInfo * _Nonnull)noteInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response object for savePersonalNotes service call
SWIFT_CLASS("_TtC7MyChart34WPSavePersonalNotesServiceResponse")
@interface WPSavePersonalNotesServiceResponse : NSObject
/// Note
@property (nonatomic) BOOL success;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Model for a TB or immunization screening.
/// Any web service response type MUST extend Codable.
SWIFT_CLASS("_TtC7MyChart11WPScreening")
@interface WPScreening : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol WPScreeningWorkflowEntryDelegate;

/// Class for a table view cell for a TB or immunizations history screening.
SWIFT_CLASS("_TtC7MyChart24WPScreeningTableViewCell")
@interface WPScreeningTableViewCell : UITableViewCell
@property (nonatomic, weak) id <WPScreeningWorkflowEntryDelegate> _Nullable delegate;
- (void)awakeFromNib;
/// Populate this banner with data from the screening
/// \param screening 
///
- (void)setupWithScreening:(WPScreening * _Nonnull)screening;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart35WPScreeningWebViewControllerManager")
@interface WPScreeningWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol for listeners to button being clicked
SWIFT_PROTOCOL("_TtP7MyChart32WPScreeningWorkflowEntryDelegate_")
@protocol WPScreeningWorkflowEntryDelegate
- (void)enterScreeningWorkflowWithType:(NSInteger)type templateID:(NSString * _Nullable)templateID;
@end


/// Response object for requestScreenings service call
SWIFT_CLASS("_TtC7MyChart27WPScreeningsServiceResponse")
@interface WPScreeningsServiceResponse : NSObject
/// List of screenings
@property (nonatomic, copy) NSArray<WPScreening *> * _Null_unspecified screenings;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for WebRequests related to Screenings
SWIFT_CLASS("_TtC7MyChart25WPScreeningsWebServiceAPI")
@interface WPScreeningsWebServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <ScreeningsCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Get list of screenings.
/// Callers should first ensure that the screenings workflow is available by calling WPUtil_Misc.isMOScreeningsAvailable().
/// \param patientContext the patient context
///
- (void)requestScreeningsWithPatientContext:(PEPatientContext * _Nonnull)patientContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol WPHealthSummaryMOWorkflowCompleteDelegate;

/// View controller for mobile-optimized screenings workflow
SWIFT_CLASS("_TtC7MyChart29WPScreeningsWebViewController")
@interface WPScreeningsWebViewController : WPActivityWebViewController
@property (nonatomic, weak) id <WPHealthSummaryMOWorkflowCompleteDelegate> _Nullable delegate;
/// Convenience initializer with parameters
- (nonnull instancetype)initWithType:(NSInteger)type templateID:(NSString * _Nonnull)templateID closeDelegate:(id <WPHealthSummaryMOWorkflowCompleteDelegate> _Nonnull)closeDelegate;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface WPServer (SWIFT_EXTENSION(MyChart)) <SearchableProtocol>
- (NSArray<NSString *> * _Nonnull)getSearchTerms SWIFT_WARN_UNUSED_RESULT;
@end

enum WPCachedImageType : NSInteger;

@interface WPServer (SWIFT_EXTENSION(MyChart))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpPrefUseCustomServer;)
+ (NSString * _Nonnull)wpPrefUseCustomServer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpPrefConnectionServer;)
+ (NSString * _Nonnull)wpPrefConnectionServer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpPrefAppReviewMode;)
+ (NSString * _Nonnull)wpPrefAppReviewMode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerFormatterLocaleKey;)
+ (NSString * _Nonnull)wpServerFormatterLocaleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerAllowedLanguagesKey;)
+ (NSString * _Nonnull)wpServerAllowedLanguagesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerDefaultLanguageKey;)
+ (NSString * _Nonnull)wpServerDefaultLanguageKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerFormatterLocaleOverrideKey;)
+ (NSString * _Nonnull)wpServerFormatterLocaleOverrideKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedDefaultLocaleKey;)
+ (NSString * _Nonnull)wpServerBrandedDefaultLocaleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedAllowedLocalesKey;)
+ (NSString * _Nonnull)wpServerBrandedAllowedLocalesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedServerPrimaryLocaleKey;)
+ (NSString * _Nonnull)wpServerBrandedServerPrimaryLocaleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedShowLanguagePicker;)
+ (NSString * _Nonnull)wpServerBrandedShowLanguagePicker SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull epicAppReviewServerUrl;)
+ (NSString * _Nonnull)epicAppReviewServerUrl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull epicAppReviewWebsiteName;)
+ (NSString * _Nonnull)epicAppReviewWebsiteName SWIFT_WARN_UNUSED_RESULT;
/// Does the provided id match the current org or one of its affiliates?
/// \param orgId the id to check match on the organization piece alone
///
+ (BOOL)orgIdMatchesCurrentOrAffiliate:(NSString * _Nullable)orgId SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAppReviewModeEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isInternalSearchEnabled SWIFT_WARN_UNUSED_RESULT;
/// Gets a phonebook entry image from the cache if it exists
+ (UIImage * _Nullable)getCachedImage:(enum WPCachedImageType)imageType for:(NSString * _Nonnull)orgId SWIFT_WARN_UNUSED_RESULT;
/// Sets a phonebook entry image to a flat-file cache
+ (void)setCachedImage:(UIImage * _Nonnull)image forType:(enum WPCachedImageType)imageType andOrgId:(NSString * _Nonnull)orgId;
/// Removes a phonebook entry image from the cache if it exists
+ (void)removeCachedImage:(enum WPCachedImageType)imageType for:(NSString * _Nonnull)orgId;
/// Swift implementation of PEOrganizationProtocol.getBrandLogo
- (void)getBrandLogo:(BOOL)useDarkLogo completionHandler:(void (^ _Nonnull)(UIImage * _Nonnull))completionHandler;
/// Create a locale settings source object from:
/// <ul>
///   <li>
///     The current device locale settings
///   </li>
///   <li>
///     Either the server branding API locale settings, or the phonebook locale settings
///   </li>
/// </ul>
- (void)setupLocaleSettingsSourceWithDefaultLocale:(PELocale * _Nullable)defaultLocale allowedLocales:(NSArray<PELocale *> * _Nullable)allowedLocales;
/// Get the allowed languages specified in the phonebook
- (NSString * _Nonnull)getAllowedLanguagesValue SWIFT_WARN_UNUSED_RESULT;
/// Get the default language specified in the phonebook
- (NSString * _Nonnull)getDefaultLanguageValue SWIFT_WARN_UNUSED_RESULT;
/// Get the formatter locale specified in the phonebook
- (NSString * _Nonnull)getFormatterLocaleValue SWIFT_WARN_UNUSED_RESULT;
/// Get the formatter locale override specified in the phonebook, if present
- (NSString * _Nullable)getFormatterLocaleOverrideValue SWIFT_WARN_UNUSED_RESULT;
/// Get the allowed locales configured for branded builds as a String Array
- (NSArray<NSString *> * _Nonnull)getBrandedAllowedLocales SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandedDefaultLocale SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandedServerPrimaryLocale SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBrandedShowLanguagePicker SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getServerOptionValueForKey:(NSString * _Nonnull)targetKey SWIFT_WARN_UNUSED_RESULT;
- (NSArray<PELocale *> * _Nonnull)getAllowedLocales SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getLocationArray SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getAkaMnemonics SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getFkaMnemonics SWIFT_WARN_UNUSED_RESULT;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for this server
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
- (void)removeSecondaryLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for passcode login
///
/// returns:
/// true if the passcode login token was found and  successfully removed, false otherwise
- (void)removePasscodeLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for biometric login
///
/// returns:
/// true if the biometric login token was found and  successfully removed, false otherwise
- (void)removeBiometricLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Set the theme with the PEThemeProtocol
- (void)setThemeHelperWithTheme:(id <PEThemeProtocol> _Nonnull)theme;
@end

/// Images types that save to flat files
typedef SWIFT_ENUM(NSInteger, WPCachedImageType, open) {
  WPCachedImageTypeMyChartLogo = 0,
  WPCachedImageTypeServerLogo = 1,
};


@protocol PEOrganizationInfoProtocol;
@class NSAttributedString;

/// Show a pop up that shows which subjects have data for an organization
SWIFT_CLASS("_TtC7MyChart37WPShowSubjectsForH2GOrgViewController")
@interface WPShowSubjectsForH2GOrgViewController : WPPopupViewController
/// Init for subject ids and organization
/// \param subjectIds The subject ids to show
///
/// \param forOrg The org this is for
///
- (nonnull instancetype)initWithSubjectIds:(NSArray<NSString *> * _Nonnull)subjectIds forOrg:(id <PEOrganizationInfoProtocol> _Nonnull)forOrg;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (null_unspecified instancetype)initWithTitle:(NSString * _Null_unspecified)popupString cancelLabel:(NSString * _Null_unspecified)cancelString OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithAttributedTitle:(NSAttributedString * _Null_unspecified)popupString cancelLabel:(NSString * _Null_unspecified)cancelString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart40WPSymptomCheckerWebViewControllerManager")
@interface WPSymptomCheckerWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
- (nonnull instancetype)initWithLaunchedWithTree:(BOOL)launchedWithTree;
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The header for sections in a WPTableView
SWIFT_CLASS("_TtC7MyChart28WPTableViewSectionHeaderView")
@interface WPTableViewSectionHeaderView : UITableViewHeaderFooterView
/// Returns our own label instead of auto-generated one from UIKit in case someone tries to access it
@property (nonatomic, readonly, strong) UILabel * _Nullable textLabel;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart31WPTelehealthVisitModeBannerView")
@interface WPTelehealthVisitModeBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart39WPTelemedicineWaitingRoomViewController")
@interface WPTelemedicineWaitingRoomViewController : WPViewController
/// Instantiates the Telemedicine Waiting Room view controller
/// \param appointment appointment
///
///
/// returns:
/// The telemedicine waiting room view controller
+ (WPTelemedicineWaitingRoomViewController * _Nonnull)instantiateWithAppointment:(WPAppointment * _Nonnull)appointment SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIScrollView;

@interface WPTelemedicineWaitingRoomViewController (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


SWIFT_CLASS("_TtC7MyChart35WPTestResultDetailWebViewController")
@interface WPTestResultDetailWebViewController : WPActivityWebViewController
- (nonnull instancetype)initWithOrderID:(NSString * _Nonnull)orderID;
- (void)closePressed:(id _Null_unspecified)sender;
- (void)backPressed:(id _Null_unspecified)sender;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PEEncounterContext;
@protocol PETestResult;
@class WPTestResult;

SWIFT_CLASS("_TtC7MyChart33WPTestResultDetailsViewController")
@interface WPTestResultDetailsViewController : WPViewController
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestDat:(NSString * _Nonnull)dat andExternalOrgId:(NSString * _Nullable)externalOrgId andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestDat:(NSString * _Nonnull)dat andExternalOrgId:(NSString * _Nullable)externalOrgId andLabName:(NSString * _Nonnull)labName andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestOrder:(NSString * _Nonnull)orderId andExternalOrgId:(NSString * _Nullable)externalOrgId andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestOrder:(NSString * _Nonnull)orderId andExternalOrgId:(NSString * _Nullable)externalOrgId isOrderIdEncrypted:(BOOL)isOrderIdEncrypted andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithPETestResult:(id <PETestResult> _Nonnull)result overrideUri:(NSString * _Nonnull)overrideUri componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost patientContext:(PEPatientContext * _Nonnull)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext logEncounterCSN:(BOOL)logEncounterCSN SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestResult:(WPTestResult * _Nonnull)result SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
@end


@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
/// UIScrollViewDelegate
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end




@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPViewContainingWebViewDelegate>
/// WPViewContainingWebViewDelegate
- (void)navigateToAllowedHostForRequest:(NSURLRequest * _Nullable)request allowedHosts:(NSArray * _Nullable)allowedHosts;
/// WPViewContainingWebViewDelegate
- (void)openUrlInExternalBrowser:(NSURL * _Nullable)url;
@end



SWIFT_CLASS("_TtC7MyChart10WPTestScan")
@interface WPTestScan : WPObject
@property (nonatomic, copy) NSString * _Nullable dcsID;
@property (nonatomic, copy) NSString * _Nullable encryptedDCSID;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable fileType;
@property (nonatomic, copy) NSData * _Nullable data;
@property (nonatomic, copy) NSDate * _Nullable scanDateTime;
- (void)setXMLValue:(id _Null_unspecified)value forKey:(NSString * _Null_unspecified)key;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart28WPTiffLauncherViewController")
@interface WPTiffLauncherViewController : WPViewController <WPShareDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the view controller with a dcs ID and an optional file extension for the attachment
/// \param dcsID dcs ID of the attachment being launched
///
/// \param dcsExtension optional file extension for the attachment
///
/// \param orgID H2G org ID for loading H2G documents
///
/// \param useSourceEncryption true if the DCS ID is encrypted at the source org for external documents, false if it’s encrypted at the local org
///
- (nonnull instancetype)initWithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID useSourceEncryption:(BOOL)useSourceEncryption;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
/// Callback method that is called after getting the attachment from the server
/// \param response The response object containing the attachment object
///
- (void)didGetDocumentWithResponse:(WPGetDocumentResponse * _Nonnull)response;
- (void)didShowShareDialog;
- (void)didCancelShareDialog;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface WPTrackMyHealthUtils (SWIFT_EXTENSION(MyChart))
+ (void)launchHealthLinks;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPTrackMyHealthWebViewControllerManager")
@interface WPTrackMyHealthWebViewControllerManager : MyChartWebViewControllerManager
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DevicePlatformKey;)
+ (NSString * _Nonnull)DevicePlatformKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class representing updated preferences retrieved using the getUpdatedPersonalPreferences request
SWIFT_CLASS("_TtC7MyChart20WPUpdatedPreferences")
@interface WPUpdatedPreferences : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartPerson;

/// The object representing the logged-in user (equivalent to Android’s AuthenticateResponse class)
SWIFT_RESILIENT_CLASS("_TtC7MyChart6WPUser")
@interface WPUser : MyChartUser <IWPUser>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger nppIndex;)
+ (NSInteger)nppIndex SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) WPUser * _Nullable loggedInUser;)
+ (WPUser * _Nullable)loggedInUser SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggedInUser:(WPUser * _Nullable)value;
@property (nonatomic, readonly, copy) NSArray<WPPatient *> * _Nonnull wpPatientData;
@property (nonatomic) BOOL loggedInUsingSAML;
@property (nonatomic) BOOL isFullyAuthenticated;
@property (nonatomic, readonly) BOOL isInProxySubjectContext;
@property (nonatomic, readonly, strong) WPPatient * _Nullable currentPatient;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum WPAuthenticationStatus authenticationStatus;)
+ (enum WPAuthenticationStatus)authenticationStatus SWIFT_WARN_UNUSED_RESULT;
- (WPPatient * _Nullable)getPatient:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
- (void)switchPatient:(NSInteger)index andNotifyWeb:(BOOL)notify isLoginProcess:(BOOL)isLoginProcess;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger currentPersonIndex;)
+ (NSInteger)currentPersonIndex SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentPersonIndex:(NSInteger)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) WPPatient * _Nullable currentPatient;)
+ (WPPatient * _Nullable)currentPatient SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentPatient:(WPPatient * _Nullable)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MyChartPerson * _Nullable currentPerson;)
+ (MyChartPerson * _Nullable)currentPerson SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentPerson:(MyChartPerson * _Nullable)newValue;
+ (PEPatientContext * _Nullable)getCurrentPatientContext SWIFT_WARN_UNUSED_RESULT;
+ (PEUserContext * _Nullable)getCurrentUserContext SWIFT_WARN_UNUSED_RESULT;
+ (PEPatientContext * _Nullable)getContextFromPatient:(WPPatient * _Nonnull)patient SWIFT_WARN_UNUSED_RESULT;
+ (PEPatientContext * _Nullable)getPatientContextAtIndex:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
+ (enum FeatureLoadStatus)getFeatureLoadStatusForId:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isMobileOptimizedFeatureAvailable:(BOOL)checkNPP SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPersonPhoto:(BOOL)useFallback onImageLoaded:(PersonImageCallback _Nullable)onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasAlerts SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPUser (SWIFT_EXTENSION(MyChart))
@property (nonatomic, readonly) BOOL isProxySubject;
- (id <IWPUser> _Nullable)asUser SWIFT_WARN_UNUSED_RESULT;
- (id <IWPPatient> _Nullable)asPatient SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPUser (SWIFT_EXTENSION(MyChart))
- (NSString * _Nonnull)getCommandLocaleString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceID SWIFT_WARN_UNUSED_RESULT;
- (void)setToken:(NSString * _Nonnull)token forType:(enum TokenType)tokenType;
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
- (void)updatePhoto:(UIImage * _Nullable)photo;
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart22WPUtilMiscComponentAPI")
@interface WPUtilMiscComponentAPI : NSObject <PEUtilMiscComponentAPIProtocol>
- (id _Nullable)getSettingWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol UIUserActivityRestoring;
@class UNUserNotificationCenter;
@class UNNotification;

@interface WPUtil_AppDelegate (SWIFT_EXTENSION(MyChart))
/// Provides a shared hook to call when the app delegate didFinishLaunchingWithOptions* if called. Called by both the main app delegate and self-submitted app delegates.
+ (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
+ (BOOL)willContinueUserActivityWithActivityType:(NSString * _Nonnull)activityType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)continueUserActivity:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nullable)(NSArray<id <UIUserActivityRestoring>> * _Nullable))restorationHandler;
/// Registers deep link framework component
+ (void)registerDeepLinkComponentAPI;
/// Generate needed deep link params and options for the push notification, and let DeepLinkManager start processing it
/// \param userInfo the userInfo contains push notification payload
///
+ (void)handlePushNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo;
/// Generate needed deep link params and options for the external deep link, and let DeepLinkManager start processing it
/// \param url the deep link url
///
/// \param orgId the deep link org id
///
/// \param wprId the deep link wpr id
///
+ (void)handleExternalDeepLinkForUrl:(NSString * _Nullable)url orgId:(NSString * _Nullable)orgId wprId:(NSString * _Nullable)wprId;
/// Create a deep link for launching the medical advice activity and attaching a file
+ (NSString * _Nonnull)createAppleHealthPDFDeepLinkWithFileUrl:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
/// Invoked by the app delegate when a push notification has been received while the app is in the foreground
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresent:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Null_unspecified)(UNNotificationPresentationOptions))completionHandler;
+ (BOOL)hasPushNotificationPermissions SWIFT_WARN_UNUSED_RESULT;
@end


/// Draws a polygon with its center at the given point. Draws in the given context
/// but uses the current line/fill color and size set up outside the function
/// \param point the center point of the polygon
///
/// \param radius the radius of the polygon i.e. from center to any of the outermost points
///
/// \param sides the number of sides to draw
///
/// \param context the CGContext in which to draw
///
SWIFT_CLASS("_TtC7MyChart19WPUtil_CoreGraphics")
@interface WPUtil_CoreGraphics : NSObject
+ (void)drawPolygonCenteredAtPoint:(CGPoint)point radius:(double)radius sides:(NSInteger)sides context:(CGContextRef _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPUtil_Library (SWIFT_EXTENSION(MyChart))
/// Returns the universal link domain used for the app
+ (NSString * _Nonnull)getUniversalLinkDomain SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getExternalUniversalLinkDomain SWIFT_WARN_UNUSED_RESULT;
@end

@class NSLocale;

SWIFT_CLASS("_TtC7MyChart14WPUtil_Locales")
@interface WPUtil_Locales : NSObject
/// Current locale to be used for general locale operations. Ex: String translations
/// Can be used pre-login and post-login. Respects overrides.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull currentPELocale;)
+ (PELocale * _Nonnull)currentPELocale SWIFT_WARN_UNUSED_RESULT;
/// Current locale to be used for general locale operations converted into an iOS Foundation Locales object
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSLocale * _Nonnull currentLocale;)
+ (NSLocale * _Nonnull)currentLocale SWIFT_WARN_UNUSED_RESULT;
/// Default locale to be used for general locale operations if no match can be made with user-preferences. Ex: String translations
/// Can be used pre-login and post-login. Respects overrides.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull defaultLocale;)
+ (PELocale * _Nonnull)defaultLocale SWIFT_WARN_UNUSED_RESULT;
/// Locale to be used for webservices.
/// Current PE locale with overrides for internal locales like Gibberish
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull commandLocale;)
+ (PELocale * _Nonnull)commandLocale SWIFT_WARN_UNUSED_RESULT;
/// Locale to be used for formatting dates and numbers
/// Contains special handling for Arabic. See XDS 150833
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull formatterLocale;)
+ (PELocale * _Nonnull)formatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Locale to be used for formatting currency
/// Contains special handling for Arabic. See XDS 150833
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull currencyFormatterLocale;)
+ (PELocale * _Nonnull)currencyFormatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Presents the information popup and sends user to the Settings App to change their language
+ (void)launchSettingsLanguagePickerWithVc:(UIViewController * _Nonnull)vc orgName:(NSString * _Nonnull)orgName;
/// Short date format string
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull shortDateFormat;)
+ (NSString * _Nonnull)shortDateFormat SWIFT_WARN_UNUSED_RESULT;
/// Medium date format string
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mediumDateFormat;)
+ (NSString * _Nonnull)mediumDateFormat SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Convenience override.
+ (NSBundle * _Nonnull)findMYCStringBundle SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Convenience override.
+ (NSBundle * _Nonnull)findMYCStringBundleForBundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Convenience override.
+ (NSBundle * _Nonnull)findMYCStringBundleForLocale:(PELocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Searches for possible lproj folder names. Ex: zh-Hans-CN -> zh-Hans-CN, zh-Hans, zh-CN, zh
+ (NSBundle * _Nonnull)findMYCStringBundleForLocale:(PELocale * _Nonnull)locale forBundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPUtil_Misc (SWIFT_EXTENSION(MyChart))
/// Check if the URL’s host is an allowed host.
/// \param url the url that we want to open
///
/// \param allowedHosts A list of hosts are allowed to be opened inside the app
///
+ (BOOL)isUrl:(NSString * _Nonnull)url supportedByHosts:(NSArray<NSString *> * _Nonnull)allowedHosts SWIFT_WARN_UNUSED_RESULT;
/// Writes audits for document viewing
/// \param dcsId DCS for the document
///
+ (void)auditDocumentViewedWithDcsId:(NSString * _Nullable)dcsId;
/// Writes audits for document viewing+download
/// \param dcsId DCS for the document
///
+ (void)auditDocumentDownloadWithDcsId:(NSString * _Nullable)dcsId;
/// Toggles Pus Notifications on or off
/// \param delegate delegate to handle the result of Push Notifications toggling
///
/// \param enable YES if push notifications need to be enabled, NO otherwise
///
+ (void)setPushNotificationsStatusWithDelegate:(id <IWPPushNotificationsDelegate> _Nonnull)delegate enable:(BOOL)enable;
/// Checks whether Push Notifications are enabled or not
/// \param delegate delegate to handle the result of getting the Push Notifications status
///
+ (void)getPushNotificationsStatusWithDelegate:(id <IWPPushNotificationsDelegate> _Nonnull)delegate;
/// Indicates whether or not the user can update their contact information
///
/// returns:
/// True if the server support is in place and the user has proper security and the newer Communication Preferences is not available; False otherwise
+ (BOOL)isUpdateContactInformationAvailable SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not communication preferences is available
///
/// returns:
/// True if the server support is in place and the user has proper security; False otherwise
+ (BOOL)isCommunicationPreferencesAvailable SWIFT_WARN_UNUSED_RESULT;
/// Ensure the address is prepared for Apple. Notably, this includes stripping the +4, if present, from the ZIP
/// \param address address string to be sanitized
///
+ (NSString * _Nonnull)prepareAddressForAppleWithAddress:(NSString * _Nonnull)address SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPUtil_UI (SWIFT_EXTENSION(MyChart))
/// Get a standard table header for a WPTableView
/// \param title Title to display
///
/// \param icon Icon to display
///
/// \param axLabel accessibility label for section header
///
/// \param target target receiving actions
///
/// \param selector selector of the target
///
+ (WPTableViewSectionHeaderView * _Nullable)sectionHeaderViewWithTitle:(NSString * _Nonnull)title andIcon:(UIImage * _Nullable)icon andAccessibilityLabel:(NSString * _Nullable)axLabel andTarget:(id _Nullable)target andSelector:(SEL _Nullable)selector SWIFT_WARN_UNUSED_RESULT;
/// Get a standard table header for a WPTableView
/// \param title Title to display
///
/// \param subtitle Optional subtitle to display
///
/// \param icon Icon to display
///
/// \param axLabel accessibility label for section header
///
/// \param target target receiving actions
///
/// \param selector selector of the target
///
+ (WPTableViewSectionHeaderView * _Nullable)sectionHeaderViewWithTitle:(NSString * _Nonnull)title andSubtitle:(NSString * _Nullable)subtitle andIcon:(UIImage * _Nullable)icon andAccessibilityLabel:(NSString * _Nullable)axLabel andTarget:(id _Nullable)target andSelector:(SEL _Nullable)selector SWIFT_WARN_UNUSED_RESULT;
/// Get the first navigation controller in the view hierarchy
///
/// returns:
/// the first navigation controller in the hierarchy, or nil
+ (UINavigationController * _Nullable)getTopNavigationController SWIFT_WARN_UNUSED_RESULT;
/// Get the topmost view controller in the view hierarchy, generally for displaying an alert on top of it or launching a deep link
///
/// returns:
/// The topmost view controller
+ (UIViewController * _Nullable)getTopViewController SWIFT_WARN_UNUSED_RESULT;
/// Get the top view controller in the view hierarchy targeting a specific view controller
/// \param rootViewController The view controller we’re targeting
///
///
/// returns:
/// A view controller on top of rootViewController, or rootViewController if none found
+ (UIViewController * _Nullable)getTopViewControllerWithRootViewController:(UIViewController * _Nullable)rootViewController SWIFT_WARN_UNUSED_RESULT;
@end

@class WPWebView;

SWIFT_CLASS("_TtC7MyChart23WPViewContainingWebView")
@interface WPViewContainingWebView : UIView
@property (nonatomic, strong) WPWebView * _Null_unspecified webView;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)loadWithHtml:(NSString * _Nullable)html;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)layoutSubviews;
@end



@interface WPViewContainingWebView (SWIFT_EXTENSION(MyChart)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
@end


@interface WPViewContainingWebView (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPViewController (SWIFT_EXTENSION(MyChart))
/// set up navigation bar to display two bars style that displays Epic logo
- (void)setUpTwoNavigationBarStyle;
/// Set up title view for second bar
/// \param title the title for the activity
///
/// \param patientIndex the current patient index
///
- (void)setUpPatientImageForSecondBarWithTitle:(NSString * _Nonnull)title atPatientIndex:(NSInteger)patientIndex;
- (void)animateNavigationBar;
- (void)enableExpandingNavBar;
- (void)disableExpandingNavBarWithAnimated:(BOOL)animated;
- (void)disableExpandingNavBar;
/// To remove the position animation of the view in the navigation bar to avoid it has weird movement when navigation
/// @param view the view we don’t want animation while push
- (void)removePushAnimationWithView:(UIView * _Nonnull)view;
/// Indicate whether we hide Epic logo for this view controller
- (BOOL)shouldHideEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldCollapseTitleInsteadOfBanner SWIFT_WARN_UNUSED_RESULT;
@end


/// Class that holds auto pay information for a visit
SWIFT_CLASS("_TtC7MyChart14WPVisitAutoPay")
@interface WPVisitAutoPay : WPObject
- (void)setXMLValue:(id _Null_unspecified)value forKey:(NSString * _Null_unspecified)key;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart32WPWebSessionManagerMyChartHelper")
@interface WPWebSessionManagerMyChartHelper : NSObject
+ (void)setUpSession:(NSInteger)patientIndex;
+ (void)onPatientContextChanged:(NSInteger)patientIndex;
+ (void)updateCurrentSession:(NSInteger)patientIndex;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol WPGetMyChartUrlCallbackProtocol;
@protocol WPGetMyChartJumpTokenCallbackProtocol;
@protocol IWPCreateMyChartUrlDelegate;

/// API class with methods for WebRequests related to Web Session Manager
SWIFT_CLASS("_TtC7MyChart32WPWebSessionManagerWebServiceAPI")
@interface WPWebSessionManagerWebServiceAPI : NSObject
/// Method to check if an MO view can launch
/// @param listener
+ (void)getMyChartUrlWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters listener:(id <WPGetMyChartUrlCallbackProtocol> _Nonnull)listener;
/// Method to check if an MO view can launch
/// @param listener
+ (void)getMyChartJumpTokenWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters isExternal:(BOOL)isExternal orgId:(NSString * _Nullable)orgId listener:(id <WPGetMyChartJumpTokenCallbackProtocol> _Nonnull)listener;
/// Method to check if an MO view can launch
/// @param listener
+ (void)getMyChartJumpTokenLibraryWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters isExternal:(BOOL)isExternal orgId:(NSString * _Nullable)orgId listener:(id <IWPCreateMyChartUrlDelegate> _Nonnull)listener;
+ (NSString * _Nonnull)getModeString:(WPMyChartWebViewMode)modeEnum SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKUserContentController;
@class WKScriptMessage;
@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC7MyChart9WPWebView")
@interface WPWebView : WKWebView <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart13WPWebViewUtil")
@interface WPWebViewUtil : NSObject
/// !
/// * @brief Searches through the webpage for an ‘a’ link that has a URL that matches the given
/// *        url. If found retrieves the given attribute of the ‘a’ element. Used for WKWebView
/// *
/// * @param attribute     The html attribute to retrieve from the ‘a’ link
/// * @param forLink       The link URL to retrieve the attribute from
/// * @param inWKWebView   The webview to search in
/// * @param completion    The completion handler where the attribute value is passed back
/// *
+ (void)getAttribute:(NSString * _Nullable)attribute forLink:(NSString * _Nullable)forLink inWKWebView:(WKWebView * _Nullable)inWKWebView completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// !
/// * @brief Finds all the ‘a’ elements in a document. For each element it compares the ‘href’
/// *        attribute to the supplied URL. If they match it then returns the supplied property
/// *        of the element. Used for WKWebView
/// *
/// * @param property      A function or property that can be called on an ‘a’ element.
/// * @param forLink       The link URL’s href to call the property on
/// * @param inWKWebView   The webview to search in
/// * @param completion    The completion handler where the attribute value gets passed back
/// *
+ (void)getProperty:(NSString * _Nullable)aProperty forLink:(NSString * _Nullable)forLink inWKWebView:(WKWebView * _Nullable)inWKWebView completion:(void (^ _Nullable)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPWelcomeWizardWebViewControllerManager")
@interface WPWelcomeWizardWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)initWithShouldLogoutOnClose:(BOOL)shouldLogoutOnClose;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef MYCHART_SWIFT_H
#define MYCHART_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Authentication;
@import CoreFoundation;
@import CoreGraphics;
@import CoreLocation;
@import EventKitUI;
@import Foundation;
@import MyChartGlobals;
@import ObjectiveC;
@import PECore;
@import ToDo;
@import UIKit;
@import UserNotifications;
@import WatchConnectivity;
@import WebKit;
#endif

#import <MyChart/MyChart.h>

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="MyChart",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSBundle;
@class NSCoder;

/// Helper function for objc to find this.  Also must be UIViewController to work with WPActivityManager
SWIFT_CLASS("_TtC7MyChart35AccountSettingsViewControllerHelper")
@interface AccountSettingsViewControllerHelper : UIViewController
+ (UIViewController * _Nullable)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSBundle (SWIFT_EXTENSION(MyChart))
/// Return the correct mychart app bundle (framework or main, depending on context)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull myChart;)
+ (NSBundle * _Nonnull)myChart SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart38ChangePasswordWebViewControllerManager")
@interface ChangePasswordWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart13CommunityUtil")
@interface CommunityUtil : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_WPRID;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_WPRID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_DEEPLINKURL;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_DEEPLINKURL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTIFICATION_H2GPP_ASYN_ORGID;)
+ (NSString * _Nonnull)NOTIFICATION_H2GPP_ASYN_ORGID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEATURE_NO_SPECIFY;)
+ (NSString * _Nonnull)FEATURE_NO_SPECIFY SWIFT_WARN_UNUSED_RESULT;
/// Set deeplink url corresponding to the dxoId which indicate the background update is still going for this organization
/// \param isUpdating true if the organization is still updating
///
/// \param externalOrgId id of the organization we want to check
///
/// \param deepLinkURL url for deep link jump
///
+ (void)setUpdatingStatusWithIsUpdating:(BOOL)isUpdating externalOrgId:(NSString * _Nonnull)externalOrgId deepLinkURL:(NSString * _Nonnull)deepLinkURL;
/// Get the preferences key for tracking if patient has external information is updating.
///
/// returns:
/// the key string for updating preference
+ (NSString * _Nonnull)getCommunityUpdatingPrefsKey SWIFT_WARN_UNUSED_RESULT;
/// get the list of orgs is updating
///
/// returns:
/// the list of org ids
+ (NSArray<NSString *> * _Nonnull)getListOfUpdatingOrgs SWIFT_WARN_UNUSED_RESULT;
/// The Notification when the update complete
/// \param successOrgNames names of the external organizations updated successfully
///
/// \param errorOrgNames names of the external organizations failed updating
///
+ (void)fireUpdateCompleteNotificationWithSuccessOrgNames:(NSString * _Nonnull)successOrgNames errorOrgNames:(NSString * _Nonnull)errorOrgNames focusWPR:(NSString * _Nonnull)focusWPR deepLinkURL:(NSString * _Nonnull)deepLinkURL;
/// The toast when the udpate complete
/// \param successOrgNames names of the external organizations updated successfully
///
/// \param errorOrgNames names of the external organizations failed updating
///
+ (void)fireUpdateCompleteToastWithSuccessOrgNames:(NSString * _Nonnull)successOrgNames errorOrgNames:(NSString * _Nonnull)errorOrgNames;
+ (NSString * _Nonnull)constructAsynLoadingDeepLinkURLWithUpdateContext:(NSString * _Nonnull)updateContext wprId:(NSString * _Nonnull)wprId orgId:(NSString * _Nonnull)orgId SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationResponsefoKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationStatusKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getCommunityNotificationRefreshBannerUpdateKey SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getUpdateContextURLWithContext:(enum CommunityUpdateContext)context SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for web requests related to H2G
SWIFT_CLASS("_TtC7MyChart22CommunityWebServiceAPI")
@interface CommunityWebServiceAPI : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// Returns the community webservice for the app
+ (CommunityWebServiceAPI * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Three states of web service:
/// 1 - the web service is running
/// 0 - the web service is paused for the new request
/// -1 - the web service is terminated
- (void)setIsCommunityUpdateStatusRunningWithIsRunning:(NSInteger)isRunning;
- (void)setFeatureIsCurrentlyCheckingStatusWithFeatureBit:(NSString * _Nonnull)featureBit;
- (void)beginBackgroundUpdateTask;
- (void)endBackgroundUpdateTask;
/// send the request to check updating status
+ (void)launchCommunityLoadingStatusRequest;
- (void)getCommunityUpdateStatusAPI;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart43ContactVerificationWebViewControllerManager")
@interface ContactVerificationWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPCustomerServiceSettingsResponse;
@class WebServiceFailedError;

/// protocol for callback contexts
SWIFT_PROTOCOL("_TtP7MyChart23CustomerServiceCallback_")
@protocol CustomerServiceCallback
- (void)onSuccessWithResponse:(WPCustomerServiceSettingsResponse * _Nullable)response;
- (void)onFailureWithError:(WebServiceFailedError * _Nullable)error;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart34DeviceListWebViewControllerManager")
@interface DeviceListWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class EFDataSet;

SWIFT_CLASS("_TtC7MyChart14EFDataSetUtils")
@interface EFDataSetUtils : NSObject
/// Takes the given data set and creates a new data set where each data point represents the sum
/// of all data from the original data set over the course of one time period. For example if
/// the input data has a reading of 5 at 12:20pm and 7 at 12:40pm, the output data set accumulated
/// by hour would have one reading at 12:00pm of 12.
/// Assumes data is in chronilogial order
+ (EFDataSet * _Nullable)accumulatedGraphDataWithDataSet:(EFDataSet * _Nullable)dataSet period:(WPAccumulationPeriod)period SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIColor;

SWIFT_CLASS("_TtC7MyChart15EFGraphDataView")
@interface EFGraphDataView : UIView
@property (nonatomic) BOOL showMetadata;
@property (nonatomic, strong) UIColor * _Nullable dataColor;
@property (nonatomic, strong) UIColor * _Nullable abnormalDataColor;
@property (nonatomic, strong) UIColor * _Nullable shadingColor;
@property (nonatomic, strong) UIColor * _Nullable labelColor;
@property (nonatomic) BOOL showBasal;
@property (nonatomic) BOOL showBolus;
@property (nonatomic, readonly) CGRect rectOfGraph;
@property (nonatomic, readonly) EFGraphType graphType;
@property (nonatomic, readonly, strong) EFDataSet * _Nullable dataSet;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Creates a grapher for the current graph type which draws the Y axis and data
- (void)drawRect:(CGRect)rect;
/// If the bounds changed, recalculate coordinates
@property (nonatomic) CGRect bounds;
/// Calculates coordinates for data in the current frame. Coordinates are stored on each
/// data point object
- (void)calculateCoordinatesForData;
/// Sets up the data view for the given data set and graph type
/// \param dataSet the data set to show
///
/// \param graphType the graph type to show
///
- (void)setWithDataSet:(EFDataSet * _Nullable)dataSet graphType:(EFGraphType)graphType;
@end

@class NSDate;

/// Class to be used as an optional X axis for the EFGrapher
SWIFT_CLASS("_TtC7MyChart21EFGraphHorizontalAxis")
@interface EFGraphHorizontalAxis : UIView
@property (nonatomic) EFGraphType graphType;
@property (nonatomic, strong) UIColor * _Nonnull labelColor;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// Set up the axis with the given date range
/// \param start leading-edge date
///
/// \param end trailing-edge date
///
- (void)setRangeFrom:(NSDate * _Nonnull)start to:(NSDate * _Nonnull)end;
/// If the axis represents one day, draw ticks and hour markings for that day
- (void)drawRect:(CGRect)rect;
@end

@protocol GraphMetadataSwitchDelegate;

SWIFT_CLASS("_TtC7MyChart13EFGraphLegend")
@interface EFGraphLegend : UIView
@property (nonatomic, strong) id <GraphMetadataSwitchDelegate> _Nullable metadataDelegate;
/// required to be set for insulin
@property (nonatomic, strong) UIColor * _Nullable abnormalDataColor;
@property (nonatomic, strong) UIColor * _Nullable dataColor;
@property (nonatomic, strong) UIColor * _Nullable labelColor;
@property (nonatomic) WPFlowsheetRowMetadataType metadataType;
@property (nonatomic, getter=isHidden) BOOL hidden;
- (void)awakeFromNib;
/// Sets on/off values for left and right switches
- (void)setMetadataSwitchWithLeftOn:(BOOL)leftOn rightOn:(BOOL)rightOn;
- (void)drawRect:(CGRect)rect;
/// Draws a shape for a graph indicating a data point is an after meal glucose reading.
/// The shape is a triangle with an outline of the given color filled with white
/// \param point the center point for the shape
///
/// \param context the CGContext in which to draw the shape
///
/// \param color color for the outer part of the shape. should be normal or abnormal data color
///
+ (void)drawBeforeMealShapeCenteredAtPoint:(CGPoint)point context:(CGContextRef _Nullable)context color:(CGColorRef _Nonnull)color;
/// Draws a shape for a graph indicating a data point is an after meal glucose reading.
/// The shape is a triangle with an outline of abnormal or normal data color filled with white
/// \param point the center point for the shape
///
/// \param context the CGContext in which to draw the shape
///
/// \param color color for the outer part of the shape. should be normal or abnormal data color
///
+ (void)drawAfterMealShapeCenteredAtPoint:(CGPoint)point context:(CGContextRef _Nullable)context color:(CGColorRef _Nonnull)color;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart20EFHourlyTrendGrapher")
@interface EFHourlyTrendGrapher : EFGrapher
/// Draws the normal range rectangle, trend bars, and Y axis labels
/// \param frame where to draw the data. should be the same frame called when coordinates were calculated
///
- (void)graphDataSetWithinFrame:(CGRect)frame;
- (null_unspecified instancetype)initWithDataSet:(EFDataSet * _Null_unspecified)dataSet SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class EFDataPoint;

SWIFT_CLASS("_TtC7MyChart16EFInsulinDataSet")
@interface EFInsulinDataSet : EFDataSet
@property (nonatomic, strong) EFDataSet * _Nullable basalAccumulatedDataSet;
@property (nonatomic, strong) EFDataSet * _Nullable bolusAccumulatedDataSet;
/// supports hour, day, month based on explicit instant high/low
@property (nonatomic, readonly) WPAccumulationPeriod accumulationPeriod;
/// Creates an insulin data set with the given basal and bolus data sets
/// \param basalDataSet basal data
///
/// \param bolusDataSet bolus data
///
- (nullable instancetype)initWithBasalDataSet:(EFDataSet * _Nullable)basalDataSet bolusDataSet:(EFDataSet * _Nullable)bolusDataSet OBJC_DESIGNATED_INITIALIZER;
/// Sets instants to limit what period of time the data set should effectively represent.
/// Recalculates accumulated data based on the set time period
- (void)setExplicitInstantLow:(NSDate * _Null_unspecified)instantLow explicitInstantHigh:(NSDate * _Null_unspecified)instantHigh;
- (void)setExplicitInstantLow:(NSDate * _Null_unspecified)instantLow explicitInstantHigh:(NSDate * _Null_unspecified)instantHigh autoExpand:(BOOL)autoExpand;
/// Gets the latest i.e. most recent data point. If there is bolus and basal
/// data at the latest instant, returns the bolus point. Ignores explicit
/// instant high/low
- (EFDataPoint * _Nullable)getLatestDataPoint SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithData:(NSArray * _Null_unspecified)data decimals:(int32_t)decimals SWIFT_UNAVAILABLE;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class WKNavigationAction;
@class NSURLRequest;

/// Inherits from the older MO VC - WPWebViewController so that it can add epichttp support for extensibility activities
SWIFT_CLASS("_TtC7MyChart20FDIWebViewController")
@interface FDIWebViewController : WPWebViewController
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (null_unspecified instancetype)initWithRequest:(NSURLRequest * _Null_unspecified)request andPresentationStyle:(WPViewPresentationStyle)style OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithRequest:(NSURLRequest * _Null_unspecified)request allowedHosts:(NSArray * _Null_unspecified)allowHosts andPresentationStyle:(WPViewPresentationStyle)style OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class WPGetPersonalNotesServiceResponse;

/// Protocol for listeners to results of get personal notes web service call
SWIFT_PROTOCOL("_TtP7MyChart24GetPersonalNotesCallback_")
@protocol GetPersonalNotesCallback
- (void)onGetNotesSuccessWithResponse:(WPGetPersonalNotesServiceResponse * _Nullable)response;
- (void)onGetNotesFailureWithError:(WebServiceFailedError * _Nullable)error;
@end


/// Response class for the getUpdatedPersonalPreferences request
SWIFT_CLASS("_TtC7MyChart30GetPersonalPreferencesResponse")
@interface GetPersonalPreferencesResponse : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This class stores metadata about the currently paired watch, if it is also linked to the org
SWIFT_CLASS("_TtC7MyChart18LinkedWatchDetails")
@interface LinkedWatchDetails : NSObject
/// Device id
@property (nonatomic, copy) NSString * _Nonnull uuid;
/// Device name
@property (nonatomic, copy) NSString * _Nonnull deviceName;
/// Org Id
@property (nonatomic, copy) NSString * _Nonnull orgId;
/// Org name
@property (nonatomic, copy) NSString * _Nonnull orgName;
/// The WPR who linked the watch
@property (nonatomic, copy) NSString * _Nonnull wprId;
/// The display name for the user who linked the watch
@property (nonatomic, copy) NSString * _Nonnull userNickname;
/// Is the paired watch linked to the current org
@property (nonatomic, readonly) BOOL isLinkedToCurrentOrg;
/// Is the watch paired to this org and to this user?
@property (nonatomic, readonly) BOOL isLinkedToCurrentUser;
/// Removes the seralized data saved using writeToWatchStorage
///
/// returns:
/// successful delete
- (BOOL)unlinkFromOrg;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIApplication;
@class UISceneSession;
@class UISceneConnectionOptions;
@class UISceneConfiguration;

/// The UIApplicationDelegate for the MyChart (and any Epic-Submitted) app
/// This class is responsible for handling various application initializations such as registering ComponentAPIs and configuring scenes and assigning their scene delegates.
SWIFT_CLASS("_TtC7MyChart18MyChartAppDelegate")
@interface MyChartAppDelegate : WPAppDelegate
- (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions SWIFT_WARN_UNUSED_RESULT;
- (UISceneConfiguration * _Nonnull)application:(UIApplication * _Nonnull)application configurationForConnectingSceneSession:(UISceneSession * _Nonnull)connectingSceneSession options:(UISceneConnectionOptions * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

SWIFT_CLASS("_TtC7MyChart14MyChartManager")
@interface MyChartManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Called when either the app delegate or scene delegate receives a request to open a URL
/// \param url the URL that was requested
///
///
/// returns:
/// true if the URL was handled, false otherwise
+ (BOOL)onOpenUrl:(NSURL * _Nonnull)url;
@end

@class UIWindow;
@class UIScene;
@class NSUserActivity;

/// The UIWindowSceneDelegate for the MyChart (and any Epic-Submitted) app
/// This class is responsible for handling various events received by the application’s main scene such as deep links and universal links (through the <code>scene(_:openURLContexts:)</code> method)
SWIFT_CLASS("_TtC7MyChart20MyChartSceneDelegate")
@interface MyChartSceneDelegate : NSObject <UIWindowSceneDelegate>
/// The key window for the MyChart (or Epic-Submitted) application
/// This is initialized when <code>scene(_:willConnectTo:options:)</code> is called
@property (nonatomic, strong) UIWindow * _Nullable window;
- (void)scene:(UIScene * _Nonnull)scene willConnectToSession:(UISceneSession * _Nonnull)session options:(UISceneConnectionOptions * _Nonnull)connectionOptions;
- (void)scene:(UIScene * _Nonnull)scene continueUserActivity:(NSUserActivity * _Nonnull)userActivity;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSMutableArray<ObjectType> (SWIFT_EXTENSION(MyChart))
+ (NSMutableArray * _Nonnull)removeDuplicatesFromArray:(NSMutableArray * _Nonnull)original isDuplicate:(SWIFT_NOESCAPE BOOL (^ _Nonnull)(id _Nonnull, id _Nonnull))isDuplicate SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_RESILIENT_CLASS("_TtC7MyChart43PersonalInformationWebViewControllerManager")
@interface PersonalInformationWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PersonalNoteType, open) {
  PersonalNoteTypeAllergy = 1,
  PersonalNoteTypeMedication = 2,
  PersonalNoteTypeHealthIssue = 3,
  PersonalNoteTypeImmunization = 4,
  PersonalNoteTypeReminder = 5,
  PersonalNoteTypeMedicalHistory = 6,
  PersonalNoteTypeSocialHistory = 7,
  PersonalNoteTypeSurgicalHistory = 8,
  PersonalNoteTypeFamilyHistory = 9,
  PersonalNoteTypeFamilyStatus = 10,
  PersonalNoteTypePatientGoals = 11,
};

@class WPSavePersonalNotesServiceResponse;

SWIFT_PROTOCOL("_TtP7MyChart25SavePersonalNotesCallback_")
@protocol SavePersonalNotesCallback
- (void)onSaveNotesSuccessWithResponse:(WPSavePersonalNotesServiceResponse * _Nullable)response;
- (void)onSaveNotesFailureWithError:(WebServiceFailedError * _Nullable)error;
@end

@class WPScreeningsServiceResponse;

/// Protocol for listeners to results of screenings web service call
SWIFT_PROTOCOL("_TtP7MyChart18ScreeningsCallback_")
@protocol ScreeningsCallback
- (void)onSuccessWithResponse:(WPScreeningsServiceResponse * _Nullable)response;
- (void)onFailureWithError:(WebServiceFailedError * _Nullable)error;
@end


/// A utility that manages access to secondary login methods
SWIFT_CLASS("_TtC7MyChart21SecondaryLoginManager")
@interface SecondaryLoginManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Indicates if secondary login can be setup (does not indicate if a secondary login method has been enabled).
/// This method does not guarantee any secondary login methods are available, just that they are not all explicitly disabled.
/// <ul>
///   <li>
///     Returns true if secondary login is available to setup, false otherwise
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isSecondaryLoginFeatureAvailable;)
+ (BOOL)isSecondaryLoginFeatureAvailable SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the passcode login feature is available for the current server.
/// <ul>
///   <li>
///     Returns true if the server supports the feature, false otherwise
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isPasscodeLoginFeatureAvailable;)
+ (BOOL)isPasscodeLoginFeatureAvailable SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the biometric login feature is available for the current server
/// <ul>
///   <li>
///     Returns true if the server supports the feature, false otherwise
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isBiometricLoginFeatureAvailable;)
+ (BOOL)isBiometricLoginFeatureAvailable SWIFT_WARN_UNUSED_RESULT;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for the organization with the given orgId
/// \param orgId the org ID of the organization for which the secondary login token is being removed
///
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
+ (void)removeSecondaryLoginForOrgId:(NSString * _Nonnull)orgId withCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for the organization with the given orgId
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
/// \param orgId the org ID of the organization for which the secondary login token is being removed
///
+ (void)removeSecondaryLoginForOrgId:(NSString * _Nonnull)orgId;
/// Removes the login token used for passcode login for the organization with the given orgId
/// \param orgId the org ID of the organization for which the passcode login token is being removed
///
///
/// returns:
/// true if the passcode login token was found and  successfully removed, false otherwise
+ (void)removePasscodeLoginForOrgId:(NSString * _Nonnull)orgId withCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for passcode login for the organization with the given orgId
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
/// \param orgId the org ID of the organization for which the passcode login token is being removed
///
+ (void)removePasscodeLoginForOrgId:(NSString * _Nonnull)orgId;
/// Removes the login token used for biometric login for the organization with the given orgId
/// \param orgId the org ID of the organization for which the biometric login token is being removed
///
///
/// returns:
/// true if the biometric login token was found and  successfully removed, false otherwise
+ (void)removeBiometricLoginForOrgId:(NSString * _Nonnull)orgId withCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for biometric login for the organization with the given orgId
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
/// \param orgId the org ID of the organization for which the biometric login token is being removed
///
+ (void)removeBiometricLoginForOrgId:(NSString * _Nonnull)orgId;
@end


/// The session manager is shared between the watch and phone targets to manage passing data between the two platforms and overall authentication workflows. It therefore also serves as the WCSessionDelegate.
SWIFT_CLASS("_TtC7MyChart14SessionManager")
@interface SessionManager : NSObject
/// Details for the currently linked watch
@property (nonatomic, readonly, strong) LinkedWatchDetails * _Nullable currentLinkedWatch;
/// Singleton instance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SessionManager * _Nonnull instance;)
+ (SessionManager * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// init to be used by singleton only
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface SessionManager (SWIFT_EXTENSION(MyChart))
/// Invalidate the watch feed. Called when the feedInvalidatedNotification is posted on the paired phone
- (void)invalidateWatchFeed;
/// The watch can request that the phone remove its local cached data with the watch details
- (void)receiveUnlinkCurrentWatch:(NSDictionary<NSString *, id> * _Nonnull)params :(id _Null_unspecified)replyHandler;
@end

@class WCSession;

@interface SessionManager (SWIFT_EXTENSION(MyChart)) <WCSessionDelegate>
- (void)sessionDidBecomeInactive:(WCSession * _Nonnull)session;
- (void)sessionDidDeactivate:(WCSession * _Nonnull)session;
- (void)session:(WCSession * _Nonnull)session activationDidCompleteWithState:(WCSessionActivationState)activationState error:(NSError * _Nullable)error;
- (void)session:(WCSession * _Nonnull)session didReceiveApplicationContext:(NSDictionary<NSString *, id> * _Nonnull)applicationContext;
- (void)sessionReachabilityDidChange:(WCSession * _Nonnull)session;
/// custom function to parse our own message formats. Requires the message contain a function that is executable by reflection. This could be used by either platform, but currently we only send messages from phone to watch.
- (void)session:(WCSession * _Nonnull)session didReceiveMessage:(NSDictionary<NSString *, id> * _Nonnull)message replyHandler:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nonnull))replyHandler;
@end






@interface UILabel (SWIFT_EXTENSION(MyChart))
- (void)setTextOrHide:(NSString * _Nullable)text;
@end







@interface NSUserDefaults (SWIFT_EXTENSION(MyChart))
/// Previously, MyChart saved some data in a shared userdefaults collection because of the original Apple Watch app. A bug in iOS 16 made this collection become unstable and we now use standard userdefaults for all storeage.
+ (NSUserDefaults * _Nullable)legacyCompatibleDefaults SWIFT_WARN_UNUSED_RESULT;
@end


@interface WCSession (SWIFT_EXTENSION(MyChart))
+ (NSSet<NSString *> * _Nonnull)keyPathsForValuesAffectingValueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

@class UIAlertController;
@class UINavigationController;

@interface WPActivityManager (SWIFT_EXTENSION(MyChart))
/// Check the view controller for H2G support and returns an alert controller if it doesn’t
/// \param orgName The H2G org name of context desired for launch if allowed
///
+ (UIAlertController * _Nonnull)getH2GUnsupportedAlertControllerWithOrgName:(NSString * _Nullable)orgName SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isH2GSupportedWithViewController:(UIViewController * _Nullable)viewController andActivity:(WPActivity)activity SWIFT_WARN_UNUSED_RESULT;
+ (enum PEBillingMode)getBillingModeForActivity:(WPActivity)activity SWIFT_WARN_UNUSED_RESULT;
+ (enum PEEstimatesMode)getEstimateModeForActivity:(WPActivity)activity SWIFT_WARN_UNUSED_RESULT;
+ (void)launchConsentAlertforDrivingDirections:(NSString * _Nonnull)urlString in:(UINavigationController * _Nonnull)navigationController;
+ (NSString * _Nonnull)passwordIdentifier2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPActivityWebViewController (SWIFT_EXTENSION(MyChart))
@property (nonatomic, readonly) BOOL supportsH2GLaunchContext;
@end


@interface WPActivityWebViewController (SWIFT_EXTENSION(MyChart))
- (UINavigationController * _Nullable)getNavController SWIFT_WARN_UNUSED_RESULT;
- (void)tryExecuteWithDeepLink:(NSString * _Nullable)deepLink in:(UINavigationController * _Nonnull)navigationController;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
@end

@class PEPatientContext;

/// API class with methods for sending the current website name to the server for affiliate branding
SWIFT_CLASS("_TtC7MyChart32WPAffiliateBrandingWebServiceAPI")
@interface WPAffiliateBrandingWebServiceAPI : NSObject
/// Objective-C wrapper for the web service to set the affiliate branding from the website name
/// \param patientContext the callback object
///
/// \param websiteName website name from the current phonebook entry
///
- (void)setAffiliateBrandingWebsiteInSessionWithPatientContext:(PEPatientContext * _Nonnull)patientContext websiteName:(NSString * _Nonnull)websiteName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// This sandbox is for testing native and web passkit workflows
SWIFT_CLASS("_TtC7MyChart34WPAppleWalletSandboxViewController")
@interface WPAppleWalletSandboxViewController : WPViewController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibName bundle:(NSBundle * _Nullable)bundle SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
@end

@class UITextField;

@interface WPAppleWalletSandboxViewController (SWIFT_EXTENSION(MyChart)) <UITextFieldDelegate>
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PEPersonProtocol;
@class UIImage;
@class PELocale;
@class PEUserContext;
@protocol PEThemeProtocol;

SWIFT_CLASS("_TtC7MyChart25WPApplicationComponentAPI")
@interface WPApplicationComponentAPI : NSObject <PEApplicationComponentAPIProtocol>
- (void)logout;
- (void)logoutWithDeepLinkUrl:(NSString * _Nonnull)url;
- (void)switchCurrentPerson:(id <PEPersonProtocol> _Nonnull)person;
- (BOOL)switchCurrentPersonWithWprId:(NSString * _Nullable)wprId;
- (BOOL)switchCurrentPersonWithWprId:(NSString * _Nullable)wprId eAccountId:(NSString * _Nullable)eAccountId;
- (BOOL)isInternalBuild SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getApplicationId SWIFT_WARN_UNUSED_RESULT;
- (enum ApplicationType)getApplicationType SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isHealthKitDataAvailable SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isBrandedApp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isSelfSubmittedApp SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEpicSubmittedApp SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandedAppOrgId SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getBrandedCustomerImage SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTestLibraryExpired SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nullable)getServerPrimaryLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getCurrentLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getDefaultLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getCommandLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getFormatterLocale SWIFT_WARN_UNUSED_RESULT;
- (PELocale * _Nonnull)getCurrencyFormatterLocale SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getLocaleSettingsDebugDescriptionWithDevice:(BOOL)withDevice SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getDatePatternFrom:(NSString * _Nonnull)dateFormatTemplate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isFullyAuthenticated SWIFT_WARN_UNUSED_RESULT;
- (void)startIdleTimer;
- (void)stopIdleTimer;
- (void)resetIdleTimer;
- (PEUserContext * _Nullable)getCurrentUserContext SWIFT_WARN_UNUSED_RESULT;
- (PEPatientContext * _Nullable)getCurrentPatientContext SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceUId SWIFT_WARN_UNUSED_RESULT;
- (void)invalidateAlertsForPatient;
- (PELocale * _Nullable)getCurrentLocaleOverride SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldEnableLogoutButton SWIFT_WARN_UNUSED_RESULT;
- (enum PEAppleWatchState)getAppleWatchState SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether the device has timed out
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether the application + org supports printing
- (BOOL)isPrintingSupported SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
- (id <PEThemeProtocol> _Nonnull)getDefaultTheme SWIFT_WARN_UNUSED_RESULT;
/// Helper method to get the launch scheme of the app
- (NSString * _Nullable)getAppLaunchScheme SWIFT_WARN_UNUSED_RESULT;
- (void)clearLoginState;
- (BOOL)isAppReviewModeEnabled SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getPhonebookUrl SWIFT_WARN_UNUSED_RESULT;
/// Get if the MO Printing Onboarding should be hidden
- (BOOL)shouldSuppressMOPrintingOnboarding SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// A view controller responsible for showing the check in screen for the Appointment Arrival feature.
SWIFT_CLASS("_TtC7MyChart41WPAppointmentArrivalCheckInViewController")
@interface WPAppointmentArrivalCheckInViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalCheckInViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param csn the appointment csn
///
/// \param displayTime the appointment display time
///
/// \param index the patient index
///
/// \param initiatedWithBeacons Was this for a beacon
///
/// \param enableSnooze Should you enable snoozing
///
/// \param initiatedFromSnooze Was this created from a snooze
///
/// \param arrivedApptOrganizationID the appointment org id
///
/// \param firstUserID The user id for the appt
///
/// \param userInitiated The user initiated this
///
/// \param autoCheckIn And auto check in the user
///
/// \param firstUserID The ID of the user associated with the appt
///
/// \param arrivalWindowEndTime the appointment arrival end time
///
+ (WPAppointmentArrivalCheckInViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext forCSN:(NSString * _Nonnull)csn appointmentTime:(NSDate * _Nonnull)displayTime andPatientIndex:(NSInteger)index andInitiatedWithBeacons:(BOOL)initiatedWithBeacons andEnableSnooze:(BOOL)enableSnooze andInitiatedFromSnooze:(BOOL)initiatedFromSnooze andInitiatedFromUser:(BOOL)userInitiated andOrgID:(NSString * _Nonnull)arrivedApptOrganizationID andFirstUserID:(NSString * _Nonnull)firstUserID andArrivalWindowEndTime:(NSDate * _Nullable)arrivalWindowEndTime SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillLayoutSubviews;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC7MyChart43WPAppointmentArrivalEventAuditWebServiceAPI")
@interface WPAppointmentArrivalEventAuditWebServiceAPI : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum ArrivalEventType : NSInteger;

SWIFT_CLASS("_TtC7MyChart32WPAppointmentArrivalEventTracker")
@interface WPAppointmentArrivalEventTracker : NSObject
/// Audit any stored arrival event as soon as possible
/// \param orgId org id
///
/// \param callback completion handler
///
+ (void)auditStoredArrivalEventWithOrgId:(NSString * _Nonnull)orgId;
/// Audit a specific arrival event if possible
/// \param callback completion handler
///
/// \param event event enum
///
/// \param csn csn of the visit
///
/// \param patientIndex patient index of the visit
///
/// \param selfArrivalMechanism self arrival mechanism
///
+ (void)auditArrivalEventWithEvent:(enum ArrivalEventType)event csn:(NSString * _Nonnull)csn patientIndex:(NSInteger)patientIndex selfArrivalMechanism:(NSInteger)selfArrivalMechanism;
/// Store an arrival event to User Defaults to be submitted on a later (generall the next login) date
/// \param arrivalEventType arrival Event type
///
/// \param orgid org id
///
/// \param csn csn
///
/// \param patientIndex patient index
///
/// \param isBeacon bool
///
+ (void)storeArrivalEventWithArrivalEventType:(enum ArrivalEventType)arrivalEventType orgId:(NSString * _Nullable)orgId csn:(NSString * _Nullable)csn patientIndex:(NSInteger)patientIndex isBeacon:(BOOL)isBeacon;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ArrivalEventType, open) {
  ArrivalEventTypeVisitTracked = 10,
  ArrivalEventTypeVisitNotified = 11,
  ArrivalEventTypeVisitPrompt = 12,
  ArrivalEventTypeVisitSnoozed = 13,
  ArrivalEventTypeVisitDeclined = 14,
  ArrivalEventTypeUnknown = 99,
};


/// A navigation controller for the workflow to setup Appointment Arrival. The setup workflow may include feature onboarding in addition to actually enabling appointment arrival (along with required OS permissions).
SWIFT_CLASS("_TtC7MyChart40WPAppointmentArrivalNavigationController")
@interface WPAppointmentArrivalNavigationController : WPRootNavigationController
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters.
/// \param userContext the current user context
///
/// \param rootViewController the view controller to display within this navigation controller
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext rootViewController:(UIViewController * _Nonnull)rootViewController OBJC_DESIGNATED_INITIALIZER;
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler;
/// Initializes an instance of WPAppointmentArrivalNavigationController with the provided parameters. This is for the arrival workflow
/// \param userContext the current user context
///
/// \param csn the appointment csn
///
/// \param isCSNEncrypted Is the provided CSN encrypted. Only respected in MO Appointment Arrival.
///
/// \param displayTime the appointment display time
///
/// \param index the patient index
///
/// \param initiatedWithBeacons Was this for a beacon
///
/// \param enableSnooze Should you enable snoozing
///
/// \param initiatedFromSnooze Was this created from a snooze
///
/// \param userInitiated Was this initiated from locationless arrival mechanism
///
/// \param arrivedApptOrganizationID the appointment org id
///
/// \param firstUserID The user id for the appt
///
/// \param arrivalWindowEndTime Date/time of the arrival end window
///
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext forCSN:(NSString * _Nonnull)csn andIsCSNEncrypted:(BOOL)isCSNEncrypted appointmentTime:(NSDate * _Nullable)displayTime andPatientIndex:(NSInteger)index andSelfArrivalMechanism:(enum WPAPIAppointmentSelfArrivalMechanism)selfArrivalMechanism andEnableSnooze:(BOOL)enableSnooze andInitiatedFromSnooze:(BOOL)initiatedFromSnooze andOrgID:(NSString * _Nonnull)arrivedApptOrganizationID andFirstUserID:(NSString * _Nonnull)firstUserID andArrivalWindowEndTime:(NSDate * _Nullable)arrivalWindowEndTime ticklerMethod:(NSString * _Nullable)ticklerMethod OBJC_DESIGNATED_INITIALIZER;
/// UINavigationController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// UINavigationController
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end


/// A view controller responsible for onboarding users to the Appointment Arrival feature.
SWIFT_CLASS("_TtC7MyChart44WPAppointmentArrivalOnboardingViewController")
@interface WPAppointmentArrivalOnboardingViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalOnboardingViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
+ (WPAppointmentArrivalOnboardingViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UIViewController
- (void)viewWillLayoutSubviews;
/// UIViewController
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPAppointmentArrivalOnboardingViewController (SWIFT_EXTENSION(MyChart)) <IWPPushNotificationsDelegate>
- (void)setPushNotificationsReturnedWith:(enum WPAPISetPushNotificationsStatusResult)status;
- (void)pushNotificationsReturnedWith:(enum WPAPIPushNotificationsStatus)status;
@end


@protocol PEComponentHostProtocol;

@interface WPAppointmentArrivalOnboardingViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
- (BOOL)shouldHideComponentHostEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


/// A view controller responsible for prompting the user for all required permissions and actually enabling Appointment Arrival.
SWIFT_CLASS("_TtC7MyChart45WPAppointmentArrivalPermissionsViewController")
@interface WPAppointmentArrivalPermissionsViewController : UIViewController
/// Creates an instance of WPAppointmentArrivalPermissionsViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
+ (WPAppointmentArrivalPermissionsViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nullable)(BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UIViewController
- (void)viewWillAppear:(BOOL)animated;
/// UIViewController
- (void)viewDidAppear:(BOOL)animated;
/// UIViewController
- (void)viewDidDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPAppointmentArrivalPermissionsViewController (SWIFT_EXTENSION(MyChart)) <IWPPushNotificationsDelegate>
- (void)setPushNotificationsReturnedWith:(enum WPAPISetPushNotificationsStatusResult)status;
- (void)pushNotificationsReturnedWith:(enum WPAPIPushNotificationsStatus)status;
@end


@interface WPAppointmentArrivalPermissionsViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart44WPAppointmentArrivalWebViewControllerManager")
@interface WPAppointmentArrivalWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WPOrganizationInfo;
@class WPAppointment;
@class WPComponentContainerViewController;

SWIFT_RESILIENT_CLASS("_TtC7MyChart40WPAppointmentAvsWebViewControllerManager")
@interface WPAppointmentAvsWebViewControllerManager : MyChartWebViewControllerManager
/// Creates the view intent for standard MO AVS.
+ (WPComponentContainerViewController * _Nullable)getViewControllerWithOrgInfo:(WPOrganizationInfo * _Nonnull)orgInfo appointment:(WPAppointment * _Nonnull)appointment isPastAdmission:(BOOL)isPastAdmission SWIFT_WARN_UNUSED_RESULT;
/// Creates the view intent for external to Epic MO AVS (i.e. H2G++).
+ (WPComponentContainerViewController * _Nullable)getDXRViewControllerWithReferenceID:(NSString * _Nonnull)referenceID dxoID:(NSString * _Nonnull)dxoID SWIFT_WARN_UNUSED_RESULT;
/// Creates the view intent for notes MO AVS, with options to hide the AVS tab.
+ (WPComponentContainerViewController * _Nullable)getNotesViewControllerWithOrgInfo:(WPOrganizationInfo * _Nonnull)orgInfo csn:(NSString * _Nullable)csn hideTabs:(BOOL)hideTabs isPastAdmission:(BOOL)isPastAdmission SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPMonitoredForArrivalAppointment;

@interface WPAppointmentLocationManager (SWIFT_EXTENSION(MyChart))
/// Swift-to-objc bridge to register with with the Swift-only FutureAppointmentsLoader
- (void)registerWithFutureAppointmentsLoader;
/// Swift-to-objc bridge to register with with the Swift-only FutureAppointmentsLoader
- (void)unregisterWithFutureAppointmentsLoader;
/// Should be called when leaving the code flow that sets up or updates appointment monitoring
/// \param appointment The appointment that is being monitored, or <code>nil</code> if no appointment is being monitored.
///
- (void)onLeavingAppointmentArrivalMonitoringFlowWithAppointment:(WPMonitoredForArrivalAppointment * _Nullable)appointment;
/// initiates the Hello Patient workflow using the shared instance of the FutureAppointmentsLoader
/// Will only do this if all the appropriate permissions and information required to set up appointment monitoring are available and enabled.
- (void)initiateAppointmentArrivalMonitoring;
@end


/// class with methods for web requests related to Appointment Requests
SWIFT_CLASS("_TtC7MyChart27WPAppointmentRequestService")
@interface WPAppointmentRequestService : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPAppointmentsComponentAPI (SWIFT_EXTENSION(MyChart))
- (void)requestAppointmentLiveActivities_internal;
@end


SWIFT_CLASS("_TtC7MyChart28WPAppointmentsFeatureManager")
@interface WPAppointmentsFeatureManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL panelAppointments2019Available;)
+ (BOOL)panelAppointments2019Available SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAppointmentSummaryAvailable;)
+ (BOOL)pastAppointmentSummaryAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAdmissionSummaryAvailable;)
+ (BOOL)pastAdmissionSummaryAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL appointmentDetailsAvailable;)
+ (BOOL)appointmentDetailsAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL crossOrganizationTelehealthAvailable;)
+ (BOOL)crossOrganizationTelehealthAvailable SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL pastAdmissionsAvailable;)
+ (BOOL)pastAdmissionsAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol WPAppointmentsListRowViewModel;

SWIFT_PROTOCOL("_TtP7MyChart21WPAppointmentsListRow_")
@protocol WPAppointmentsListRow
- (void)setWith:(id <WPAppointmentsListRowViewModel> _Nonnull)viewModel;
@end


SWIFT_PROTOCOL("_TtP7MyChart30WPAppointmentsListRowViewModel_")
@protocol WPAppointmentsListRowViewModel
@end

@class WPSpringboardInfo;
@class WPJustScheduledDetails;
@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC7MyChart32WPAppointmentsListViewController")
@interface WPAppointmentsListViewController : WPTableViewController
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
+ (WPAppointmentsListViewController * _Nonnull)instantiate SWIFT_WARN_UNUSED_RESULT;
+ (WPAppointmentsListViewController * _Nonnull)instantiateWithJustScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil contents:(NSMutableArray * _Nullable)contents SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@end

@class NSData;

@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPPatientVisitGuideLoadedProtocol>
- (void)visitGuideLoadedWithData:(NSData * _Nullable)data;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <CommunityDataRefreshViewDelegate>
- (void)launchRefreshView;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPCancelAppointmentDelegate>
- (void)cancelAppointmentDidNotConfirm;
- (void)cancelAppointmentConfirmed:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
- (void)cancelAppointmentConfirmFailure:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
@end


@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart)) <WPCustomFeatureLaunchListener>
- (BOOL)showExternalLinkPrompt SWIFT_WARN_UNUSED_RESULT;
- (void)onLaunchSuccess;
- (void)onLaunchFailure:(BOOL)showError;
@end


@class UITableView;
@class NSIndexPath;
@class UITableViewCell;

@interface WPAppointmentsListViewController (SWIFT_EXTENSION(MyChart))
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UIView * _Nullable)tableView:(UITableView * _Nonnull)tableView viewForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView estimatedHeightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForHeaderInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class WPAttachment;

SWIFT_CLASS("_TtC7MyChart32WPAttachmentUploadViewController")
@interface WPAttachmentUploadViewController : WPViewController
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initializes the view controller with a dcs ID and an optional file extension for the attachment
/// \param dcsID dcs ID of the attachment being launched
///
/// \param dcsExtension optional file extension for the attachment
///
- (nonnull instancetype)initWithAttachment:(WPAttachment * _Nonnull)attachment;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

/// Authentication status of the user
typedef SWIFT_ENUM(NSInteger, WPAuthenticationStatus, open) {
  WPAuthenticationStatusNotAuthenticated = 0,
  WPAuthenticationStatusLimitedAuthentication = 1,
  WPAuthenticationStatusFullyAuthenticated = 2,
};


/// View setting the attributes of WPBannerView.xib and generic button behavior
SWIFT_CLASS("_TtC7MyChart12WPBannerView")
@interface WPBannerView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart21WPBillingComponentAPI")
@interface WPBillingComponentAPI : NSObject <PEBillingComponentAPIProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOPaperlessSettingsFeatureIdentifier;)
+ (NSString * _Nonnull)MOPaperlessSettingsFeatureIdentifier SWIFT_WARN_UNUSED_RESULT;
- (enum PEComponentAccessResult)hasAccessForBillingWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getBillingViewControllerForMode:(enum PEBillingMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (enum PEComponentAccessResult)hasAccessForEstimatesWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getEstimatesViewControllerForMode:(enum PEEstimatesMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart39WPBillingDocumentLauncherViewController")
@interface WPBillingDocumentLauncherViewController : WPViewController
/// Initializes the view controller with a blob key, doc type , doc ID, billing system, ear ID, optional pes ID, and optional display name for the scan
/// \param blobKey Blob file name of the document, encrypted by the source organization
///
/// \param docType The type of document to check. 1  - Statements,  2 - Letters, 3 - Receipts
///
/// \param docId The  string identifier of document record
///
/// \param billSys The billing system that the document is associated with
///
/// \param earId The guarantor ID
///
/// \param pesId The estimate  ID. If not null, indicates that this is  an estimate letter
///
/// \param displayName The patient-friendly display name for the scan
///
- (nonnull instancetype)initWithBlobKey:(NSString * _Nonnull)blobKey andDocType:(NSString * _Nonnull)docType andDocId:(NSString * _Nonnull)docId andBillSys:(NSString * _Nonnull)billSys andEarId:(NSString * _Nonnull)earId andPesId:(NSString * _Nullable)pesId andDisplayName:(NSString * _Nullable)displayName OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart33WPBillingWebViewControllerManager")
@interface WPBillingWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart32WPBlobScanLauncherViewController")
@interface WPBlobScanLauncherViewController : WPViewController
/// Initializes the view controller with a blob key, order ID, and optional display name for the scan
/// \param blobKey Blob file name of the document, encrypted by the source organization
///
/// \param ordId Order that the blob scan is attached to, encrypted by the source organization
///
/// \param displayName The patient-friendly display name for the scan
///
/// \param h2gOrgId Org ID for the blob’s source organization, for H2G scans
///
- (nonnull instancetype)initWithBlobKey:(NSString * _Nonnull)blobKey andOrdId:(NSString * _Nonnull)ordId andDisplayName:(NSString * _Nullable)displayName andExternalOrgId:(NSString * _Nullable)h2gOrgId;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end



@interface WPCampaignViewController (SWIFT_EXTENSION(MyChart))
- (enum WPAPIDeepLinkExecuteResult)executeWithDeepLink:(NSString * _Nullable)deepLink in:(UINavigationController * _Nonnull)navigationController SWIFT_WARN_UNUSED_RESULT;
- (void)launchCampaignScheduling;
- (NSString * _Nullable)getErrorMessageForResult:(enum WPAPIDeepLinkExecuteResult)result SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPCancelAppointmentViewController (SWIFT_EXTENSION(MyChart))
- (void)handleRescheduleInLiveActivities:(NSArray<WPAppointment *> * _Nullable)appointmentsToCancel;
@end

@class NSMutableDictionary;

SWIFT_CLASS("_TtC7MyChart44WPCommunityUpdateMyAccountsWebViewController")
@interface WPCommunityUpdateMyAccountsWebViewController : WPCommunityManageMyAccountsWebViewController
- (nonnull instancetype)init;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (null_unspecified instancetype)init:(NSMutableDictionary * _Null_unspecified)parameters OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initForLinking OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// response class for getting H2G++ refresh data status
SWIFT_CLASS("_TtC7MyChart23WPCommunityUpdateStatus")
@interface WPCommunityUpdateStatus : NSObject
@property (nonatomic) NSInteger success;
@property (nonatomic, copy) NSString * _Nullable dxoId;
@property (nonatomic, copy) NSString * _Nullable orgName;
@property (nonatomic, copy) NSString * _Nullable focusWPR;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface WPComponentContainerViewController (SWIFT_EXTENSION(MyChart))
- (void)setDeepLinkLaunchParametersInternal:(NSDictionary<NSString *, NSString *> * _Nonnull)params;
@end



SWIFT_CLASS("_TtC7MyChart15WPCookieHandler")
@interface WPCookieHandler : NSObject <WebSessionEventDelegate>
- (void)onWebSessionReadyWithSuccess:(BOOL)success;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEPhonebookEntryProtocol;
@class WPServer;

/// Helper class for WPCoreAuthentication
SWIFT_CLASS("_TtC7MyChart26WPCoreAuthenticationHelper")
@interface WPCoreAuthenticationHelper : NSObject
/// Perform tasks required once full login has completed
+ (void)onLoginCompleted;
/// Tells the application to pend a deep link during the post-signup login workflow.
/// \param deepLinkUrl URL for the deep link to pend. If the epichttp:// prefix is missing, it will be added before creating the deep link.
///
+ (void)pendPostSignupDeepLink:(NSString * _Nonnull)deepLinkUrl;
/// Load the branding settings
+ (void)performLoadingBrandingTasksOnCompletion:(void (^ _Nonnull)(void))onCompletion;
/// Do any extra login tasks after the login is complete.  Including:
/// <ol>
///   <li>
///     Push Notification set up
///   </li>
/// </ol>
+ (void)performAsyncLoginTasksOnCompletion:(void (^ _Nonnull)(BOOL))completionHandler;
/// Attempt to login with a passcode
/// \param passcode The passcode to login with
///
/// \param phonebookEntry The org’s phonebook
///
/// \param onCompletion Listener block
///
+ (void)tryPasscodeLoginWithPasscode:(NSString * _Nonnull)passcode phonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSInteger))onCompletion;
+ (BOOL)isPasscodeSet:(WPServer * _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isBiometricAuthenticationSet:(WPServer * _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
/// Attempt to login with a biometric
/// \param phonebookEntry The org’s phonebook
///
/// \param onCompletion Listener block
///
+ (void)getTokenForBiometricWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))onCompletion;
/// Check if there is username recovery
/// \param phonebookEntry The org
///
///
/// returns:
/// if you can launch username
+ (BOOL)canLaunchUsernameRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Launch the username password recovery
/// \param phonebookEntry The orgs phonebook
///
/// \param mainVc The main VC to launch off
///
/// \param theme The theme of the org
///
+ (void)launchUsernameRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Check if there is password recovery
/// \param phonebookEntry The org
///
///
/// returns:
/// if you can launch password
+ (BOOL)canLaunchPasswordRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Launch the password recovery
/// \param phonebookEntry The orgs phonebook
///
/// \param mainVc The main VC to launch off
///
/// \param theme The theme of the org
///
+ (void)launchPasswordRecoveryWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Asks whether signup is allowed for the phonebook entry
+ (BOOL)canLaunchSignUpWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Tells the application to launch the sign up workflow for the specified server within the provided navigation controller
/// \param server selected server
///
/// \param navigationController hosting navigation controller
///
/// \param theme The theme of the org
///
+ (void)launchSignUpWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Can the password reset to launched
/// \param phonebookEntry For org
///
///
/// returns:
/// If it can be launched
+ (BOOL)canLaunchPasswordResetWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry SWIFT_WARN_UNUSED_RESULT;
/// Launch the password reset
/// \param phonebookEntry The org
///
/// \param mainVc The main VC to launch from
///
/// \param theme The theme of the org
///
+ (void)launchPasswordResetWorkflowWithPhonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry mainVc:(UIViewController * _Nonnull)mainVc theme:(id <PEThemeProtocol> _Nullable)theme;
/// Logs the user out with epichttp://logout as the default command
+ (void)logoutForIdleTimeout;
/// Logs the user out with epichttp://logout as the default command
+ (void)logout;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart31WPCovidStatusSpringboardManager")
@interface WPCovidStatusSpringboardManager : NSObject <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPCustomAppManager (SWIFT_EXTENSION(MyChart))
/// Perform the deep link for custom feature
/// \param navigationController The navigationController is perform the deep link
///
/// \param url the deep link url
///
+ (void)performDeepLinkForCustomFeatureIn:(UINavigationController * _Nonnull)navigationController withDeepLink:(NSString * _Nullable)deepLink;
@end

@class WPCustomerServiceSettingsTopic;

/// response class for messaging web service that gets customer service settings
SWIFT_CLASS("_TtC7MyChart33WPCustomerServiceSettingsResponse")
@interface WPCustomerServiceSettingsResponse : NSObject
/// List of topics
@property (nonatomic, copy) NSArray<WPCustomerServiceSettingsTopic *> * _Null_unspecified topics;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// class to represent customer service topics in settings loaded from the database
SWIFT_CLASS("_TtC7MyChart30WPCustomerServiceSettingsTopic")
@interface WPCustomerServiceSettingsTopic : NSObject
/// topic ID
@property (nonatomic, copy) NSString * _Nullable ID;
/// topic title
@property (nonatomic, copy) NSString * _Nullable name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for web requests related to Customer Service
SWIFT_CLASS("_TtC7MyChart30WPCustomerServiceWebServiceAPI")
@interface WPCustomerServiceWebServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <CustomerServiceCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Objective-C wrapper for the web service to load customer service settings
/// \param patientContext the callback object
///
/// \param encMsgInfo server encrypted workflow-specific information to load the right topics
///
- (void)getSettingsWithPatientContext:(PEPatientContext * _Nonnull)patientContext encMsgInfo:(NSString * _Nonnull)encMsgInfo orgInfo:(WPOrganizationInfo * _Nonnull)orgInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC7MyChart28WPDeepLinkHomeViewController")
@interface WPDeepLinkHomeViewController : WPViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// This class is responsible for the creation, access security, and execution of deep links
SWIFT_CLASS("_TtC7MyChart17WPDeepLinkManager")
@interface WPDeepLinkManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpUrlPrefix;)
+ (NSString * _Nonnull)EpicHttpUrlPrefix SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicMyChartUrlPrefix;)
+ (NSString * _Nonnull)EpicMyChartUrlPrefix SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgID;)
+ (NSString * _Nonnull)EpicHttpH2GOrgID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgName;)
+ (NSString * _Nonnull)EpicHttpH2GOrgName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EpicHttpH2GOrgLogoUrl;)
+ (NSString * _Nonnull)EpicHttpH2GOrgLogoUrl SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if there is a valid pending deep link
+ (BOOL)hasDeepLinkPendingLogin SWIFT_WARN_UNUSED_RESULT;
/// Is the specified URL a valid deep link. See also DeepLink.isValid()
+ (BOOL)isValidDeepLinkUrl:(NSString * _Nullable)url SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPDeepLinkManager (SWIFT_EXTENSION(MyChart))
/// Get the parameters dictionary for the url of the pending deepLink object, if it exists
+ (NSDictionary<NSString *, NSString *> * _Nullable)legacyGetPendingDeepLinkInfo SWIFT_WARN_UNUSED_RESULT;
/// Get the parameters dictionary for the url of the specified deep link
+ (NSDictionary<NSString *, NSString *> * _Nonnull)legacyGetParamsForLibrary:(NSString * _Nonnull)deepLinkUrl SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart34WPDeepLinkWebViewControllerManager")
@interface WPDeepLinkWebViewControllerManager : MyChartWebViewControllerManager
/// Initialize this manager using the deeplink that has launched the generic webViewController
- (nonnull instancetype)initWithDeepLinkUrl:(NSString * _Nullable)deepLinkUrl;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol CardStyleProtocol;
@protocol TextStyleProtocol;

/// Class representing the default theme for the application, which should be referenced when an organization theme is not available (i.e. prelogin).
SWIFT_CLASS("_TtC7MyChart14WPDefaultTheme")
@interface WPDefaultTheme : NSObject <PEThemeProtocol>
- (NSString * _Nullable)getBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns the default theme for the application
+ (WPDefaultTheme * _Nonnull)getTheme SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// PEThemeProtocol
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
- (id <CardStyleProtocol> _Nonnull)getCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <CardStyleProtocol> _Nonnull)getInteractiveCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <TextStyleProtocol> _Nonnull)getTextStyleWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@class WPGetDocumentResponse;

SWIFT_CLASS("_TtC7MyChart32WPDocumentLauncherViewController")
@interface WPDocumentLauncherViewController : WPViewController <WPShareDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the view controller with a dcs ID and an optional file extension for the document
/// \param dcsID dcs ID of the document being launched
///
/// \param dcsExtension optional file extension for the document
///
/// \param orgID H2G org ID for loading H2G documents
///
/// \param useSourceEncryption true if the DCS ID is encrypted at the source org for external documents, false if it’s encrypted at the local org
///
- (nonnull instancetype)initWithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID useSourceEncryption:(BOOL)useSourceEncryption;
/// Initializes the view controller with a dcs ID and an optional file extension for the document. This initializer is always used to download the document
/// \param dcsID dcs ID of the document being launched
///
/// \param dcsExtension optional file extension for the document
///
/// \param orgID H2G org ID for loading H2G documents
///
/// \param useSourceEncryption true if the DCS ID is encrypted at the source org for external documents, false if it’s encrypted at the local org
///
- (nonnull instancetype)initForDownloadwithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID useSourceEncryption:(BOOL)useSourceEncryption;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
/// Callback method that is called after getting the document from the server
/// \param response The response object containing the document object
///
- (void)didGetDocumentWithResponse:(WPGetDocumentResponse * _Nonnull)response;
- (void)viewWillDisappear:(BOOL)animated;
- (void)didShowShareDialog;
- (void)didCancelShareDialog;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart19WPDrivingDirections")
@interface WPDrivingDirections : NSObject
/// Launch maps from the specified address
/// \param address address to search for
///
+ (void)launchMapsWithAddress:(NSString * _Nonnull)address;
/// Launch maps from the specified address with the latitude/longitude as a starting search point
/// \param address address to search for
///
/// \param latitude latitude of starting point
///
/// \param longitude longitude of starting point
///
+ (void)launchMapsWithAddress:(NSString * _Nonnull)address latitude:(float)latitude longitude:(float)longitude;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart49WPECheckInAdditionalStepsWebViewControllerManager")
@interface WPECheckInAdditionalStepsWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartWebParameter;

SWIFT_RESILIENT_CLASS("_TtC7MyChart34WPECheckInWebViewControllerManager")
@interface WPECheckInWebViewControllerManager : MyChartWebViewControllerManager
+ (WPComponentContainerViewController * _Nullable)getViewControllerWithParameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters isEVisit:(BOOL)isEVisit isInpatient:(BOOL)isInpatient orgInfo:(WPOrganizationInfo * _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
+ (NSDictionary<NSString *, NSString *> * _Nonnull)getDeepLinkParamsForCSN:(NSString * _Nonnull)csn isCsnEncrypted:(BOOL)isCsnEncrypted orgInfo:(WPOrganizationInfo * _Nullable)orgInfo isEVisit:(BOOL)isEVisit isInpatient:(BOOL)isInpatient SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart32WPEVisitWebViewControllerManager")
@interface WPEVisitWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPComponentContainerViewController * _Nullable)getViewController SWIFT_WARN_UNUSED_RESULT;
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPEncounter;

@interface WPEncounterViewController (SWIFT_EXTENSION(MyChart))
- (void)ensureAllPDFDataIsLoadedWithAppt:(WPEncounter * _Nonnull)appt;
@end


/// View controller that forwards an epichttp-based FDI feature to the corresponding view
SWIFT_CLASS("_TtC7MyChart27WPFDILauncherViewController")
@interface WPFDILauncherViewController : UIViewController
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull relayKey;)
+ (NSString * _Nonnull)relayKey SWIFT_WARN_UNUSED_RESULT;
/// Initialize and FDI activity with at least one URL specified
/// \param fdiId The FDI to launch
///
- (nonnull instancetype)initWithFdiId:(NSString * _Nonnull)fdiId deepLinkURL:(NSString * _Nonnull)deepLinkURL h2gOrgId:(NSString * _Nullable)h2gOrgId OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)didEnterBackground;
/// Returns the correct FDI to use based on Epichttp link
/// \param url epichttp link containing either a webid or an iosid
///
///
/// returns:
/// the correct FDI to launch. Nil if invalid.
+ (NSString * _Nullable)parseFdiFromEpichttp:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Returns the correct URL to use based on Epichttp link
/// \param url epichttp link containing a url value
///
///
/// returns:
/// the correct URL to launch. Nil if invalid.
+ (NSString * _Nullable)parseUrlFromEpichttp:(NSString * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface WPFDILauncherViewController (SWIFT_EXTENSION(MyChart)) <WPCustomFeatureLaunchListener>
- (BOOL)showExternalLinkPrompt SWIFT_WARN_UNUSED_RESULT;
- (void)onLaunchSuccess;
- (void)onLaunchFailure:(BOOL)showWebViewSupportError;
@end



SWIFT_CLASS("_TtC7MyChart31WPFamilyAccessWebViewController")
@interface WPFamilyAccessWebViewController : WPActivityWebViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)init;
- (NSInteger)getWebViewPatientIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Serialized class corresponding to CustomFeature.cs to be used for objective C based webservices.
/// When making updates to this object, consider WPCheckInAppointmentResponse.swift which houses the same object representation for swift based webservices.
SWIFT_CLASS("_TtC7MyChart16WPFeatureDetails")
@interface WPFeatureDetails : WPObject
@property (nonatomic, copy) NSString * _Nullable featureId;
@property (nonatomic, copy) NSString * _Nullable label;
@property (nonatomic, copy) NSString * _Nullable icon;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart36WPFutureAppointmentCaseProcedureView")
@interface WPFutureAppointmentCaseProcedureView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart29WPFutureAppointmentDetailView")
@interface WPFutureAppointmentDetailView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (void)buttonTapped;
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
@end

@class WPWaitListEntry;

SWIFT_CLASS("_TtC7MyChart40WPFutureAppointmentDetailsViewController")
@interface WPFutureAppointmentDetailsViewController : WPViewController
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ArriveAppointmentKey;)
+ (NSString * _Nonnull)ArriveAppointmentKey SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic) BOOL startVideoVisitOnLoad;
/// Instantiates the Future Appointment Details view controller
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param appointment appointment
///
/// \param waitListEntry linked wait list entry for the appointment
///
///
/// returns:
/// The future appointment details view controller
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithAppointment:(WPAppointment * _Nonnull)appointment SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails isEVisit:(BOOL)isEVisit SWIFT_WARN_UNUSED_RESULT;
/// Instantiator that all other instantiation functions should call.
/// warning:
/// DEPRECATED - Use the DeepLinkManager to launch this activity instead of creating a view controller.
/// \param csn appointment csn
///
/// \param isCsnEncrypted true if csn is encrypted
///
/// \param organizationInfo appointment organization info
///
/// \param waitListEntry wait list entry linked to appointment
///
/// \param justScheduled true if the appointment was just scheduled from the scheduling workflow
///
+ (WPFutureAppointmentDetailsViewController * _Nonnull)instantiateWithCsn:(NSString * _Nullable)csn isCsnEncrypted:(BOOL)isCsnEncrypted organizationInfo:(WPOrganizationInfo * _Nullable)organizationInfo waitListEntry:(WPWaitListEntry * _Nullable)waitListEntry justScheduledDetails:(WPJustScheduledDetails * _Nullable)justScheduledDetails shouldArriveAppointment:(BOOL)shouldArriveAppointment isEVisit:(BOOL)isEVisit SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)reloadData;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPOnDemandVideoVisitAlertDelegate>
- (void)showOnDemandVideoVisitAlert:(UIAlertController * _Null_unspecified)alert;
@end

@class EKEventEditViewController;

@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <EKEventEditViewDelegate>
- (void)eventEditViewController:(EKEventEditViewController * _Nonnull)controller didCompleteWithAction:(EKEventEditViewAction)action;
@end


@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPPatientVisitGuideLoadedProtocol>
- (void)visitGuideLoadedWithData:(NSData * _Nullable)data;
@end






@interface WPFutureAppointmentDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPCancelAppointmentDelegate>
- (void)cancelAppointmentDidNotConfirm;
- (void)cancelAppointmentConfirmed:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
- (void)cancelAppointmentConfirmFailure:(NSArray * _Nullable)cancelledAppointments withCancelType:(WPCancelType)type;
@end

@class WPGenericAlertInfo;

SWIFT_CLASS("_TtC7MyChart33WPFutureAppointmentDisplayManager")
@interface WPFutureAppointmentDisplayManager : NSObject
+ (WPGenericAlertInfo * _Nonnull)getJustScheduledAlertInfoWithJustScheduledDetails:(WPJustScheduledDetails * _Nonnull)justScheduledDetails apptDetailsAvailable:(BOOL)apptDetailsAvailable SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart29WPFutureAppointmentHeaderView")
@interface WPFutureAppointmentHeaderView : UIStackView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@protocol ImageDataSource;

@interface WPFutureAppointmentHeaderView (SWIFT_EXTENSION(MyChart)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)forSource;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)forSource;
@end

@class WPCardView;
@class NSLayoutConstraint;
@protocol WPViewContainingWebViewDelegate;

SWIFT_CLASS("_TtC7MyChart42WPFutureAppointmentPatientInstructionsView")
@interface WPFutureAppointmentPatientInstructionsView : UIView
@property (nonatomic, weak) IBOutlet WPCardView * _Null_unspecified rootView;
@property (nonatomic, weak) IBOutlet UIStackView * _Null_unspecified stackView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified headerLabel;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified trailingPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified bottomPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified topPaddingConstraint;
@property (nonatomic, weak) IBOutlet NSLayoutConstraint * _Null_unspecified leadingPaddingConstraint;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// This sets the delegate for the view containing web view so that we can present a web view controller if needed
- (void)setNavigationDelegate:(id <WPViewContainingWebViewDelegate> _Nullable)delegate;
- (void)populateWithContent:(NSString * _Nonnull)content isHtml:(BOOL)isHtml includeHeader:(BOOL)includeHeader;
@end


@interface WPFutureAppointmentPatientInstructionsView (SWIFT_EXTENSION(MyChart)) <WPViewContainingWebViewDelegate>
- (void)navigateToAllowedHostForRequest:(NSURLRequest * _Nullable)request allowedHosts:(NSArray * _Nullable)allowedHosts;
- (void)openUrlInExternalBrowser:(NSURL * _Nullable)url;
@end


SWIFT_CLASS("_TtC7MyChart31WPFutureAppointmentProviderView")
@interface WPFutureAppointmentProviderView : UIView
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@end


SWIFT_CLASS("_TtC7MyChart27WPFutureAppointmentTimeView")
@interface WPFutureAppointmentTimeView : UIView
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)layoutSubviews;
@property (nonatomic, copy) NSArray * _Nullable accessibilityElements;
@end


SWIFT_CLASS("_TtC7MyChart33WPFutureAppointmentVideoVisitView")
@interface WPFutureAppointmentVideoVisitView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


/// response class for getting H2G++ refresh data status
SWIFT_CLASS("_TtC7MyChart34WPGetCommunityUpdateStatusResponse")
@interface WPGetCommunityUpdateStatusResponse : NSObject
@property (nonatomic, copy) NSArray<WPCommunityUpdateStatus *> * _Nonnull communityUpdateStatuses;
@end


/// API class with methods for WebRequests related to Get Personal Notes
SWIFT_CLASS("_TtC7MyChart28WPGetPersonalNotesServiceAPI")
@interface WPGetPersonalNotesServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <GetPersonalNotesCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Get list of personal notes.
/// Callers should first ensure that the health goal functionality is available by checking the IC feature bit
/// \param patientContext the patient context
///
- (void)getPersonalNotesWithPatientContext:(PEPatientContext * _Nonnull)patientContext noteType:(enum PersonalNoteType)noteType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WPPersonalNotesInfo;

/// Response object for getPersonalNotes service call
SWIFT_CLASS("_TtC7MyChart33WPGetPersonalNotesServiceResponse")
@interface WPGetPersonalNotesServiceResponse : NSObject
/// Note
@property (nonatomic, strong) WPPersonalNotesInfo * _Null_unspecified personalNotes;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart14WPHKDeviceInfo")
@interface WPHKDeviceInfo : WPDeviceInfo
@property (nonatomic, copy) NSString * _Nullable platform;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

enum WPHSUpdateStatus : NSInteger;

SWIFT_PROTOCOL("_TtP7MyChart25WPHSPatientUpdateProtocol_")
@protocol WPHSPatientUpdateProtocol
@property (nonatomic, readonly) enum WPHSUpdateStatus status;
@end

typedef SWIFT_ENUM(NSInteger, WPHSUpdateStatus, open) {
  WPHSUpdateStatusReconciled = 0,
  WPHSUpdateStatusAdded = 1,
  WPHSUpdateStatusRemoved = 3,
};


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPHealthSummaryWebViewControllerManager")
@interface WPHealthSummaryWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPHomeTabBarViewController (SWIFT_EXTENSION(MyChart))
- (void)popViewControllerToLoginAnimated:(BOOL)animated;
@end

@class AnimatedImageView;

SWIFT_CLASS("_TtC7MyChart25WPIconTextButtonViewModel")
@interface WPIconTextButtonViewModel : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly) BOOL keepImageOriginalColor;
@property (nonatomic, readonly, strong) AnimatedImageView * _Nullable animationImage;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum WPScheduleWebViewMode : NSInteger;

/// Class that holds information for a just-scheduled visit
SWIFT_CLASS("_TtC7MyChart22WPJustScheduledDetails")
@interface WPJustScheduledDetails : NSObject
/// Sets all of the just scheduled details fields
/// \param justScheduled true if we are just went through the scheduling workflow and scheduled an appt or appt request
///
/// \param mode enum used for display strings.
///
/// \param numAppts the number of appointments that were scheduled
///
+ (WPJustScheduledDetails * _Nonnull)instantiateWithJustScheduled:(BOOL)justScheduled mode:(enum WPScheduleWebViewMode)mode numAppts:(NSInteger)numAppts SWIFT_WARN_UNUSED_RESULT;
/// Sets all of the just scheduled details fields
/// \param userInfo NSDictionary that follows the deep link userInfo pattern
///
+ (WPJustScheduledDetails * _Nonnull)instantiateWithUserInfo:(NSDictionary * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Puts the just scheduled details object into an NSDictionary to use with deep link’s userInfo pattern
- (NSDictionary * _Nonnull)toUserInfo SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// enum describing what scheduling workflow just took place
typedef SWIFT_ENUM(NSInteger, WPScheduleWebViewMode, open) {
  WPScheduleWebViewModeUnknown = 0,
  WPScheduleWebViewModeSchedule = 1,
  WPScheduleWebViewModeReschedule = 2,
  WPScheduleWebViewModeApptRequest = 3,
};


SWIFT_CLASS("_TtC7MyChart26WPLettersWebViewController")
@interface WPLettersWebViewController : WPActivityWebViewController
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Modal view controller that shows linking progress between phone and watch
SWIFT_CLASS("_TtC7MyChart30WPLinkAppleWatchViewController")
@interface WPLinkAppleWatchViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
@end


SWIFT_CLASS("_TtC7MyChart22WPLoadingTableViewCell")
@interface WPLoadingTableViewCell : UITableViewCell <WPAppointmentsListRow>
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setWith:(id <WPAppointmentsListRowViewModel> _Nonnull)viewModel;
@end


@interface WPLoginToken (SWIFT_EXTENSION(MyChart))
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID)
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
- (void)removeSecondaryLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID)
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
- (void)removeSecondaryLogin;
/// Removes the login token used for passcode login
///
/// returns:
/// true if the passcode login token was found and  successfully removed, false otherwise
- (void)removePasscodeLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for passcode login
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
- (void)removePasscodeLogin;
/// Removes the login token used for biometric login
///
/// returns:
/// true if the biometric login token was found and  successfully removed, false otherwise
- (void)removeBiometricLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for biometric login
/// remark:
/// This operation can fail, if you need the result of the operation, consider using the async throws version of this method that returns a Bool
- (void)removeBiometricLogin;
@end


SWIFT_CLASS("_TtC7MyChart16WPLoginUtilities")
@interface WPLoginUtilities : NSObject
/// Returns a previously saved Username for a given organization.
/// \param organization the organization
///
///
/// returns:
/// the saved username
+ (NSString * _Nonnull)getSavedUsernameForOrganization:(WPServer * _Nonnull)organization SWIFT_WARN_UNUSED_RESULT;
/// Saves away a Username for a given organization into settings. If the passed in userName is empty, then we remove the setting altogether.
/// \param organization the organization for which to save the username
///
/// \param userName the username to save
///
+ (void)setSavedUsernameForOrganization:(WPServer * _Nonnull)organization userName:(NSString * _Nonnull)userName;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEComponentHostParentDelegate;

SWIFT_CLASS("_TtC7MyChart33WPMedicationsComponentBridgingAPI")
@interface WPMedicationsComponentBridgingAPI : NSObject <PEMedicationsComponentBridgingAPIProtocol>
/// get the view controller for MO meds
/// \param rxID id of a med
///
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxID:(NSString * _Nullable)rxID eorgID:(NSString * _Nullable)eorgID SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for refilling a specific medication (used for alerts)
/// \param rxID id of the medication being refilled
///
- (UIViewController * _Nullable)getMedicationsViewControllerForRefillWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for outpatient medications in MyChart Now context
- (UIViewController * _Nullable)getMedicationsViewControllerForMCNOutPatientWithParentDelegate:(id <PEComponentHostParentDelegate> _Nullable)parentDelegate SWIFT_WARN_UNUSED_RESULT;
/// Get the view controller for MO medication based on certain criterias
/// \param rxId id of a med
///
/// \param isMCNOutPatientContext if the MO med view controller will show outpatient meds in a  MyChart Now context
///
/// \param isRefillContext if the MO med view controller is used in a med refill context
///
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxId:(NSString * _Nullable)rxId isMCNOutPatientContext:(BOOL)isMCNOutPatientContext isRefillContext:(BOOL)isRefillContext parentDelegate:(id <PEComponentHostParentDelegate> _Nullable)parentDelegate eorgID:(NSString * _Nullable)eorgID SWIFT_WARN_UNUSED_RESULT;
/// Checks if the local organization has MO disabled, and if they are on a version supporting MO Medications.
- (BOOL)shouldDisableOutpatientMeds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart43WPMedicationsTabbedWebViewControllerManager")
@interface WPMedicationsTabbedWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart37WPMedicationsWebViewControllerManager")
@interface WPMedicationsWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart33WPMedsPopoutViewControllerManager")
@interface WPMedsPopoutViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIImagePickerController;

@interface WPMessageAttachmentListViewController (SWIFT_EXTENSION(MyChart))
- (BOOL)mediaTypeIsImage:(NSString * _Nonnull)typeString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)mediaTypeIsVideo:(NSString * _Nonnull)typeString SWIFT_WARN_UNUSED_RESULT;
- (UIImagePickerController * _Nonnull)getImagePickerWithSourceType:(enum UIImagePickerControllerSourceType)sourceType allowImages:(BOOL)allowImages allowVideos:(BOOL)allowVideos SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPMessageViewController (SWIFT_EXTENSION(MyChart))
- (enum WPAPIDeepLinkExecuteResult)executeWithDeepLink:(NSString * _Nonnull)deepLink in:(UINavigationController * _Nonnull)navigationController SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getErrorMessageForResult:(enum WPAPIDeepLinkExecuteResult)result SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPMessagesTabBarController (SWIFT_EXTENSION(MyChart))
@property (nonatomic, readonly) BOOL supportsH2GLaunchContext;
@property (nonatomic, readonly) BOOL launchesH2GContextLocally;
@end

@class WPMessageViewer;

SWIFT_CLASS("_TtC7MyChart14WPMessagesUtil")
@interface WPMessagesUtil : NSObject
+ (NSArray * _Nonnull)getDisplayableMessageViewersForDetailsWithViewers:(NSArray<WPMessageViewer *> * _Nonnull)viewers showViewersSetting:(WPMessageViewersSetting)showViewersSetting userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
+ (NSArray * _Nonnull)getDisplayableMessageViewersForComposeReplyWithViewers:(NSArray<WPMessageViewer *> * _Nonnull)viewers showViewersSetting:(WPMessageViewersSetting)showViewersSetting confidentialMessagingSetting:(WPConfidentialitySetting)confidentialMessagingSetting userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<WPMessageViewer *> * _Nonnull)reconstructSelectedFromGenericViewersWithSelectedViewers:(NSArray<WPMessageViewer *> * _Nonnull)selectedViewers defaultViewers:(NSArray<WPMessageViewer *> * _Nonnull)defaultViewers userWPR:(NSString * _Nonnull)userWPR patientWPR:(NSString * _Nonnull)patientWPR SWIFT_WARN_UNUSED_RESULT;
/// Open the attachment for preview. If the attachment type is unsupported for preview, will prompt the user to save/share it instead
/// \param attachment attachment object
///
/// \param fromViewController the viewController to be used to present the preview
///
/// \param usingSourceView The view serving as the source of the attachment being shared, used as an anchor for the iOS share UI on iPads
///
/// \param completion The closure to invoke once the attachment has been opened
///
+ (void)openAttachment:(WPAttachment * _Nonnull)attachment fromViewController:(UIViewController * _Nonnull)viewController usingSourceView:(UIView * _Nonnull)sourceView completion:(void (^ _Nullable)(void))completion;
/// Returns navigation controller to preview the attachment. If the type is unsupported for preview, will return a nil
/// \param attachment attachment object
///
///
/// returns:
///
/// <ul>
///   <li>
///     navigation controller to preview the attachment
///   </li>
/// </ul>
+ (WPRootNavigationController * _Nullable)getAttachmentViewerRootNavigationControllerWithAttachment:(WPAttachment * _Nonnull)attachment SWIFT_WARN_UNUSED_RESULT;
/// Display a share dialog that would allow a user to save/share the attachment
/// \param attachment The attachment object being shared
///
/// \param fromViewController The view controller that will present the share dialog
///
/// \param usingSourceView The view serving as the source of the attachment being shared, used as an anchor for the iOS share UI on iPads
///
+ (void)shareAttachment:(WPAttachment * _Nonnull)attachment fromViewController:(WPViewController * _Nullable)viewController usingSourceView:(UIView * _Nullable)sourceView;
/// Constructs a WPAttachment object from an Apple filesystem URL. Currently used to generate an attachment object containing the PDF data stored in Apple’s filesystem
/// \param url The URL of the document within Apple’s file system
///
+ (WPAttachment * _Nullable)getAttachmentFromAppleFileURLWithUrl:(NSURL * _Nonnull)url SWIFT_WARN_UNUSED_RESULT;
/// Checks if a given document is a PDF shared from Apple Health
/// \param fileUrl URL describing where the file is stored in device storage
///
///
/// returns:
/// true if the file is in the inbox directory and matches the Apple Health naming standard (iOS 16+), false otherwise
+ (BOOL)isValidAppleHealthPDF:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// WPMyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
SWIFT_CLASS("_TtC7MyChart30WPMyChartBrandingConfiguration")
@interface WPMyChartBrandingConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Indicates whether or not there is currently a valid configuration for branding shared with the website.
- (BOOL)hasConfiguration SWIFT_WARN_UNUSED_RESULT;
/// Returns the branded color that a customer has configured. Returns nil if not configured.
/// \param brandedColor the PEBrandedColor for which to obtain a color
///
- (UIColor * _Nullable)getColorIfBrandedFor:(enum PEBrandedColor)brandedColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the color to use for the provided PEBrandedColor.  The returned color is based on the hierarchy documented with the brandedColorsMap.
/// \param brandedColor the PEBrandedColor for which to obtain a color
///
- (UIColor * _Nonnull)getColorFor:(enum PEBrandedColor)brandedColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the URL for the header background image.
- (NSString * _Nullable)getHeaderBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns the base image URL for general image resources.
- (NSString * _Nullable)getBaseImageUrl SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasAcordexLicense SWIFT_WARN_UNUSED_RESULT;
/// Returns the set of colors used to help distinguish and identify people that the user can access.
- (NSArray<UIColor *> * _Nonnull)getColorsForPeople SWIFT_WARN_UNUSED_RESULT;
/// Returns the set of colors used to help distinguish and identify people that the user can access.
- (NSArray<UIColor *> * _Nonnull)getTextColorsForPeople SWIFT_WARN_UNUSED_RESULT;
/// Returns the color in the set of people colors that corresponds to the provided color index.
/// \param colorIndex the color index (1 - 7) for a color in the set of people colors
///
- (UIColor * _Nullable)getColorForPersonAtColorIndex:(NSInteger)colorIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the color in the set of people colors that corresponds to the provided color index.
/// \param colorIndex the color index (1 - 7) for a color in the set of people colors
///
- (UIColor * _Nullable)getTextColorForPersonAtColorIndex:(NSInteger)colorIndex SWIFT_WARN_UNUSED_RESULT;
/// Returns the default color for the provided person. The default color should be used if a color index is not on file for a given person.
/// \param person the person to determine a default color for
///
- (UIColor * _Nonnull)getDefaultColorForPerson:(id <PEPersonProtocol> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Returns the default text color for the provided person. The default color should be used if a color index is not on file for a given person
/// \param person the person to determine a default color for
///
- (UIColor * _Nonnull)getDefaultTextColorForPerson:(id <PEPersonProtocol> _Nonnull)person SWIFT_WARN_UNUSED_RESULT;
/// Returns the color index of a color in the set of colors for people that matches the provided color, or 0 if a match is not found.
/// \param color the color to search for in the set of colors for people
///
- (NSInteger)getColorIndexForPersonColor:(UIColor * _Nullable)color SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPMyChartBrandingConfiguration (SWIFT_EXTENSION(MyChart)) <PEThemeProtocol>
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
- (id <CardStyleProtocol> _Nonnull)getCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <CardStyleProtocol> _Nonnull)getInteractiveCardStyle SWIFT_WARN_UNUSED_RESULT;
- (id <TextStyleProtocol> _Nonnull)getTextStyleWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
@end


/// Helper class to load the MyChart Branding configuration from the website
SWIFT_CLASS("_TtC7MyChart36WPMyChartBrandingConfigurationLoader")
@interface WPMyChartBrandingConfigurationLoader : NSObject
/// Loads the MyChartBrandingConfiguration using the provided website URL. MyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
/// \param websiteUrl the URL of the corresponding MyChart website (e.g. “https://server.com/MyChart/”)
///
/// \param completion the completion block called when initialization is complete
///
+ (void)loadLegacyBrandingConfigurationWithWebsiteUrl:(NSString * _Nonnull)websiteUrl completion:(void (^ _Nonnull)(WPMyChartBrandingConfiguration * _Nullable))completion;
/// Loads the MyChartBrandingConfiguration using the provided website URL. MyChartBrandingConfiguration represents branding configuration shared between the website and mobile applications, first available with May 2020.
/// \param websiteUrl the URL of the corresponding MyChart website (e.g. “https://server.com/MyChart/”)
///
/// \param hasNewBrandingPaths If it has the new branding paths look up 
///
/// \param brandingLocale The branding locale 
///
/// \param completion the completion block called when initialization is complete
///
+ (void)loadLegacyBrandingConfigurationWithWebsiteUrl:(NSString * _Nonnull)websiteUrl hasNewBrandingPaths:(BOOL)hasNewBrandingPaths brandingLocale:(NSString * _Nonnull)brandingLocale completion:(void (^ _Nonnull)(WPMyChartBrandingConfiguration * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEAppleWatchAPIs;
@class UIBarButtonItem;
@protocol BrandedColorProviderProtocol;
@protocol BrandedAssetsProviderProtocol;

SWIFT_CLASS("_TtC7MyChart24WPMyChartRefComponentAPI")
@interface WPMyChartRefComponentAPI : NSObject <PEMyChartRefComponentAPIProtocol>
/// Container for apple watch APIs
@property (nonatomic, readonly, strong) id <PEAppleWatchAPIs> _Nonnull appleWatch;
///
/// returns:
/// The application key for menu filtering
- (NSArray<NSString *> * _Nonnull)getApplicationKeys SWIFT_WARN_UNUSED_RESULT;
/// Sets the default selected person to bypass the splash screen
/// \param userId the user who is logging in
///
/// \param newDefaultWprId the default selected person’s WPR
///
- (void)setDefaultPersonWprIdFor:(NSString * _Nonnull)userId newDefaultWprId:(NSString * _Nullable)newDefaultWprId;
/// Gets the default selected person when bypassing the splash screen
/// \param userId the user who is logging in
///
///
/// returns:
/// the default selected person’s WPR
- (NSString * _Nullable)getDefaultPersonWprIdFor:(NSString * _Nonnull)userId forHomepageLaunch:(BOOL)forHomepageLaunch SWIFT_WARN_UNUSED_RESULT;
/// Checks for secondary login methods to set up
/// \param phonebook a PEPhonebookEntry that gets converted to a WPServer. If nil, uses the current server
///
///
/// returns:
/// The raw value of PESecondaryLoginMethod
- (NSInteger)getAvailableSecondaryLoginMethodsToSetUpRawValue:(id <PEPhonebookEntryProtocol> _Nullable)phonebook SWIFT_WARN_UNUSED_RESULT;
/// Do not show the feed item for secondary login, even if not set
- (void)setPreventSecondaryLoginAlert:(BOOL)preventAlert;
/// Has the user requested not to see the alert for secondary login?
- (BOOL)getPreventSecondaryLoginAlert SWIFT_WARN_UNUSED_RESULT;
/// Get the currently monitored CSN
///
/// returns:
/// returns the CSN, empty string if no monitored appt
- (NSString * _Nonnull)getMonitoredAppointmentCSN SWIFT_WARN_UNUSED_RESULT;
/// Increments the number of logins completed by the user for this device and installation
- (void)incrementLoginCounter;
/// Sets flag that the app review card has been dismissed
- (void)setAppReviewCardDismissWithDismissed:(BOOL)dismissed;
/// Determines if the app review card should be requested from the server
- (BOOL)shouldDisplayAppReviewCard SWIFT_WARN_UNUSED_RESULT;
/// Sets flag that the background app refresh card has been dismissed
- (void)setBackgroundAppRefreshCardDismissalFlag:(BOOL)isDismissed;
/// Checks if the background app refresh card has been dismissed before
- (BOOL)getBackgroundAppRefreshCardDismissalFlag SWIFT_WARN_UNUSED_RESULT;
/// Helper method that checks if we have viewed secondary login onboarding
/// <ul>
///   <li>
///     Returns True if the user has viewed the secondary login
///   </li>
/// </ul>
- (BOOL)hasUserViewedSecondaryLogin SWIFT_WARN_UNUSED_RESULT;
- (void)setSecondaryLoginViewed;
/// Saves the given email and phone to the users notification preferences
- (void)saveNotificationPreferencesWithEmail:(NSString * _Nonnull)email phone:(NSString * _Nonnull)phone;
/// Returns whether the current push notification is a hand off
- (BOOL)isDeepLinkComingFromHandOff SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the current deep link is coming from push notification
- (BOOL)isDeepLinkComingFromPushNotification SWIFT_WARN_UNUSED_RESULT;
/// Returns whether secondary login is enabled at the current organization for a user other than the one currently logged in
- (BOOL)isSecondaryLoginEnabledForOtherUser SWIFT_WARN_UNUSED_RESULT;
/// Removes the secondary login token for the current org
- (void)removeSecondaryLoginWithOrgId:(NSString * _Nullable)orgId completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// <ul>
///   <li>
///     Returns a boolean indicating whether the current user has a RAT for prelogin Covid Status
///   </li>
/// </ul>
- (BOOL)hasPreloginCovidStatusToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether this is a self-submitted build using the homepage
- (BOOL)isSelfSubmittedCustomerUsingHomepage SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether or not a self-submitted customer has disabled the nav bar logo
- (BOOL)shouldHideEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Get all the cached phonebook entries
- (NSArray<id <PEPhonebookEntryProtocol>> * _Nullable)getCachedPhonebookEntries SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getTestLibraryExpiryMessage SWIFT_WARN_UNUSED_RESULT;
/// Gets the EULA as a utf8-encoded encoded string from the EULA file
/// <ul>
///   <li>
///     Returns the EULA string for displaying the EULA
///   </li>
/// </ul>
- (NSString * _Nullable)getEulaString SWIFT_WARN_UNUSED_RESULT;
/// Gets the privacy policy URL for onboarding
/// <ul>
///   <li>
///     Returns the URL string for the privacy policy
///   </li>
/// </ul>
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
/// Sets the EULA as accepted after onboarding
- (void)setEulaAccepted;
/// Gets the notifications status for onboarding
/// <ul>
///   <li>
///     Returns true if the notifications screen has been viewed or is unavailable
///   </li>
/// </ul>
- (BOOL)hasUserViewedNotificationsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Sets the notifications screen as viewed after onboarding
- (void)setNotificationsOnboardingViewed;
/// Gets the location status for onboarding
/// <ul>
///   <li>
///     Returns true if the location screen has been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedLocationOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Sets the location screen as viewed after onboarding
- (void)setLocationOnboardingViewed;
/// Gets the status for all three pre-login onboarding steps
/// <ul>
///   <li>
///     Returns true if all three steps (EULA, notifications, location) have been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedPreLoginOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Makes a location always auth request
- (void)makeLocationAuthorizationRequest;
/// Makes a location while using auth request
- (void)makeLocationWhileUsingAuthorizationRequest;
/// Gets the authorization status of location
/// <ul>
///   <li>
///     Returns the current CLAuthorizationStatus
///   </li>
/// </ul>
- (CLAuthorizationStatus)getLocationAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
/// Gets branded app settings for push notifications
/// <ul>
///   <li>
///     Returns true if supportsBrandedAppPushNotifications is true
///   </li>
/// </ul>
- (BOOL)supportsPushNotifications SWIFT_WARN_UNUSED_RESULT;
/// Set user declined org’s terms, conditions, proxy statement
- (void)setUserDeclinedOrgTermsConditions;
/// Get create passcode workflow for onboarding
- (UIViewController * _Nullable)getPasscodeWorkflow SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether biometrics for current user and org were enabled
- (void)setBiometrics;
- (BOOL)getBiometrics SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isAnimatedBackgroundDisabled SWIFT_WARN_UNUSED_RESULT;
/// Gets the string for the UserInfo entry for a biometrics workflow notification during onboarding, fired after storing biometrics
/// <ul>
///   <li>
///     Returns true if storing biometrics was successful
///   </li>
/// </ul>
- (NSString * _Nonnull)getUserInfoStringForBiometricsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Clears all files from the MyChart cache
/// <ul>
///   <li>
///     Returns true if successful, false otherwise
///   </li>
/// </ul>
- (BOOL)clearCachedFiles;
/// Get the display name of the app, i.e. MyChart.
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
- (void)removeWebServerFromPreferredWithOrgId:(NSString * _Nonnull)orgId;
/// Sets the root nav controller to always use dark status bar icons
- (void)setNavControllerOnboardingOverride:(BOOL)status;
/// Returns whether the language picker is available
- (BOOL)isLanguagePickerAvailable SWIFT_WARN_UNUSED_RESULT;
- (void)launchSettingsLanguagePickerWithVc:(UIViewController * _Nonnull)vc orgName:(NSString * _Nonnull)orgName;
- (void)displayShareDialogWithItemsWithItems:(NSArray * _Nonnull)items presenter:(UIViewController * _Nonnull)presenter fromBarButtonItem:(UIBarButtonItem * _Nonnull)fromBarButtonItem didShow:(void (^ _Nonnull)(void))didShow didCancel:(void (^ _Nullable)(void))didCancel;
- (BOOL)hasDynamicPatientAccessList SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nullable)getWebCSSColorKeysWithColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
- (id <PEThemeProtocol> _Nonnull)getMyChartThemeWithLanguage:(NSString * _Nonnull)language colorProvider:(id <BrandedColorProviderProtocol> _Nonnull)colorProvider assetsProvider:(id <BrandedAssetsProviderProtocol> _Nonnull)assetsProvider cardStyle:(id <CardStyleProtocol> _Nonnull)cardStyle interactiveCardStyle:(id <CardStyleProtocol> _Nonnull)interactiveCardStyle textStyles:(NSArray<id <TextStyleProtocol>> * _Nonnull)textStyles SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowShareWarning SWIFT_WARN_UNUSED_RESULT;
- (void)disableShareWarning;
@property (nonatomic, readonly) BOOL isUserAuthenticationStatusNotAuthenticated;
@property (nonatomic, readonly) BOOL shouldHideEulaCheckbox;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPGenerateAuthTokenResponse;

@interface WPMyChartRefComponentAPI (SWIFT_EXTENSION(MyChart)) <IWPGenerateAuthTokenDelegate>
- (void)didCompleteGenerateAuthTokenRequestWithResponse:(WPGenerateAuthTokenResponse * _Nonnull)response;
@end

@class MyChartPatient;

@interface WPMyChartRefComponentAPI (SWIFT_EXTENSION(MyChart))
- (void)loadPhonebookEntriesWithSuccess:(void (^ _Nonnull)(NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull, BOOL))success failure:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))failure;
- (BOOL)isEULAAccepted SWIFT_WARN_UNUSED_RESULT;
/// Returns if the notifications onboarding has been viewed by the user/device
- (BOOL)notificationsOnboardingViewed SWIFT_WARN_UNUSED_RESULT;
/// Returns if the location onboarding has been viewed by the user/device
- (BOOL)locationOnboardingViewed SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getPreferredOrgIds SWIFT_WARN_UNUSED_RESULT;
- (void)addOrgToPreferredOrgsWithOrg:(id <PEPhonebookEntryProtocol> _Nonnull)org;
@property (nonatomic, readonly, copy) NSString * _Nullable currentInternalPhonebookUrl;
- (void)clearFavoriteOrganizations;
- (UINavigationController * _Nonnull)getOrgSelectionViewController SWIFT_WARN_UNUSED_RESULT;
- (void)scanOrgSelectQRCodeWithViewController:(UIViewController * _Nonnull)viewController;
- (void)loadLegacyThemeForServerWithPbEntry:(id <PEPhonebookEntryProtocol> _Nonnull)pbEntry websiteUrl:(NSString * _Nonnull)websiteUrl hasNewBrandingPaths:(BOOL)hasNewBrandingPaths locale:(NSString * _Nonnull)locale success:(void (^ _Nonnull)(id <PEThemeProtocol> _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
/// Get the cache string for a theme
- (NSString * _Nullable)getLegacyCacheStringForThemeWithTheme:(id <PEThemeProtocol> _Nullable)theme SWIFT_WARN_UNUSED_RESULT;
/// Get the cache string for a theme
- (id <PEThemeProtocol> _Nullable)convertLegacyCacheStringToThemeWithCacheString:(NSString * _Nullable)cacheString SWIFT_WARN_UNUSED_RESULT;
- (void)onPatientsLoadedWithPatients:(NSArray<MyChartPatient *> * _Nonnull)patients;
- (void)onPatientsUpdatedWithPatients:(NSArray<MyChartPatient *> * _Nonnull)patients completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (void)setAllFeaturesAsDone;
- (enum FeatureLoadStatus)getFeatureLoadStatusForPatientWithAccountID:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
- (void)onLoginCompleted;
- (void)tryPasscodeLoginWithPasscode:(NSString * _Nonnull)passcode server:(id <PEPhonebookEntryProtocol> _Nonnull)server onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull, NSInteger))onCompletion;
- (void)getTokenForBiometricWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server onCompletion:(void (^ _Nonnull)(NSString * _Nonnull, NSString * _Nonnull))onCompletion;
@property (nonatomic, readonly) BOOL isSecondaryLoginFeatureAvailable;
@property (nonatomic, readonly) BOOL isPasscodeLoginFeatureAvailable;
@property (nonatomic, readonly) BOOL isBiometricLoginFeatureAvailable;
- (BOOL)canLaunchSignUpWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchSignUpWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)canLaunchForgotUsernameWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchForgotUsernameWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)canLaunchForgotPasswordWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchForgotPasswordWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)canLaunchResetPasswordWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
- (void)launchResetPasswordWorkflowFor:(id <PEPhonebookEntryProtocol> _Nonnull)server in:(UIViewController * _Nonnull)navigationController with:(id <PEThemeProtocol> _Nonnull)theme;
- (BOOL)shouldHideOrgSelection SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getPasswordChangeExpireViewControllerOnCompletion:(void (^ _Nonnull)(BOOL, NSString * _Nullable))onCompletion SWIFT_WARN_UNUSED_RESULT;
- (void)loadCustomStringsOnCompletion:(void (^ _Nonnull)(BOOL))onCompletion;
- (void)performAsyncLoginTasksOnCompletion:(void (^ _Nonnull)(BOOL))onCompletion;
- (void)pendPostSignupDeepLink:(NSString * _Nonnull)deepLinkUrl;
- (void)performLoadingBrandingTasksOnCompletion:(void (^ _Nonnull)(void))onCompletion;
- (UIViewController * _Nullable)getTopViewController SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isWebSessionToolOn SWIFT_WARN_UNUSED_RESULT;
- (void)showAppUriLaunchErrorAlertWithUrl:(NSURL * _Nonnull)url webView:(WKWebView * _Nonnull)webView presentFrom:(UIViewController * _Nonnull)presentFrom;
- (NSString * _Nullable)getAppStoreUrl SWIFT_WARN_UNUSED_RESULT;
@end

@class UIImageView;

@interface WPNavigationTitleView (SWIFT_EXTENSION(MyChart))
- (void)setTitleAccessibilityLabelWithTitle:(NSString * _Nonnull)title patientIndex:(NSInteger)patientIndex;
+ (UIImageView * _Nonnull)createPatientImageViewWithPatientIndex:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart23WPNoImmunizationsNotice")
@interface WPNoImmunizationsNotice : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class for a table view cell to display that user has no immunizations.
SWIFT_CLASS("_TtC7MyChart36WPNoImmunizationsNoticeTableViewCell")
@interface WPNoImmunizationsNoticeTableViewCell : UITableViewCell
- (void)awakeFromNib;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPNotificationPopdownViewController (SWIFT_EXTENSION(MyChart))
- (enum WPAPIDeepLinkExecuteResult)executeWithDeepLink:(NSString * _Nullable)deepLink in:(UINavigationController * _Nonnull)navigationController;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart33WPOnMyWayWebViewControllerManager")
@interface WPOnMyWayWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
+ (WPComponentContainerViewController * _Nullable)getViewControllerWithParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PEAlertProtocol;

SWIFT_RESILIENT_CLASS("_TtC7MyChart9WPPatient")
@interface WPPatient : MyChartPatient
@property (nonatomic, copy) NSArray<id <PEAlertProtocol>> * _Nonnull alerts;
@property (nonatomic) BOOL hasWebAlerts;
@property (nonatomic) NSInteger numberOfWebAlerts;
/// CID version of account ID, used in Intraconnect environments
@property (nonatomic, copy) NSString * _Nonnull uniqueID;
/// Is this patient a proxy subject of the logged-in user?
@property (nonatomic, readonly) BOOL isProxySubject;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqualTo:(WPPatient * _Nonnull)patient SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
@property (nonatomic, copy) NSString * _Nonnull accountId;
- (NSString * _Nonnull)getProxyExpirationDate SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isRefusalPatient SWIFT_WARN_UNUSED_RESULT;
/// This function has the ability to get the raw field value if requested. Most consumers should use the parameterless version or pass false to ensure they use the value from the most recent version of this patient object from the context provider
/// \param getRawValue get the actual value for this patient object
///
///
/// returns:
/// Either the data from the backing field, or the most recent value for this patient from the context provider
- (enum FeatureLoadStatus)getFeatureLoadStatusWithGetRawValue:(BOOL)getRawValue SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface WPPatient (SWIFT_EXTENSION(MyChart)) <PEPatientIndexProtocol>
- (NSInteger)getPatientIndex SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPPatient (SWIFT_EXTENSION(MyChart)) <PEToDoPatientProtocol>
- (BOOL)getIsCareCompanionEnrolled SWIFT_WARN_UNUSED_RESULT;
@end

@protocol IWPUser;

@interface WPPatient (SWIFT_EXTENSION(MyChart)) <IWPPatient>
- (UIImage * _Nullable)getPersonPhoto:(BOOL)useFallback onImageLoaded:(PersonImageCallback _Nullable)onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (id <IWPUser> _Nullable)asUser SWIFT_WARN_UNUSED_RESULT;
- (id <IWPPatient> _Nullable)asPatient SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPPatient (SWIFT_EXTENSION(MyChart))
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
- (void)updateNickname:(NSString * _Nullable)nickname;
- (void)updateColorIndex:(NSInteger)colorIndex;
- (void)updatePhoto:(UIImage * _Nullable)photo;
- (NSArray<id <PEAlertProtocol>> * _Nonnull)getAlerts SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// Use _Internal here to fix Xcode compliance settings for protocols
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, conditionally, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// Use _Internal here to fix Xcode compliance settings for protocols
/// \param useFallback a boolean indicating whether or not a fallback image should be returned if the person doesn’t have a photo
///
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart36WPPatientEstimatesSpringboardManager")
@interface WPPatientEstimatesSpringboardManager : NSObject <WPSpringboardManager>
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WPHSSectionViewController;

SWIFT_CLASS("_TtC7MyChart27WPPatientGoalsTableViewCell")
@interface WPPatientGoalsTableViewCell : UITableViewCell
- (void)setupWithGoal:(WPPersonalNotesInfo * _Nullable)goal sectionViewController:(WPHSSectionViewController * _Nonnull)sectionViewController;
- (void)layoutSubviews;
- (void)reloadCellWith:(WPPersonalNotesInfo * _Nonnull)goal;
- (void)setTheme:(id <PEThemeProtocol> _Nullable)orgTheme;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextView;

@interface WPPatientGoalsTableViewCell (SWIFT_EXTENSION(MyChart)) <UITextViewDelegate>
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
@end

@class WPGetPatientVisitGuideResponse;

@interface WPPatientVisitGuideLoadingViewController (SWIFT_EXTENSION(MyChart))
- (void)ensurePatientVisitGuideDataIsLoadedWithResponse:(WPGetPatientVisitGuideResponse * _Nonnull)response;
@end


/// Helper to load person photos
SWIFT_CLASS("_TtC7MyChart20WPPersonPhotoManager")
@interface WPPersonPhotoManager : NSObject
/// Helper function to invalidate the cache for a person
+ (void)invalidateImageCacheForPerson:(id <PEPersonProtocol> _Nonnull)person;
/// Helper function to get a person from a patient index
+ (id <PEPersonProtocol> _Nullable)getPersonForPatientIndex:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart19WPPersonalNotesInfo")
@interface WPPersonalNotesInfo : NSObject
@property (nonatomic, copy) NSArray<NSString *> * _Nullable personalNoteList;
@property (nonatomic) enum PersonalNoteType type;
@property (nonatomic, copy) NSString * _Nullable updateDate;
- (nonnull instancetype)initWithType:(enum PersonalNoteType)type personalNoteList:(NSArray<NSString *> * _Nullable)personalNoteList OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithInfo:(WPPersonalNotesInfo * _Nonnull)info OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing the personal preferences for a person the user has access to.  Updates can be made to personal preferences and committed to the underlying person once they are saved to the database.
SWIFT_CLASS("_TtC7MyChart21WPPersonalPreferences")
@interface WPPersonalPreferences : NSObject
/// Initializes a set of personal preferences for the provided person.
/// \param person the person for which these personal preferences apply to
///
- (nonnull instancetype)initForPerson:(id <PEPersonProtocol> _Nonnull)person OBJC_DESIGNATED_INITIALIZER;
/// Indicates whether or not these personal preferences have had updates made to them.
///
/// returns:
/// True if updates have been made to these personal preferences; False otherwise.
- (BOOL)hasUpdates SWIFT_WARN_UNUSED_RESULT;
/// Updates the nickname for these personal preferences.
/// \param nickname the updated nickname, or empty to use the full name
///
- (void)updateWithNickname:(NSString * _Nonnull)nickname;
/// Updates the color index for these personal preferences.
/// \param colorIndex the updated color index
///
- (void)updateWithColorIndex:(NSInteger)colorIndex;
/// Updates the photo for these personal preferences.
/// \param photo the updated photo
///
- (void)updateWithPhoto:(UIImage * _Nonnull)photo;
/// Deletes the photo for these personal preferences.
- (void)deletePhoto;
/// Commits all updates made to these personal preferences back to the corresponding person. This method should only be called after the updates are saved on the database.
- (void)commitUpdates;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UICollectionViewLayoutAttributes;

/// A collection view cell that displays a single set of personal preferences to the user.  The user can interact with the collection view cell to update their personal preferences.
SWIFT_CLASS("_TtC7MyChart39WPPersonalPreferencesCollectionViewCell")
@interface WPPersonalPreferencesCollectionViewCell : UICollectionViewCell
/// UIView
- (void)awakeFromNib;
/// UICollectionViewCell
- (UICollectionViewLayoutAttributes * _Nonnull)preferredLayoutAttributesFittingAttributes:(UICollectionViewLayoutAttributes * _Nonnull)layoutAttributes SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPPersonalPreferencesCollectionViewCell (SWIFT_EXTENSION(MyChart)) <UITextFieldDelegate>
/// UITextFieldDelegate
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
/// UITextFieldDelegate
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
@end


/// API class with methods for web requests related to Personal Preferences
SWIFT_CLASS("_TtC7MyChart34WPPersonalPreferencesWebServiceAPI")
@interface WPPersonalPreferencesWebServiceAPI : NSObject
/// Saves personal preferences for a list of patients and/or a non-patient user. The provided handlers are invoked depending on web service success or failure.
/// \param updatedPersonalPreferencesList the list of personal preferences to save
///
/// \param successHandler the handler to invoke upon successful completion of the web service
///
/// \param failureHandler the handler to invoke upon failed completion of the web service
///
+ (void)savePersonalPreferencesWithUpdatedPersonalPreferencesList:(NSArray<WPPersonalPreferences *> * _Nullable)updatedPersonalPreferencesList successHandler:(void (^ _Nonnull)(void))successHandler failureHandler:(void (^ _Nonnull)(void))failureHandler;
/// Updates personal preferences for the user and all subjects
+ (void)updatePersonalPreferences;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UICollectionView;
@class UICollectionViewLayout;

/// A collection view controller that lets the user view and update the personal preferences for each person they have access to, including themselves. Updates made to personal preferences must be saved before they take effect.
SWIFT_CLASS("_TtC7MyChart27WPPersonalizeViewController")
@interface WPPersonalizeViewController : UICollectionViewController
/// Creates an instance of WPPersonalizeViewController from the storyboard with the provided parameters.
/// \param userContext the current user context
///
+ (WPPersonalizeViewController * _Nonnull)getInstanceWithUserContext:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
/// UIViewController
- (void)viewDidLoad;
/// UICollectionViewController
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
/// UICollectionViewController
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithCollectionViewLayout:(UICollectionViewLayout * _Nonnull)layout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <UICollectionViewDelegateFlowLayout>
/// UICollectionViewDelegateFlowLayout
- (UIEdgeInsets)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout insetForSectionAtIndex:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <UIImagePickerControllerDelegate, UINavigationControllerDelegate>
/// UIImagePickerControllerDelegate
- (void)imagePickerController:(UIImagePickerController * _Nonnull)picker didFinishPickingMediaWithInfo:(NSDictionary<UIImagePickerControllerInfoKey, id> * _Nonnull)info;
@end


@interface WPPersonalizeViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


enum WPGetPhonebookStatus : NSInteger;

SWIFT_CLASS("_TtC7MyChart18WPPhonebookService")
@interface WPPhonebookService : NSObject
/// Helper to cache a set of preferred organization servers
+ (void)cachePreferredOrgsWithOrgArray:(NSArray<WPServer *> * _Nonnull)orgArray;
/// Getter for preferred organization servers from cache
+ (NSArray<WPServer *> * _Nonnull)getCachedPreferredOrgs SWIFT_WARN_UNUSED_RESULT;
/// Entrypoint for getting a phonebook
/// \param getPhonebookCallback the callback to be executed on success or failure 
///
+ (void)getPhonebookWithGetPhonebookCallback:(void (^ _Nonnull)(enum WPGetPhonebookStatus, NSArray<WPServer *> * _Nullable, NSString * _Nonnull, BOOL))getPhonebookCallback;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum to describe status of the retrieving the phonebook
typedef SWIFT_ENUM(NSInteger, WPGetPhonebookStatus, open) {
  WPGetPhonebookStatusSuccess = 0,
  WPGetPhonebookStatusCustomPhonebookErrorLoading = 1,
  WPGetPhonebookStatusErrorLoading = 2,
  WPGetPhonebookStatusErrorURLDomainLoading = 3,
};


SWIFT_CLASS("_TtC7MyChart33WPPremiumBillingWebViewController")
@interface WPPremiumBillingWebViewController : WPActivityWebViewController
/// @brief initializer used when opening activity
- (nonnull instancetype)init;
/// <ul>
///   <li>
///     @brief initializer used when opening a subactivity
///   </li>
/// </ul>
- (nonnull instancetype)initWithSubmode:(NSString * _Nonnull)submode accountId:(NSString * _Nonnull)accountId;
/// @brief Springboard item for Premium Billing Activity
+ (WPSpringboardInfo * _Nonnull)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// @brief viewDidLoad setup title and navbar as well as inject javascript
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)closePressed:(id _Null_unspecified)sender;
/// @brief callback funtion for intercepting navigation jumps
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// class with methods for web requests related to Preview Features
SWIFT_CLASS("_TtC7MyChart27WPPreviewFeaturesServiceAPI")
@interface WPPreviewFeaturesServiceAPI : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart36WPProxyConfirmationWebViewController")
@interface WPProxyConfirmationWebViewController : WPActivityWebViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)init;
- (NSInteger)getWebViewPatientIndex SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart18WPPushNotification")
@interface WPPushNotification : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart36WPSchedulingWebViewControllerManager")
@interface WPSchedulingWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
/// Constructor to specify the specific sub mode of scheduling for this workflow.
/// \param mode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode OBJC_DESIGNATED_INITIALIZER;
/// Constructor to specify the specific sub mode of scheduling for this workflow.
/// \param mode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
/// \param csn unencrypted csn - used for rescheduling
///
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode csn:(NSString * _Nullable)csn OBJC_DESIGNATED_INITIALIZER;
/// Springboard declaration
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// Gets the Scheduling MO view controller.
/// \param schedulingMode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
/// \param parameters List of QSPs use in the MO jump
///
/// \param orgInfo Organization object for external scheduling
///
///
/// returns:
/// MO Scheduling web view controller
+ (WPComponentContainerViewController * _Nonnull)getSchedulingViewControllerWithMode:(WPMyChartWebViewMode)schedulingMode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters orgInfo:(WPOrganizationInfo * _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the Scheduling MO view controller.
/// \param schedulingMode Scheduling sub mode for this context (e.g. Scheduling vs Rescheduling vs Tickets).
///
/// \param parameters List of QSPs use in the MO jump
///
/// \param csn CSN of the appointment, if used for rescheduling.
///
/// \param orgInfo Organization object for external scheduling
///
///
/// returns:
/// MO Scheduling web view controller
+ (WPComponentContainerViewController * _Nonnull)getSchedulingViewControllerWithMode:(WPMyChartWebViewMode)schedulingMode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters csn:(NSString * _Nullable)csn orgInfo:(WPOrganizationInfo * _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
/// Gets the list of formatted QSPs needed for scheduling, based on a dictionary of unformatted QSPs.
/// \param parameters Dictionary of unformatted QSPs
///
///
/// returns:
/// List of QSPs needed for scheduling.
+ (NSArray<MyChartWebParameter *> * _Nonnull)getSchedulingQueryParams:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPQuickScheduleWebViewControllerManager")
@interface WPQuickScheduleWebViewControllerManager : WPSchedulingWebViewControllerManager
/// Springboard declaration
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
/// Gets the On Demand Video Visit MO view controller.
/// \param parameters List of QSPs use in the MO jump
///
///
/// returns:
/// MO On Demand Video Visits  web view controller
+ (WPComponentContainerViewController * _Nonnull)getOnDemandVideoVisitViewController:(NSArray<MyChartWebParameter *> * _Nullable)parameters SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithMode:(WPMyChartWebViewMode)mode csn:(NSString * _Nullable)csn OBJC_DESIGNATED_INITIALIZER;
@end



/// View for showing all the SVGs in the theme library
SWIFT_CLASS("_TtC7MyChart32WPSVGLibraryViewerViewController")
@interface WPSVGLibraryViewerViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface WPSVGLibraryViewerViewController (SWIFT_EXTENSION(MyChart)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


/// API class with methods for WebRequests related to Save Personal Notes
SWIFT_CLASS("_TtC7MyChart29WPSavePersonalNotesServiceAPI")
@interface WPSavePersonalNotesServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <SavePersonalNotesCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Save a personal note
/// Callers should first ensure that the health goal functionality is available by checking the IC feature bit
/// \param patientContext the patient context
///
- (void)savePersonalNotesWithPatientContext:(PEPatientContext * _Nonnull)patientContext noteInfo:(WPPersonalNotesInfo * _Nonnull)noteInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Response object for savePersonalNotes service call
SWIFT_CLASS("_TtC7MyChart34WPSavePersonalNotesServiceResponse")
@interface WPSavePersonalNotesServiceResponse : NSObject
/// Note
@property (nonatomic) BOOL success;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



/// Model for a TB or immunization screening.
/// Any web service response type MUST extend Codable.
SWIFT_CLASS("_TtC7MyChart11WPScreening")
@interface WPScreening : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol WPScreeningWorkflowEntryDelegate;

/// Class for a table view cell for a TB or immunizations history screening.
SWIFT_CLASS("_TtC7MyChart24WPScreeningTableViewCell")
@interface WPScreeningTableViewCell : UITableViewCell
@property (nonatomic, weak) id <WPScreeningWorkflowEntryDelegate> _Nullable delegate;
- (void)awakeFromNib;
/// Populate this banner with data from the screening
/// \param screening 
///
- (void)setupWithScreening:(WPScreening * _Nonnull)screening;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart35WPScreeningWebViewControllerManager")
@interface WPScreeningWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol for listeners to button being clicked
SWIFT_PROTOCOL("_TtP7MyChart32WPScreeningWorkflowEntryDelegate_")
@protocol WPScreeningWorkflowEntryDelegate
- (void)enterScreeningWorkflowWithType:(NSInteger)type templateID:(NSString * _Nullable)templateID;
@end


/// Response object for requestScreenings service call
SWIFT_CLASS("_TtC7MyChart27WPScreeningsServiceResponse")
@interface WPScreeningsServiceResponse : NSObject
/// List of screenings
@property (nonatomic, copy) NSArray<WPScreening *> * _Null_unspecified screenings;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// API class with methods for WebRequests related to Screenings
SWIFT_CLASS("_TtC7MyChart25WPScreeningsWebServiceAPI")
@interface WPScreeningsWebServiceAPI : NSObject
/// Initialize the API with a callback object
/// \param callingContext the callback object
///
- (nonnull instancetype)initWithCallingContext:(id <ScreeningsCallback> _Nonnull)callingContext OBJC_DESIGNATED_INITIALIZER;
/// Get list of screenings.
/// Callers should first ensure that the screenings workflow is available by calling WPUtil_Misc.isMOScreeningsAvailable().
/// \param patientContext the patient context
///
- (void)requestScreeningsWithPatientContext:(PEPatientContext * _Nonnull)patientContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol WPHealthSummaryMOWorkflowCompleteDelegate;

/// View controller for mobile-optimized screenings workflow
SWIFT_CLASS("_TtC7MyChart29WPScreeningsWebViewController")
@interface WPScreeningsWebViewController : WPActivityWebViewController
@property (nonatomic, weak) id <WPHealthSummaryMOWorkflowCompleteDelegate> _Nullable delegate;
/// Convenience initializer with parameters
- (nonnull instancetype)initWithType:(NSInteger)type templateID:(NSString * _Nonnull)templateID closeDelegate:(id <WPHealthSummaryMOWorkflowCompleteDelegate> _Nonnull)closeDelegate;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (void)closePressed:(id _Null_unspecified)sender;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end



@interface WPServer (SWIFT_EXTENSION(MyChart)) <SearchableProtocol>
- (NSArray<NSString *> * _Nonnull)getSearchTerms SWIFT_WARN_UNUSED_RESULT;
@end

enum WPCachedImageType : NSInteger;

@interface WPServer (SWIFT_EXTENSION(MyChart))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpPrefUseCustomServer;)
+ (NSString * _Nonnull)wpPrefUseCustomServer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpPrefConnectionServer;)
+ (NSString * _Nonnull)wpPrefConnectionServer SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpPrefAppReviewMode;)
+ (NSString * _Nonnull)wpPrefAppReviewMode SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerFormatterLocaleKey;)
+ (NSString * _Nonnull)wpServerFormatterLocaleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerAllowedLanguagesKey;)
+ (NSString * _Nonnull)wpServerAllowedLanguagesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerDefaultLanguageKey;)
+ (NSString * _Nonnull)wpServerDefaultLanguageKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerFormatterLocaleOverrideKey;)
+ (NSString * _Nonnull)wpServerFormatterLocaleOverrideKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedDefaultLocaleKey;)
+ (NSString * _Nonnull)wpServerBrandedDefaultLocaleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedAllowedLocalesKey;)
+ (NSString * _Nonnull)wpServerBrandedAllowedLocalesKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedServerPrimaryLocaleKey;)
+ (NSString * _Nonnull)wpServerBrandedServerPrimaryLocaleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull wpServerBrandedShowLanguagePicker;)
+ (NSString * _Nonnull)wpServerBrandedShowLanguagePicker SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull epicAppReviewServerUrl;)
+ (NSString * _Nonnull)epicAppReviewServerUrl SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull epicAppReviewWebsiteName;)
+ (NSString * _Nonnull)epicAppReviewWebsiteName SWIFT_WARN_UNUSED_RESULT;
/// Does the provided id match the current org or one of its affiliates?
/// \param orgId the id to check match on the organization piece alone
///
+ (BOOL)orgIdMatchesCurrentOrAffiliate:(NSString * _Nullable)orgId SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAppReviewModeEnabled SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isInternalSearchEnabled SWIFT_WARN_UNUSED_RESULT;
/// Gets a phonebook entry image from the cache if it exists
+ (UIImage * _Nullable)getCachedImage:(enum WPCachedImageType)imageType for:(NSString * _Nonnull)orgId SWIFT_WARN_UNUSED_RESULT;
/// Sets a phonebook entry image to a flat-file cache
+ (void)setCachedImage:(UIImage * _Nonnull)image forType:(enum WPCachedImageType)imageType andOrgId:(NSString * _Nonnull)orgId;
/// Removes a phonebook entry image from the cache if it exists
+ (void)removeCachedImage:(enum WPCachedImageType)imageType for:(NSString * _Nonnull)orgId;
/// Swift implementation of PEOrganizationProtocol.getBrandLogo
- (void)getBrandLogo:(BOOL)useDarkLogo completionHandler:(void (^ _Nonnull)(UIImage * _Nonnull))completionHandler;
/// Create a locale settings source object from:
/// <ul>
///   <li>
///     The current device locale settings
///   </li>
///   <li>
///     Either the server branding API locale settings, or the phonebook locale settings
///   </li>
/// </ul>
- (void)setupLocaleSettingsSourceWithDefaultLocale:(PELocale * _Nullable)defaultLocale allowedLocales:(NSArray<PELocale *> * _Nullable)allowedLocales;
/// Get the allowed languages specified in the phonebook
- (NSString * _Nonnull)getAllowedLanguagesValue SWIFT_WARN_UNUSED_RESULT;
/// Get the default language specified in the phonebook
- (NSString * _Nonnull)getDefaultLanguageValue SWIFT_WARN_UNUSED_RESULT;
/// Get the formatter locale specified in the phonebook
- (NSString * _Nonnull)getFormatterLocaleValue SWIFT_WARN_UNUSED_RESULT;
/// Get the formatter locale override specified in the phonebook, if present
- (NSString * _Nullable)getFormatterLocaleOverrideValue SWIFT_WARN_UNUSED_RESULT;
/// Get the allowed locales configured for branded builds as a String Array
- (NSArray<NSString *> * _Nonnull)getBrandedAllowedLocales SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandedDefaultLocale SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getBrandedServerPrimaryLocale SWIFT_WARN_UNUSED_RESULT;
- (BOOL)getBrandedShowLanguagePicker SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getServerOptionValueForKey:(NSString * _Nonnull)targetKey SWIFT_WARN_UNUSED_RESULT;
- (NSArray<PELocale *> * _Nonnull)getAllowedLocales SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getLocationArray SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getAkaMnemonics SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getFkaMnemonics SWIFT_WARN_UNUSED_RESULT;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for this server
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
- (void)removeSecondaryLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for passcode login
///
/// returns:
/// true if the passcode login token was found and  successfully removed, false otherwise
- (void)removePasscodeLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Removes the login token used for biometric login
///
/// returns:
/// true if the biometric login token was found and  successfully removed, false otherwise
- (void)removeBiometricLoginWithCompletionHandler:(void (^ _Nonnull)(BOOL, NSError * _Nullable))completionHandler;
/// Set the theme with the PEThemeProtocol
- (void)setThemeHelperWithTheme:(id <PEThemeProtocol> _Nonnull)theme;
@end

/// Images types that save to flat files
typedef SWIFT_ENUM(NSInteger, WPCachedImageType, open) {
  WPCachedImageTypeMyChartLogo = 0,
  WPCachedImageTypeServerLogo = 1,
};


@protocol PEOrganizationInfoProtocol;
@class NSAttributedString;

/// Show a pop up that shows which subjects have data for an organization
SWIFT_CLASS("_TtC7MyChart37WPShowSubjectsForH2GOrgViewController")
@interface WPShowSubjectsForH2GOrgViewController : WPPopupViewController
/// Init for subject ids and organization
/// \param subjectIds The subject ids to show
///
/// \param forOrg The org this is for
///
- (nonnull instancetype)initWithSubjectIds:(NSArray<NSString *> * _Nonnull)subjectIds forOrg:(id <PEOrganizationInfoProtocol> _Nonnull)forOrg;
- (void)viewDidLoad;
- (void)viewDidLayoutSubviews;
- (null_unspecified instancetype)initWithTitle:(NSString * _Null_unspecified)popupString cancelLabel:(NSString * _Null_unspecified)cancelString OBJC_DESIGNATED_INITIALIZER;
- (null_unspecified instancetype)initWithAttributedTitle:(NSAttributedString * _Null_unspecified)popupString cancelLabel:(NSString * _Null_unspecified)cancelString OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart40WPSymptomCheckerWebViewControllerManager")
@interface WPSymptomCheckerWebViewControllerManager : MyChartWebViewControllerManager <WPSpringboardManager>
- (nonnull instancetype)initWithLaunchedWithTree:(BOOL)launchedWithTree;
+ (WPSpringboardInfo * _Null_unspecified)springboardItem SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// The header for sections in a WPTableView
SWIFT_CLASS("_TtC7MyChart28WPTableViewSectionHeaderView")
@interface WPTableViewSectionHeaderView : UITableViewHeaderFooterView
/// Returns our own label instead of auto-generated one from UIKit in case someone tries to access it
@property (nonatomic, readonly, strong) UILabel * _Nullable textLabel;
- (nonnull instancetype)initWithReuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart31WPTelehealthVisitModeBannerView")
@interface WPTelehealthVisitModeBannerView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC7MyChart39WPTelemedicineWaitingRoomViewController")
@interface WPTelemedicineWaitingRoomViewController : WPViewController
/// Instantiates the Telemedicine Waiting Room view controller
/// \param appointment appointment
///
///
/// returns:
/// The telemedicine waiting room view controller
+ (WPTelemedicineWaitingRoomViewController * _Nonnull)instantiateWithAppointment:(WPAppointment * _Nonnull)appointment SWIFT_WARN_UNUSED_RESULT;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillDisappear:(BOOL)animated;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIScrollView;

@interface WPTelemedicineWaitingRoomViewController (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


SWIFT_CLASS("_TtC7MyChart35WPTestResultDetailWebViewController")
@interface WPTestResultDetailWebViewController : WPActivityWebViewController
- (nonnull instancetype)initWithOrderID:(NSString * _Nonnull)orderID;
- (void)closePressed:(id _Null_unspecified)sender;
- (void)backPressed:(id _Null_unspecified)sender;
- (BOOL)shouldShowBackNavigation SWIFT_WARN_UNUSED_RESULT;
- (null_unspecified instancetype)initWithStringMode:(NSString * _Null_unspecified)modeString parameters:(NSDictionary<NSString *, NSString *> * _Null_unspecified)params andPresentationStyle:(WPViewPresentationStyle)style patientIndex:(NSInteger)patientIndex isExternal:(BOOL)isExternal orgID:(NSString * _Null_unspecified)orgID OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class PEEncounterContext;
@protocol PETestResult;
@class WPTestResult;

SWIFT_CLASS("_TtC7MyChart33WPTestResultDetailsViewController")
@interface WPTestResultDetailsViewController : WPViewController
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestDat:(NSString * _Nonnull)dat andExternalOrgId:(NSString * _Nullable)externalOrgId andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestDat:(NSString * _Nonnull)dat andExternalOrgId:(NSString * _Nullable)externalOrgId andLabName:(NSString * _Nonnull)labName andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestOrder:(NSString * _Nonnull)orderId andExternalOrgId:(NSString * _Nullable)externalOrgId andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestOrder:(NSString * _Nonnull)orderId andExternalOrgId:(NSString * _Nullable)externalOrgId isOrderIdEncrypted:(BOOL)isOrderIdEncrypted andEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithPETestResult:(id <PETestResult> _Nonnull)result overrideUri:(NSString * _Nonnull)overrideUri componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost patientContext:(PEPatientContext * _Nonnull)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext logEncounterCSN:(BOOL)logEncounterCSN SWIFT_WARN_UNUSED_RESULT;
+ (WPTestResultDetailsViewController * _Nullable)createViewControllerWithTestResult:(WPTestResult * _Nonnull)result SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <PEHostableComponentViewController>
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
@end


@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
/// UIScrollViewDelegate
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end




@interface WPTestResultDetailsViewController (SWIFT_EXTENSION(MyChart)) <WPViewContainingWebViewDelegate>
/// WPViewContainingWebViewDelegate
- (void)navigateToAllowedHostForRequest:(NSURLRequest * _Nullable)request allowedHosts:(NSArray * _Nullable)allowedHosts;
/// WPViewContainingWebViewDelegate
- (void)openUrlInExternalBrowser:(NSURL * _Nullable)url;
@end



SWIFT_CLASS("_TtC7MyChart10WPTestScan")
@interface WPTestScan : WPObject
@property (nonatomic, copy) NSString * _Nullable dcsID;
@property (nonatomic, copy) NSString * _Nullable encryptedDCSID;
@property (nonatomic, copy) NSString * _Nullable fileName;
@property (nonatomic, copy) NSString * _Nullable fileType;
@property (nonatomic, copy) NSData * _Nullable data;
@property (nonatomic, copy) NSDate * _Nullable scanDateTime;
- (void)setXMLValue:(id _Null_unspecified)value forKey:(NSString * _Null_unspecified)key;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart28WPTiffLauncherViewController")
@interface WPTiffLauncherViewController : WPViewController <WPShareDelegate>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// Initializes the view controller with a dcs ID and an optional file extension for the attachment
/// \param dcsID dcs ID of the attachment being launched
///
/// \param dcsExtension optional file extension for the attachment
///
/// \param orgID H2G org ID for loading H2G documents
///
/// \param useSourceEncryption true if the DCS ID is encrypted at the source org for external documents, false if it’s encrypted at the local org
///
- (nonnull instancetype)initWithDcsID:(NSString * _Nonnull)dcsID andDcsExtension:(NSString * _Nullable)dcsExtension andOrgID:(NSString * _Nullable)orgID useSourceEncryption:(BOOL)useSourceEncryption;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
/// Callback method that is called after getting the attachment from the server
/// \param response The response object containing the attachment object
///
- (void)didGetDocumentWithResponse:(WPGetDocumentResponse * _Nonnull)response;
- (void)didShowShareDialog;
- (void)didCancelShareDialog;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface WPTrackMyHealthUtils (SWIFT_EXTENSION(MyChart))
+ (void)launchHealthLinks;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPTrackMyHealthWebViewControllerManager")
@interface WPTrackMyHealthWebViewControllerManager : MyChartWebViewControllerManager
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DevicePlatformKey;)
+ (NSString * _Nonnull)DevicePlatformKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Class representing updated preferences retrieved using the getUpdatedPersonalPreferences request
SWIFT_CLASS("_TtC7MyChart20WPUpdatedPreferences")
@interface WPUpdatedPreferences : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartPerson;

/// The object representing the logged-in user (equivalent to Android’s AuthenticateResponse class)
SWIFT_RESILIENT_CLASS("_TtC7MyChart6WPUser")
@interface WPUser : MyChartUser <IWPUser>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) NSInteger nppIndex;)
+ (NSInteger)nppIndex SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) WPUser * _Nullable loggedInUser;)
+ (WPUser * _Nullable)loggedInUser SWIFT_WARN_UNUSED_RESULT;
+ (void)setLoggedInUser:(WPUser * _Nullable)value;
@property (nonatomic, readonly, copy) NSArray<WPPatient *> * _Nonnull wpPatientData;
@property (nonatomic) BOOL loggedInUsingSAML;
@property (nonatomic) BOOL isFullyAuthenticated;
@property (nonatomic, readonly) BOOL isInProxySubjectContext;
@property (nonatomic, readonly, strong) WPPatient * _Nullable currentPatient;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum WPAuthenticationStatus authenticationStatus;)
+ (enum WPAuthenticationStatus)authenticationStatus SWIFT_WARN_UNUSED_RESULT;
- (WPPatient * _Nullable)getPatient:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
- (void)switchPatient:(NSInteger)index andNotifyWeb:(BOOL)notify isLoginProcess:(BOOL)isLoginProcess;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class) NSInteger currentPersonIndex;)
+ (NSInteger)currentPersonIndex SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentPersonIndex:(NSInteger)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) WPPatient * _Nullable currentPatient;)
+ (WPPatient * _Nullable)currentPatient SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentPatient:(WPPatient * _Nullable)newValue;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) MyChartPerson * _Nullable currentPerson;)
+ (MyChartPerson * _Nullable)currentPerson SWIFT_WARN_UNUSED_RESULT;
+ (void)setCurrentPerson:(MyChartPerson * _Nullable)newValue;
+ (PEPatientContext * _Nullable)getCurrentPatientContext SWIFT_WARN_UNUSED_RESULT;
+ (PEUserContext * _Nullable)getCurrentUserContext SWIFT_WARN_UNUSED_RESULT;
+ (PEPatientContext * _Nullable)getContextFromPatient:(WPPatient * _Nonnull)patient SWIFT_WARN_UNUSED_RESULT;
+ (PEPatientContext * _Nullable)getPatientContextAtIndex:(NSInteger)patientIndex SWIFT_WARN_UNUSED_RESULT;
+ (enum FeatureLoadStatus)getFeatureLoadStatusForId:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isMobileOptimizedFeatureAvailable:(BOOL)checkNPP SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPersonPhoto:(BOOL)useFallback onImageLoaded:(PersonImageCallback _Nullable)onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasAlerts SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPUser (SWIFT_EXTENSION(MyChart))
@property (nonatomic, readonly) BOOL isProxySubject;
- (id <IWPUser> _Nullable)asUser SWIFT_WARN_UNUSED_RESULT;
- (id <IWPPatient> _Nullable)asPatient SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPUser (SWIFT_EXTENSION(MyChart))
- (NSString * _Nonnull)getCommandLocaleString SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getDeviceID SWIFT_WARN_UNUSED_RESULT;
- (void)setToken:(NSString * _Nonnull)token forType:(enum TokenType)tokenType;
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
- (void)updatePhoto:(UIImage * _Nullable)photo;
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC7MyChart22WPUtilMiscComponentAPI")
@interface WPUtilMiscComponentAPI : NSObject <PEUtilMiscComponentAPIProtocol>
- (id _Nullable)getSettingWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@protocol UIUserActivityRestoring;
@class UNUserNotificationCenter;
@class UNNotification;

@interface WPUtil_AppDelegate (SWIFT_EXTENSION(MyChart))
/// Provides a shared hook to call when the app delegate didFinishLaunchingWithOptions* if called. Called by both the main app delegate and self-submitted app delegates.
+ (BOOL)application:(UIApplication * _Nonnull)application didFinishLaunchingWithOptions:(NSDictionary<UIApplicationLaunchOptionsKey, id> * _Nullable)launchOptions;
+ (BOOL)willContinueUserActivityWithActivityType:(NSString * _Nonnull)activityType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)continueUserActivity:(NSUserActivity * _Nonnull)userActivity restorationHandler:(void (^ _Nullable)(NSArray<id <UIUserActivityRestoring>> * _Nullable))restorationHandler;
/// Registers deep link framework component
+ (void)registerDeepLinkComponentAPI;
/// Generate needed deep link params and options for the push notification, and let DeepLinkManager start processing it
/// \param userInfo the userInfo contains push notification payload
///
+ (void)handlePushNotificationWithUserInfo:(NSDictionary * _Nonnull)userInfo;
/// Generate needed deep link params and options for the external deep link, and let DeepLinkManager start processing it
/// \param url the deep link url
///
/// \param orgId the deep link org id
///
/// \param wprId the deep link wpr id
///
+ (void)handleExternalDeepLinkForUrl:(NSString * _Nullable)url orgId:(NSString * _Nullable)orgId wprId:(NSString * _Nullable)wprId;
/// Create a deep link for launching the medical advice activity and attaching a file
+ (NSString * _Nonnull)createAppleHealthPDFDeepLinkWithFileUrl:(NSURL * _Nonnull)fileUrl SWIFT_WARN_UNUSED_RESULT;
/// Invoked by the app delegate when a push notification has been received while the app is in the foreground
+ (void)userNotificationCenter:(UNUserNotificationCenter * _Nonnull)center willPresent:(UNNotification * _Nonnull)notification withCompletionHandler:(void (^ _Null_unspecified)(UNNotificationPresentationOptions))completionHandler;
+ (BOOL)hasPushNotificationPermissions SWIFT_WARN_UNUSED_RESULT;
@end


/// Draws a polygon with its center at the given point. Draws in the given context
/// but uses the current line/fill color and size set up outside the function
/// \param point the center point of the polygon
///
/// \param radius the radius of the polygon i.e. from center to any of the outermost points
///
/// \param sides the number of sides to draw
///
/// \param context the CGContext in which to draw
///
SWIFT_CLASS("_TtC7MyChart19WPUtil_CoreGraphics")
@interface WPUtil_CoreGraphics : NSObject
+ (void)drawPolygonCenteredAtPoint:(CGPoint)point radius:(double)radius sides:(NSInteger)sides context:(CGContextRef _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPUtil_Library (SWIFT_EXTENSION(MyChart))
/// Returns the universal link domain used for the app
+ (NSString * _Nonnull)getUniversalLinkDomain SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getExternalUniversalLinkDomain SWIFT_WARN_UNUSED_RESULT;
@end

@class NSLocale;

SWIFT_CLASS("_TtC7MyChart14WPUtil_Locales")
@interface WPUtil_Locales : NSObject
/// Current locale to be used for general locale operations. Ex: String translations
/// Can be used pre-login and post-login. Respects overrides.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull currentPELocale;)
+ (PELocale * _Nonnull)currentPELocale SWIFT_WARN_UNUSED_RESULT;
/// Current locale to be used for general locale operations converted into an iOS Foundation Locales object
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSLocale * _Nonnull currentLocale;)
+ (NSLocale * _Nonnull)currentLocale SWIFT_WARN_UNUSED_RESULT;
/// Default locale to be used for general locale operations if no match can be made with user-preferences. Ex: String translations
/// Can be used pre-login and post-login. Respects overrides.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull defaultLocale;)
+ (PELocale * _Nonnull)defaultLocale SWIFT_WARN_UNUSED_RESULT;
/// Locale to be used for webservices.
/// Current PE locale with overrides for internal locales like Gibberish
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull commandLocale;)
+ (PELocale * _Nonnull)commandLocale SWIFT_WARN_UNUSED_RESULT;
/// Locale to be used for formatting dates and numbers
/// Contains special handling for Arabic. See XDS 150833
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull formatterLocale;)
+ (PELocale * _Nonnull)formatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Locale to be used for formatting currency
/// Contains special handling for Arabic. See XDS 150833
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull currencyFormatterLocale;)
+ (PELocale * _Nonnull)currencyFormatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Presents the information popup and sends user to the Settings App to change their language
+ (void)launchSettingsLanguagePickerWithVc:(UIViewController * _Nonnull)vc orgName:(NSString * _Nonnull)orgName;
/// Short date format string
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull shortDateFormat;)
+ (NSString * _Nonnull)shortDateFormat SWIFT_WARN_UNUSED_RESULT;
/// Medium date format string
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull mediumDateFormat;)
+ (NSString * _Nonnull)mediumDateFormat SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Convenience override.
+ (NSBundle * _Nonnull)findMYCStringBundle SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Convenience override.
+ (NSBundle * _Nonnull)findMYCStringBundleForBundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Convenience override.
+ (NSBundle * _Nonnull)findMYCStringBundleForLocale:(PELocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Finds the string bundle for native lproj strings.
/// Searches for possible lproj folder names. Ex: zh-Hans-CN -> zh-Hans-CN, zh-Hans, zh-CN, zh
+ (NSBundle * _Nonnull)findMYCStringBundleForLocale:(PELocale * _Nonnull)locale forBundle:(NSBundle * _Nonnull)bundle SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface WPUtil_Misc (SWIFT_EXTENSION(MyChart))
/// Check if the URL’s host is an allowed host.
/// \param url the url that we want to open
///
/// \param allowedHosts A list of hosts are allowed to be opened inside the app
///
+ (BOOL)isUrl:(NSString * _Nonnull)url supportedByHosts:(NSArray<NSString *> * _Nonnull)allowedHosts SWIFT_WARN_UNUSED_RESULT;
/// Writes audits for document viewing
/// \param dcsId DCS for the document
///
+ (void)auditDocumentViewedWithDcsId:(NSString * _Nullable)dcsId;
/// Writes audits for document viewing+download
/// \param dcsId DCS for the document
///
+ (void)auditDocumentDownloadWithDcsId:(NSString * _Nullable)dcsId;
/// Toggles Pus Notifications on or off
/// \param delegate delegate to handle the result of Push Notifications toggling
///
/// \param enable YES if push notifications need to be enabled, NO otherwise
///
+ (void)setPushNotificationsStatusWithDelegate:(id <IWPPushNotificationsDelegate> _Nonnull)delegate enable:(BOOL)enable;
/// Checks whether Push Notifications are enabled or not
/// \param delegate delegate to handle the result of getting the Push Notifications status
///
+ (void)getPushNotificationsStatusWithDelegate:(id <IWPPushNotificationsDelegate> _Nonnull)delegate;
/// Indicates whether or not the user can update their contact information
///
/// returns:
/// True if the server support is in place and the user has proper security and the newer Communication Preferences is not available; False otherwise
+ (BOOL)isUpdateContactInformationAvailable SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not communication preferences is available
///
/// returns:
/// True if the server support is in place and the user has proper security; False otherwise
+ (BOOL)isCommunicationPreferencesAvailable SWIFT_WARN_UNUSED_RESULT;
/// Ensure the address is prepared for Apple. Notably, this includes stripping the +4, if present, from the ZIP
/// \param address address string to be sanitized
///
+ (NSString * _Nonnull)prepareAddressForAppleWithAddress:(NSString * _Nonnull)address SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPUtil_UI (SWIFT_EXTENSION(MyChart))
/// Get a standard table header for a WPTableView
/// \param title Title to display
///
/// \param icon Icon to display
///
/// \param axLabel accessibility label for section header
///
/// \param target target receiving actions
///
/// \param selector selector of the target
///
+ (WPTableViewSectionHeaderView * _Nullable)sectionHeaderViewWithTitle:(NSString * _Nonnull)title andIcon:(UIImage * _Nullable)icon andAccessibilityLabel:(NSString * _Nullable)axLabel andTarget:(id _Nullable)target andSelector:(SEL _Nullable)selector SWIFT_WARN_UNUSED_RESULT;
/// Get a standard table header for a WPTableView
/// \param title Title to display
///
/// \param subtitle Optional subtitle to display
///
/// \param icon Icon to display
///
/// \param axLabel accessibility label for section header
///
/// \param target target receiving actions
///
/// \param selector selector of the target
///
+ (WPTableViewSectionHeaderView * _Nullable)sectionHeaderViewWithTitle:(NSString * _Nonnull)title andSubtitle:(NSString * _Nullable)subtitle andIcon:(UIImage * _Nullable)icon andAccessibilityLabel:(NSString * _Nullable)axLabel andTarget:(id _Nullable)target andSelector:(SEL _Nullable)selector SWIFT_WARN_UNUSED_RESULT;
/// Get the first navigation controller in the view hierarchy
///
/// returns:
/// the first navigation controller in the hierarchy, or nil
+ (UINavigationController * _Nullable)getTopNavigationController SWIFT_WARN_UNUSED_RESULT;
/// Get the topmost view controller in the view hierarchy, generally for displaying an alert on top of it or launching a deep link
///
/// returns:
/// The topmost view controller
+ (UIViewController * _Nullable)getTopViewController SWIFT_WARN_UNUSED_RESULT;
/// Get the top view controller in the view hierarchy targeting a specific view controller
/// \param rootViewController The view controller we’re targeting
///
///
/// returns:
/// A view controller on top of rootViewController, or rootViewController if none found
+ (UIViewController * _Nullable)getTopViewControllerWithRootViewController:(UIViewController * _Nullable)rootViewController SWIFT_WARN_UNUSED_RESULT;
@end

@class WPWebView;

SWIFT_CLASS("_TtC7MyChart23WPViewContainingWebView")
@interface WPViewContainingWebView : UIView
@property (nonatomic, strong) WPWebView * _Null_unspecified webView;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)loadWithHtml:(NSString * _Nullable)html;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (void)layoutSubviews;
@end



@interface WPViewContainingWebView (SWIFT_EXTENSION(MyChart)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
@end


@interface WPViewContainingWebView (SWIFT_EXTENSION(MyChart)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginZooming:(UIScrollView * _Nonnull)scrollView withView:(UIView * _Nullable)view;
- (UIView * _Nullable)viewForZoomingInScrollView:(UIScrollView * _Nonnull)scrollView SWIFT_WARN_UNUSED_RESULT;
@end


@interface WPViewController (SWIFT_EXTENSION(MyChart))
/// set up navigation bar to display two bars style that displays Epic logo
- (void)setUpTwoNavigationBarStyle;
/// Set up title view for second bar
/// \param title the title for the activity
///
/// \param patientIndex the current patient index
///
- (void)setUpPatientImageForSecondBarWithTitle:(NSString * _Nonnull)title atPatientIndex:(NSInteger)patientIndex;
- (void)animateNavigationBar;
- (void)enableExpandingNavBar;
- (void)disableExpandingNavBarWithAnimated:(BOOL)animated;
- (void)disableExpandingNavBar;
/// To remove the position animation of the view in the navigation bar to avoid it has weird movement when navigation
/// @param view the view we don’t want animation while push
- (void)removePushAnimationWithView:(UIView * _Nonnull)view;
/// Indicate whether we hide Epic logo for this view controller
- (BOOL)shouldHideEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldCollapseTitleInsteadOfBanner SWIFT_WARN_UNUSED_RESULT;
@end


/// Class that holds auto pay information for a visit
SWIFT_CLASS("_TtC7MyChart14WPVisitAutoPay")
@interface WPVisitAutoPay : WPObject
- (void)setXMLValue:(id _Null_unspecified)value forKey:(NSString * _Null_unspecified)key;
- (null_unspecified instancetype)initWithObjectID:(NSString * _Null_unspecified)objectID andName:(NSString * _Null_unspecified)name OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart32WPWebSessionManagerMyChartHelper")
@interface WPWebSessionManagerMyChartHelper : NSObject
+ (void)setUpSession:(NSInteger)patientIndex;
+ (void)onPatientContextChanged:(NSInteger)patientIndex;
+ (void)updateCurrentSession:(NSInteger)patientIndex;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol WPGetMyChartUrlCallbackProtocol;
@protocol WPGetMyChartJumpTokenCallbackProtocol;
@protocol IWPCreateMyChartUrlDelegate;

/// API class with methods for WebRequests related to Web Session Manager
SWIFT_CLASS("_TtC7MyChart32WPWebSessionManagerWebServiceAPI")
@interface WPWebSessionManagerWebServiceAPI : NSObject
/// Method to check if an MO view can launch
/// @param listener
+ (void)getMyChartUrlWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters listener:(id <WPGetMyChartUrlCallbackProtocol> _Nonnull)listener;
/// Method to check if an MO view can launch
/// @param listener
+ (void)getMyChartJumpTokenWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters isExternal:(BOOL)isExternal orgId:(NSString * _Nullable)orgId listener:(id <WPGetMyChartJumpTokenCallbackProtocol> _Nonnull)listener;
/// Method to check if an MO view can launch
/// @param listener
+ (void)getMyChartJumpTokenLibraryWithPatientIndex:(NSInteger)patientIndex stringMode:(NSString * _Nonnull)stringMode parameters:(NSDictionary<NSString *, NSString *> * _Nullable)parameters isExternal:(BOOL)isExternal orgId:(NSString * _Nullable)orgId listener:(id <IWPCreateMyChartUrlDelegate> _Nonnull)listener;
+ (NSString * _Nonnull)getModeString:(WPMyChartWebViewMode)modeEnum SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class WKUserContentController;
@class WKScriptMessage;
@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC7MyChart9WPWebView")
@interface WPWebView : WKWebView <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
- (nonnull instancetype)initWithFrame:(CGRect)frame configuration:(WKWebViewConfiguration * _Nonnull)configuration OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC7MyChart13WPWebViewUtil")
@interface WPWebViewUtil : NSObject
/// !
/// * @brief Searches through the webpage for an ‘a’ link that has a URL that matches the given
/// *        url. If found retrieves the given attribute of the ‘a’ element. Used for WKWebView
/// *
/// * @param attribute     The html attribute to retrieve from the ‘a’ link
/// * @param forLink       The link URL to retrieve the attribute from
/// * @param inWKWebView   The webview to search in
/// * @param completion    The completion handler where the attribute value is passed back
/// *
+ (void)getAttribute:(NSString * _Nullable)attribute forLink:(NSString * _Nullable)forLink inWKWebView:(WKWebView * _Nullable)inWKWebView completion:(void (^ _Nullable)(NSString * _Nullable))completion;
/// !
/// * @brief Finds all the ‘a’ elements in a document. For each element it compares the ‘href’
/// *        attribute to the supplied URL. If they match it then returns the supplied property
/// *        of the element. Used for WKWebView
/// *
/// * @param property      A function or property that can be called on an ‘a’ element.
/// * @param forLink       The link URL’s href to call the property on
/// * @param inWKWebView   The webview to search in
/// * @param completion    The completion handler where the attribute value gets passed back
/// *
+ (void)getProperty:(NSString * _Nullable)aProperty forLink:(NSString * _Nullable)forLink inWKWebView:(WKWebView * _Nullable)inWKWebView completion:(void (^ _Nullable)(NSString * _Nullable))completion;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_RESILIENT_CLASS("_TtC7MyChart39WPWelcomeWizardWebViewControllerManager")
@interface WPWelcomeWizardWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)initWithShouldLogoutOnClose:(BOOL)shouldLogoutOnClose;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
