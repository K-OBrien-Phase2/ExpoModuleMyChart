#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef PECORE_SWIFT_H
#define PECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PECore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

/// This wrapper control enables better storyboard visibility than what would otherwise be required (a UIButton of class PKAddPassButton, which doesn’t work very well).
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore17AddToWalletButton")
@interface AddToWalletButton : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class PEOrganizationContext;
@class NSString;
@class UIAlertController;
@protocol PEThemeProtocol;
@class UIAlertAction;
@class NSURL;

/// Utility class for alerts (UIAlertController)
SWIFT_CLASS("_TtC6PECore10AlertUtils")
@interface AlertUtils : NSObject
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param context the current organization context
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithContext:(PEOrganizationContext * _Nullable)context title:(NSString * _Nullable)title message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param theme the current theme
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithTheme:(id <PEThemeProtocol> _Nullable)theme title:(NSString * _Nullable)title message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param theme the current theme
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
/// \param alwaysInLTR indicates the message is always In English so we want it to be displayed in LTR always
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithTheme:(id <PEThemeProtocol> _Nullable)theme title:(NSString * _Nullable)title message:(NSString * _Nonnull)message alwaysInLTR:(BOOL)alwaysInLTR SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController for special character validation errors.
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeSpecialCharacterAlertController SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController for generic web service errors.
/// \param handler completion handler to
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)defaultWebServiceErrorAlertControllerWithHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController to display a warning to the user when a URL will be launched outside of the app, in the device browser.
/// These external URL launches occur when a web view loads a URL with a domain that is not listed as an “allowed host” by the organization.
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)externalLaunchAlertControllerWithUrl:(NSURL * _Nonnull)url urlString:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT;
/// Convenience method that generates an alert which will prompt the user to go to settings for the app, and also has a Don’t Allow button.
/// note:
/// This method exists as opposed to defining default value for declineButtonText so that we won’t have to provide nil for declineButtonText when calling this from objective C.
/// \param title title of the alert
///
/// \param message message of the alert
///
/// \param declineHandler additional actions that should be performed in case of user choosing to not go to settings
///
///
/// returns:
/// An instance of UIAlertController
+ (UIAlertController * _Nonnull)settingsAlertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nonnull)message declineHandler:(void (^ _Nullable)(void))declineHandler SWIFT_WARN_UNUSED_RESULT;
/// Convenience method that generates an alert which will prompt the user to go to settings for the app, and also has a Don’t Allow button.
/// \param title title of the alert
///
/// \param message message of the alert
///
/// \param declineButtonText text to use for the button that allows user to decline going to settings
///
/// \param declineHandler additional actions that should be performed in case of user choosing to not go to settings
///
///
/// returns:
/// An instance of UIAlertController
+ (UIAlertController * _Nonnull)settingsAlertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nonnull)message declineButtonText:(NSString * _Nonnull)declineButtonText declineHandler:(void (^ _Nullable)(void))declineHandler SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6PECore17AnimatedImageView")
@interface AnimatedImageView : UIView
/// This color will overwrite all fills and strokes in vector images
@property (nonatomic, copy) NSString * _Nullable tintColorHex;
/// Initialize with an image, bundle and optional tint color
- (nonnull instancetype)initWithImageNamed:(NSString * _Nonnull)resource in:(NSBundle * _Nonnull)bundle tintColor:(NSString * _Nullable)tint;
/// Initialize view; will need an image set later
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize from IB
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the currently visible image.
/// \param resource name of animated resource, like image.svg, or static image name in xcasset
///
/// \param bundle the bundle in which to find the resource
///
- (void)setImageWithName:(NSString * _Nonnull)resource in:(NSBundle * _Nonnull)bundle;
/// Removes any visible image.
- (void)clearImage;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, ApplicationType, open) {
  ApplicationTypeMyChart = 0,
  ApplicationTypeBedisde = 1,
};

enum FeatureTrackingMetric : NSInteger;
@class SummaryLevelTargetAndCount;

/// APIs for various audit mechanisms
SWIFT_CLASS("_TtC6PECore9AuditUtil")
@interface AuditUtil : NSObject
/// Submits feature usage to the database
/// \param featureTrackingMetric Metric to log feature use to
///
/// \param summaryLevelsTargetsAndCounts optional list of more specific feature logging, like a specific summary level and count. If empty, 1 feature use is logged to the facility level
///
+ (void)logFeatureUse:(enum FeatureTrackingMetric)featureTrackingMetric summaryLevelsTargetsAndCounts:(NSArray<SummaryLevelTargetAndCount *> * _Nonnull)summaryLevelsTargetsAndCounts;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Metrics to log feature use to. Corresponds to IDN records
typedef SWIFT_ENUM(NSInteger, FeatureTrackingMetric, open) {
  FeatureTrackingMetricUnknown = -1,
/// Metric to track the number of times the user prints
  FeatureTrackingMetricMobilePrint = 320127,
/// Metric to track the number of times the user jumps to the sign up page
  FeatureTrackingMetricMobileGoToSignup = 320266,
/// Metric to track the number of times the user jumps to the login page
  FeatureTrackingMetricMobileGoToLoginPage = 320267,
/// Metric to track the number of times the user jumps to a remote org
  FeatureTrackingMetricMobileJumpToAccount = 320268,
/// Metric to track the number of basic Live Activities that are created for a user
  FeatureTrackingMetricBasicLiveActivityCreated = 320309,
/// Metric to track the number of times the user turns on “Show daily trends” for glucose graphs
  FeatureTrackingMetricShowGlucoseTrends = 81146,
/// Metric to track the number of times the user accesses the Epic Fun Facts actvitiy
  FeatureTrackingMetricEpicFunFacts = 324080,
};


SWIFT_PROTOCOL("_TtP6PECore17BaseStyleProtocol_")
@protocol BaseStyleProtocol
- (NSString * _Nonnull)getThemeStyleName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getAttributeNames SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAttributeValueWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

/// Enumeration of possible biometric authentication types
typedef SWIFT_ENUM(NSInteger, BiometricAuthenticationType, open) {
/// The biometric authentication type of the device is unknown
  BiometricAuthenticationTypeUnknown = 0,
/// The device does not support any biometric authentication type
  BiometricAuthenticationTypeNone = 1,
/// The device supports TouchID
  BiometricAuthenticationTypeTouchID = 2,
/// The device supports FaceID
  BiometricAuthenticationTypeFaceID = 3,
/// The device supports OpticID
  BiometricAuthenticationTypeOpticID = 4,
};


SWIFT_CLASS("_TtC6PECore13BiometricUtil")
@interface BiometricUtil : NSObject
/// The <code>BiometricAuthenticationType</code> supported by this device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum BiometricAuthenticationType deviceBiometricAuthenticationType;)
+ (enum BiometricAuthenticationType)deviceBiometricAuthenticationType SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the current device supports any biometric authentication methods (faceID, touchID)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL deviceSupportsBiometricAuthentication;)
+ (BOOL)deviceSupportsBiometricAuthentication SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore12BottomButton")
@interface BottomButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIScrollView;

@interface BottomButton (SWIFT_EXTENSION(PECore)) <UIScrollViewDelegate>
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end

@class UIImage;

SWIFT_PROTOCOL("_TtP6PECore29BrandedAssetsProviderProtocol_")
@protocol BrandedAssetsProviderProtocol
/// @return websiteUrl the URL of the corresponding MyChart website (e.g. “https://server.com/MyChart/”)
- (NSString * _Nonnull)getWebsiteUrl SWIFT_WARN_UNUSED_RESULT;
/// @return The relative background image url (e.g. “en-US/images/background_mobile.png”)
- (NSString * _Nonnull)getRelativeHeaderBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// @return The relative base image directory (e.g. “en-US/images/”)
- (NSString * _Nonnull)getRelativeBaseImageDirectory SWIFT_WARN_UNUSED_RESULT;
/// @return If the environment has the Acordex License
- (BOOL)hasAcordexLicenseAsset SWIFT_WARN_UNUSED_RESULT;
/// Get the image from the local, no network calls
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// Get the image for the key, can use network calls
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
@end

enum PEBrandedColor : NSInteger;
@class UIColor;

SWIFT_PROTOCOL("_TtP6PECore28BrandedColorProviderProtocol_")
@protocol BrandedColorProviderProtocol
/// Gets a UIColor value for the specified PEBrandedColor.
/// \param color the PEBrandedColor to get a color value for
///
- (UIColor * _Nullable)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSBundle (SWIFT_EXTENSION(PECore))
/// Bundle for the PECore framework
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull PECore;)
+ (NSBundle * _Nonnull)PECore SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore27ButtonSandboxViewController")
@interface ButtonSandboxViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ButtonSandboxViewController (SWIFT_EXTENSION(PECore)) <UIScrollViewDelegate>
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


/// Source from which an image can be retrieved
SWIFT_PROTOCOL("_TtP6PECore15ImageDataSource_")
@protocol ImageDataSource
/// The URL from which the image can be loaded
@property (nonatomic, readonly, copy) NSString * _Nonnull imageURL;
@end


/// Source from which an image can be retrieved and cached. ImageLoader will automatically handle caching for objects of this type.
SWIFT_PROTOCOL("_TtP6PECore24CacheableImageDataSource_")
@protocol CacheableImageDataSource <ImageDataSource>
@end


SWIFT_PROTOCOL("_TtP6PECore17CardStyleProtocol_")
@protocol CardStyleProtocol <BaseStyleProtocol>
- (float)cornerRadius SWIFT_WARN_UNUSED_RESULT;
- (float)elevation SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)dropShadow SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)fillColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)borderColor SWIFT_WARN_UNUSED_RESULT;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore8CardView")
@interface CardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
@end

typedef SWIFT_ENUM(NSInteger, CardType, open) {
  CardTypeNormal = 0,
  CardTypeTopHalf = 1,
};

typedef SWIFT_ENUM(NSInteger, CenteredMessageTextViewStyle, open) {
  CenteredMessageTextViewStyleClear = 0,
  CenteredMessageTextViewStyleGreyedOut = 1,
  CenteredMessageTextViewStyleGreyedOutLargeWhiteIndicator = 2,
};

@class UIImageView;
@class UILabel;
@protocol CommunityDataRefreshViewDelegate;
@class CommunityRefreshInfo;

IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore24CommunityDataRefreshView")
@interface CommunityDataRefreshView : UIView
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified iconView;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified loadingIconView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified titleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified bodyLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified loadingLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified updateButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified dismissButton;
@property (nonatomic) BOOL isSetup;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
/// Initialize the view with title, delegate, and colors
/// \param delegate delegate to handle click event
///
- (void)setupBannerWithDelegate:(id <CommunityDataRefreshViewDelegate> _Nonnull)delegate;
/// Reset the banner in preparation of displaying new community connection information
- (void)resetBanner;
/// Update the text of the banner for the generic case
- (void)updateBannerText;
/// Update the text of the banner according to the community connections information
/// \param info the community connections information
///
- (void)updateBannerTextWithInfo:(CommunityRefreshInfo * _Nonnull)info;
@end

typedef SWIFT_ENUM(NSInteger, CommunityDataRefreshStatus, open) {
  CommunityDataRefreshStatusNORMAL = 0,
  CommunityDataRefreshStatusLOADING = 1,
  CommunityDataRefreshStatusERROR = 2,
};


SWIFT_CLASS("_TtCC6PECore24CommunityDataRefreshView20CommunityRefreshInfo")
@interface CommunityRefreshInfo : NSObject
- (nonnull instancetype)initWithSuccessOrgCount:(NSInteger)successOrgCount successOrgName:(NSString * _Nonnull)successOrgName errorOrgCount:(NSInteger)errorOrgCount errorOrgName:(NSString * _Nonnull)errorOrgName loadingOrgCount:(NSInteger)loadingOrgCount loadingOrgName:(NSString * _Nonnull)loadingOrgName canServerSupportWorkflowUpdate:(BOOL)canServerSupportWorkflowUpdate OBJC_DESIGNATED_INITIALIZER;
/// Get the community refresh status based on the connections info
///
/// returns:
/// community refresh status
- (enum CommunityDataRefreshStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore32CommunityDataRefreshViewDelegate_")
@protocol CommunityDataRefreshViewDelegate
- (void)launchRefreshView;
@end

typedef SWIFT_ENUM(NSInteger, CommunityUpdateContext, open) {
  CommunityUpdateContextALLERGIES = 0,
  CommunityUpdateContextHEALTHISSUES = 1,
  CommunityUpdateContextAPPOINTMENTS = 2,
  CommunityUpdateContextTESTRESULT = 3,
  CommunityUpdateContextMEDICATION = 4,
  CommunityUpdateContextMANAGEMYACCOUNT = 5,
};


SWIFT_CLASS("_TtC6PECore22CookieAllowListManager")
@interface CookieAllowListManager : NSObject
+ (CookieAllowListManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)addCookieToAllowListWithCookieName:(NSString * _Nonnull)cookieName;
- (void)removeCookieFromAllowListWithCookieName:(NSString * _Nonnull)cookieName;
- (void)clearAllCookiesFromAllowList;
- (NSSet<NSString *> * _Nonnull)getCookiesInAllowList SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIEvent;
@class UIGestureRecognizer;

/// This class provides an implementation of a native button that can be widely used. All buttons have a type, handle click events, and display text and/or an icon.
/// Types define most of the look-and-feel of a button. See the MyChart UX Guide for more details: https://uxguide/MyChart/components__buttons_mychart.php
/// Standard-type buttons are the most common type of button and their look-and-feel is primarily determined by their priority and tone.
/// Custom tones can be used to deviate from the standardized look-and-feel as necessary and support overrides for button color, text color, and icon color.
/// Floating-type buttons are similar to standard-type buttons, but they are intended to float at the bottom of the screen and automatically expand/collapse based on scroll events.
/// Link-type buttons are light-weight buttons with less visual emphasis. They are intended to be used for actions that are less important.
/// Shortcut-type buttons are specifically used by the shortcuts and quick-actions displayed on the MyChart home page.
SWIFT_CLASS("_TtC6PECore10CoreButton")
@interface CoreButton : UIView <UIGestureRecognizerDelegate>
/// Is the icon tinted
@property (nonatomic) IBInspectable BOOL shouldTintImage;
/// The text for the button
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
/// Whether the button UI should be in a disabled state or not
@property (nonatomic) IBInspectable BOOL isDisabled;
/// Whether the icon should come before or after the text
@property (nonatomic) IBInspectable BOOL putIconAfterText;
/// Override for the button’s tone color
@property (nonatomic, strong) IBInspectable UIColor * _Nullable toneColorOverride;
/// Override for the button’s text color
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColorOverride;
/// Override for the button’s icon color
@property (nonatomic, strong) IBInspectable UIColor * _Nullable iconColorOverride;
/// An override for the accessibility label to be announced for the button. If not set the buttons text will be used.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ScrollViewWillEndDraggingNotificationName;)
+ (NSString * _Nonnull)ScrollViewWillEndDraggingNotificationName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ScrollViewDidScrollNotificationName;)
+ (NSString * _Nonnull)ScrollViewDidScrollNotificationName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ScrollViewKey;)
+ (NSString * _Nonnull)ScrollViewKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VelocityKey;)
+ (NSString * _Nonnull)VelocityKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TargetContentOffsetKey;)
+ (NSString * _Nonnull)TargetContentOffsetKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     imageView: An AnimatedImageView to set an animated icon
///   </li>
/// </ul>
- (void)setIconWithImageView:(AnimatedImageView * _Nonnull)imageView;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     uri: A URI to load an image from
///   </li>
///   <li>
///     shouldTintImage: Whether the image loaded from the URI should be tinted according to the buttons tone
///   </li>
/// </ul>
- (void)setIconWithUri:(NSString * _Nullable)uri shouldTintImage:(BOOL)shouldTintImage;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     iconKey: The key for an icon stored on the device
///   </li>
///   <li>
///     bundle: The bundle where the icon is located
///   </li>
/// </ul>
- (void)setIconWithIconKey:(NSString * _Nullable)iconKey bundle:(NSBundle * _Nonnull)bundle;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     image: A UIImage to set as the icon
///   </li>
/// </ul>
- (void)setIconWithImage:(UIImage * _Nullable)image;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     image: A UIImage to set as the icon
///   </li>
/// </ul>
- (void)setIconWithImage:(UIImage * _Nullable)image shouldTintImage:(BOOL)shouldTintImage;
/// Sets an on click function for the button using a selector. Prefer the closure method and only use this if you notice memory leaks that can not be fixed within the closure.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     target: The target that the selector is owned by
///   </li>
///   <li>
///     selector: The selector to be called on click
///   </li>
/// </ul>
- (void)setOnClickWithTarget:(id _Nullable)target selector:(SEL _Nullable)selector;
/// Sets an on click function for the button using a closure. This is the preferred method over the selector method for platform parity reasons.
/// warning:
/// Selector recquires the use of weak self or will result in a memory leak
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     onClickSelector:the function to invoke when the button is clicked. This MUST use weak references if applicable to avoid retain cycles.
///   </li>
/// </ul>
- (void)setOnClick:(void (^ _Nullable)(void))onClickSelector;
/// Override touch target for button to confine to button subview
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// UIGestureRecognizerDelegate override to handle multiple gesture recognizer interactions
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// Helper to create userInfo object for scroll delegate of parent view controller
/// \param scrollView The scrollview from the delegate that is controlling the collapse/expand behavor of the button
///
/// \param velocity The velocity from the delegate
///
/// \param targetContentOffset The targetContentOffset from the delegate
///
///
/// returns:
/// A dictionary to be used as the UserInfo object in the notification to trigger a floating buttons collapse/expand behavior
+ (NSDictionary * _Nonnull)createUserInfoForScrollViewWillEndDraggingWithScrollView:(UIScrollView * _Nonnull)scrollView velocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset SWIFT_WARN_UNUSED_RESULT;
@end



/// This class represents a set of two buttons and coordinates the layout of those buttons based on their size and available space.
/// By default, buttons will be displayed along a horizontal axis. If there is insufficient space to display the buttons side-by-side,
/// the set will automatically switch to displaying the buttons along a vertical axis.
/// The default layout behavior of a button set can be changed through various properties, like forcing a vertical orientation.
SWIFT_CLASS("_TtC6PECore13CoreButtonSet")
@interface CoreButtonSet : UIStackView
/// Indicates whether or not the button set should be forced to vertical orientation.
/// If false (default), the button set will try to use a horizontal orientation if there is sufficient space.
@property (nonatomic) IBInspectable BOOL forceVerticalOrientation;
/// Whether the buttons in horizontal axis should be equal width
@property (nonatomic) IBInspectable BOOL equalWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// UIView
- (void)didAddSubview:(UIView * _Nonnull)subview;
/// UIView
/// Be careful if adding any calls to layoutIfNeeded from here, as it can cause infinite loops. See DLG 2081270
- (void)layoutSubviews;
@end


/// Coordinator class for <code>CoreWebView</code> handles interactions from UIKit to SwiftUI, such as the various <code>WKNavigationDelegate</code> methods
SWIFT_CLASS("_TtC6PECore22CoreWebViewCoordinator")
@interface CoreWebViewCoordinator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

@interface CoreWebViewCoordinator (SWIFT_EXTENSION(PECore)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
@end

@class WKDownload;
@class NSURLResponse;
@class NSData;

/// An implementation of <code>WKDownloadDelegate</code> for <code>CoreWebView</code> and other web views throughout the app.
/// The download manager can be assigned as the download delegate for <code>WKDownload</code> objects, and will invoke the provided callback in<code>CoreWebViewDownloadManager/init(onDownloadComplete:)</code> when the download completes.
SWIFT_CLASS("_TtC6PECore26CoreWebViewDownloadManager")
@interface CoreWebViewDownloadManager : NSObject <WKDownloadDelegate>
/// Invoked when the download needs a location to write the downloaded bytes.
/// note:
/// suggestedFilename will often be the same as response.suggestedFilename, but web content can specify the suggested download filename.  If the destination file URL is non-null, it must be a file that does not exist in a directory that does exist and can be written to.
/// \param download The download for which we need a file to which to write.
///
/// \param response The server response if this download was the result of an HTTP request, or a synthesized response for blob downloads.
///
/// \param suggestedFilename The suggested filename.
///
///
/// returns:
/// The URL pointing to a file where the download will write to, or nil if the download will be canceled
- (void)download:(WKDownload * _Nonnull)download decideDestinationUsingResponse:(NSURLResponse * _Nonnull)response suggestedFilename:(NSString * _Nonnull)suggestedFilename completionHandler:(void (^ _Nonnull)(NSURL * _Nullable))completionHandler;
/// Invoked when the download has failed.
/// \param download The download that has failed.
///
/// \param error The error indicating the failure reason.
///
/// \param resumeData This data can be passed to WKWebView resumeDownloadFromResumeData: to attempt to resume this download.
///
- (void)download:(WKDownload * _Nonnull)download didFailWithError:(NSError * _Nonnull)error resumeData:(NSData * _Nullable)resumeData;
/// Invoked when the download has finished successfully.
/// \param download The download that finished.
///
- (void)downloadDidFinish:(WKDownload * _Nonnull)download;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSDateFormatter (SWIFT_EXTENSION(PECore))
+ (NSDateFormatter * _Nonnull)EpicDateFormatter SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDate;
enum DateFormatStyle : NSInteger;
@class NSTimeZone;
@class NSLocale;

SWIFT_CLASS("_TtC6PECore8DateUtil")
@interface DateUtil : NSObject
/// Override for getDateString() without the optional parameter, for Objective-C
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nullable)date dateStyle:(enum DateFormatStyle)style SWIFT_WARN_UNUSED_RESULT;
/// Create a displayable string from a given date and a defined format
/// <ul>
///   <li>
///     Bridges to the implementation of stringFromDate:withDateFormat: in WPUtil_Dates
///   </li>
/// </ul>
/// @param date: the date to use as the source
/// @param dateStyle: the DateFormatStyle to use for date formatting
/// @param timeZone: optional time zone override for the date formatter
/// @return the string representation of the date
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nullable)date dateStyle:(enum DateFormatStyle)style timeZone:(NSTimeZone * _Nullable)timeZone SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nonnull)date dateStyle:(enum DateFormatStyle)style timeZone:(NSTimeZone * _Nullable)timeZone locale:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Create a date given the defined string format
/// @param dateString: the date as a string
/// @param dateStyle: the DateFormatStyle to use for date formatting
/// @return the string representation of the date, or nil if not parse-able
+ (NSDate * _Nullable)getDateFromString:(NSString * _Nullable)dateString dateStyle:(enum DateFormatStyle)style SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Standard date formats for PE apps
typedef SWIFT_ENUM(NSInteger, DateFormatStyle, open) {
/// The hour of the day, with AM/PM if necessary
  DateFormatStyleShortHour = 0,
/// Standard time format, with AM/PM as necessary.
/// Corresponds to DateFormatter.Style.short time formatting
  DateFormatStyleShortHoursMinutes = 1,
/// Shorthand date format (like 10/25/2019)
  DateFormatStyleShortMonthDateYear = 2,
/// Shorthand date and time format (like 10/25/2019 2:45 AM)
/// Corresponds to DateFormatter.Style.short date and time formatting
  DateFormatStyleShortMonthDateYearHoursMinutes = 3,
/// Abbreviated month and date (like Oct 25)
  DateFormatStyleMediumMonthDate = 4,
/// Abbreviated month, with date and year (like Oct 25 2019)
/// Corresponds to DateFormatter.Style.medium date
  DateFormatStyleMediumMonthDateYear = 5,
/// Abbreviated month, with date, year and time (like Oct 25 2019 2:45 AM)
/// Corresponds to DateFormatter.Style.medium date and DateFormatter.Style.short time formatting
  DateFormatStyleMediumMonthDateYearHoursMinutes = 6,
/// Month and date (like October 25)
  DateFormatStyleLongMonthDate = 7,
/// Day of the week, month, and date (like Friday, October 25)
  DateFormatStyleLongDayMonthDate = 8,
/// Month, date, and year (like October 25, 2019)
/// Corresponds to DateFormatter.Style.long date
  DateFormatStyleLongMonthDateYear = 9,
/// Just the day of the week
  DateFormatStyleDay = 10,
/// Server date format. Not for human-readable text.
  DateFormatStyleServerDate = 11,
/// Server date format with time. Not for human-readable text.
  DateFormatStyleServerDateTime = 12,
/// Server date format with time and timezone. Not for human-readable text.
  DateFormatStyleServerDateTimeWithTimeZone = 13,
};

@class PEPatientContext;

SWIFT_CLASS("_TtC6PECore13DirectUrlArgs")
@interface DirectUrlArgs : NSObject
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts;
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts patientContext:(PEPatientContext * _Nullable)patientContext;
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts myChartHost:(NSString * _Nullable)myChartHost;
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts myChartHost:(NSString * _Nullable)myChartHost patientContext:(PEPatientContext * _Nullable)patientContext OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITraitCollection;

/// View controller for embedded “how to” video
SWIFT_CLASS("_TtC6PECore27EmbeddedVideoViewController")
@interface EmbeddedVideoViewController : UIViewController
/// Set status bar style based on nav bar text color
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Class designed to help serialize strings to base64 encrypted data
SWIFT_CLASS("_TtC6PECore14EncryptionUtil")
@interface EncryptionUtil : NSObject
/// Primary method for encrypting interconnect session tokens
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSData * _Nonnull derivedKeyMethod1;)
+ (NSData * _Nonnull)derivedKeyMethod1 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore24ExtensibilityContextItem")
@interface ExtensibilityContextItem : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)type :(NSString * _Nonnull)name :(NSString * _Nonnull)value :(BOOL)isEncrypted OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PEUserContext;
@class SmartStyleModel;
@class GetExtensibleLinkResponse;
@class WebServiceFailedError;

SWIFT_CLASS("_TtC6PECore32ExtensibilityLaunchWebServiceAPI")
@interface ExtensibilityLaunchWebServiceAPI : NSObject
/// Runs the extensibility web service for a patient context.  Adds additional parameters to the web service based on what is passed in.
/// \param context the current patient context
///
/// \param fdiID extensibility record
///
/// \param fdiIDEncrypted if the fdiID parameter is encrypted
///
/// \param documentID document ID
///
/// \param ltkID LTK ID
///
/// \param ltkInst LTK scheduled instant
///
/// \param ordID ORD ID
///
/// \param orgID organization ID
///
/// \param isOrgExternal Whether the organization is external
///
/// \param contextItems additional context items
///
/// \param nowEncounterCSN Now Encounter CSN
///
/// \param nowEncounterUCI Now Encounter UCI
///
/// \param smartStyle FHIR Smart Style
///
/// \param onSuccess call back when the extensibility link finshes running
///
/// \param onFailure call back if the web service fails
///
///
/// returns:
/// An instance of WebService.
+ (void)runExtensibleLinkWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext fdiID:(NSString * _Nonnull)fdiID fdiIDEncrypted:(BOOL)fdiIDEncrypted documentID:(NSString * _Nonnull)documentID ltkID:(NSString * _Nonnull)ltkID ltkInst:(NSString * _Nonnull)ltkInst ordID:(NSString * _Nonnull)ordID orgID:(NSString * _Nonnull)orgID isOrgExternal:(BOOL)isOrgExternal contextItems:(NSArray<ExtensibilityContextItem *> * _Nonnull)contextItems nowEncounterCSN:(NSString * _Nonnull)nowEncounterCSN nowEncounterUCI:(NSString * _Nonnull)nowEncounterUCI smartStyle:(SmartStyleModel * _Nullable)smartStyle onSuccess:(void (^ _Nonnull)(GetExtensibleLinkResponse * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(WebServiceFailedError * _Nullable))onFailure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ExternalOrganizationLinkType, open) {
  ExternalOrganizationLinkTypeUndefined = 0,
  ExternalOrganizationLinkTypeMyChart = 1,
  ExternalOrganizationLinkTypeFhir = 2,
  ExternalOrganizationLinkTypeDxr = 3,
};

enum FeatureLoadStatus : NSInteger;
enum UrlType : NSInteger;
enum IDType : NSInteger;

/// This protocol helps bridge demographic information that a non-patient has, even if they don’t have a full patient record.
SWIFT_PROTOCOL("_TtP6PECore16PEPersonProtocol_")
@protocol PEPersonProtocol <NSObject>
/// Gets the FeatureLoadStatus for this patient
///
/// returns:
/// the FeatureLoadStatus of this patient
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s unique identifier (user or patient).
///
/// returns:
/// The unique identifier for this person.
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s unique encrypted identifier (user or patient).
///
/// returns:
/// The unique encrypted identifier for this person.
- (NSString * _Nonnull)getEncryptedIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Checks if a security point is present to access a given feature on behalf of the patient.
/// \param feature the feature to evaluate security for
///
///
/// returns:
/// True IFF the security point is present for the feature; False otherwise.
- (BOOL)hasSecurityPoint:(NSString * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s nickname. If a nickname hasn’t been explicitly chosen for this person, the person’s full name will be returned.
///
/// returns:
/// The nickname chosen for this person, or their full name as a fallback.
- (NSString * _Nullable)getNickname SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s nickname. If a nickname hasn’t been explicitly chosen for this person, the person’s full name will be returned.
/// \param preferRefusalName a boolean indicating whether or not a “refusal” name should be preferred
///
///
/// returns:
/// The nickname chosen for this person, or their full name as a fallback.
- (NSString * _Nullable)getNicknamePreferingRefusalName:(BOOL)preferRefusalName SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s full name.  This will either be the person’s full preferred name or, if a preferred name isn’t on file, the person’s full legal name.
///
/// returns:
/// The full name for this person.
- (NSString * _Nonnull)getFullname SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s color.  If a color hasn’t been explicitly chosen for this person, a default color will be returned.
///
/// returns:
/// The color chosen for this person, or a default color as a backup.
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s text color.  If a color hasn’t been explicitly chosen for this person, a default color will be returned.  This may be different than getColor because it will meet Accessibility standards
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, conditionally, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// \param useFallback a boolean indicating whether or not a fallback image should be returned if the person doesn’t have a photo
///
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
/// Gets the URL to use for web service requests that return data for the person. May return nil to indicate that the default URL for web service requests should be used.
/// \param urlType the type of URL that is being requested
///
///
/// returns:
/// The URL to use for web service requests that return data for the person, or nil to use a default URL.
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
/// Gets the account ID type for this person.
///
/// returns:
/// Account ID type corresponding to the IDType enum
- (enum IDType)getAccountIdType SWIFT_WARN_UNUSED_RESULT;
/// Updates the persons’s nickname.
/// \param nickname the new nickname for this person
///
- (void)updateNickname:(NSString * _Nullable)nickname;
/// Updates the index of the person’s color in the set of colors for people.
/// \param colorIndex the new index of a color for this person (1-7)
///
- (void)updateColorIndex:(NSInteger)colorIndex;
/// Updates the person’s photo.
/// \param photo the new photo for this person
///
- (void)updatePhoto:(UIImage * _Nullable)photo;
@end


SWIFT_CLASS("_TtC6PECore17FakeUIImagePerson")
@interface FakeUIImagePerson : NSObject <PEPersonProtocol>
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
- (enum IDType)getAccountIdType SWIFT_WARN_UNUSED_RESULT;
- (void)updateNickname:(NSString * _Nullable)nickname;
- (void)updateColorIndex:(NSInteger)colorIndex;
- (void)updatePhoto:(UIImage * _Nullable)photo;
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEncryptedIdentifier SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasSecurityPoint:(NSString * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getNickname SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getNicknamePreferingRefusalName:(BOOL)preferRefusalName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullname SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The FeatureLoadStatus of a patient is the loading status of features retrieved over H2G
typedef SWIFT_ENUM(NSInteger, FeatureLoadStatus, open) {
/// A FeatureLoadStatus was not received. Mainly handles version skew for servers that don’t support H2G-ized features. Essentially corresponds to FullyLoaded in those cases.
  FeatureLoadStatusUnknown = 0,
/// Features from at least one organization were retrieved for this patient, and H2G is no longer listening for more organizations.
  FeatureLoadStatusFullyLoaded = 1,
/// Features from at least one organization were retrieved for this patient, and H2G is still listening for more organizations.
  FeatureLoadStatusPartiallyLoaded = 2,
/// No features from external organizations were retrieved for this patient, but H2G is still listening for more organizations.
  FeatureLoadStatusLoading = 3,
/// No features from external organizations were retrieved for this patient, and H2G is no longer listening for more organizations.
  FeatureLoadStatusFailed = 4,
};

enum FileType : NSInteger;

SWIFT_CLASS("_TtC6PECore8FileUtil")
@interface FileUtil : NSObject
/// Prefix for URLs corresponding to a file saved in device storage
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FileURLPrefix;)
+ (NSString * _Nonnull)FileURLPrefix SWIFT_WARN_UNUSED_RESULT;
/// Get path for directory in String format
+ (NSString * _Nonnull)getPathForFileType:(enum FileType)fileType SWIFT_WARN_UNUSED_RESULT;
/// Clears the inbox directory & subdirectories of files.
/// Used to clean up files copied over when other apps share to MyChart.
+ (void)clearInboxDirectory;
/// Clears any immediate files inside the directory with the option to clear subdirectories.
+ (void)clearFilesInDirectoryWithDir:(NSString * _Nonnull)dir withSubDirectories:(BOOL)clearSubDirs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FileType, open) {
/// Permanent storage folder. Never wiped
/// Used for:
/// <ul>
///   <li>
///     Nothing so far
///   </li>
/// </ul>
  FileTypeDocumentDirectory = 0,
/// Inbox folder to receive files shared to the app. Subfolder of NSDocumentDirectory
/// Inbox is wiped after certain workflows and during logout
/// NOTE: Can read and delete files. Can not write or create new files.
/// Used for:
/// <ul>
///   <li>
///     Apple Health PDFs
///   </li>
/// </ul>
  FileTypeInboxDirectory = 1,
/// Permanent App-data folder to store app-related files never exposed to the user.
/// Subfolder of NSLibraryDirectory. Never wiped.
/// NOTE: This references the MyChart subfolder per Apple docs for app usage
/// Used for:
/// <ul>
///   <li>
///     Phonebook caching
///   </li>
/// </ul>
  FileTypeApplicationSupportDirectory = 2,
/// Temporary storage folder. Wiped after certain workflows, during login/logout, and by iOS
/// Used for:
/// <ul>
///   <li>
///     Loading Video documents / attachments
///   </li>
///   <li>
///     Sharing documents / attachments
///   </li>
///   <li>
///     Newly taken videos
///   </li>
/// </ul>
  FileTypeTemporaryDirectory = 3,
};

typedef SWIFT_ENUM(NSInteger, FontRamp, open) {
  FontRampDisplay = 0,
  FontRampH1 = 1,
  FontRampH2 = 2,
  FontRampH3 = 3,
  FontRampH4 = 4,
  FontRampBody = 5,
  FontRampSubtle = 6,
  FontRampLink = 7,
};

typedef SWIFT_ENUM(NSInteger, FontWeight, open) {
  FontWeightRegular = 0,
  FontWeightSemiBold = 1,
};

enum LaunchMode : NSInteger;

SWIFT_CLASS("_TtC6PECore25GetExtensibleLinkResponse")
@interface GetExtensibleLinkResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic) enum LaunchMode launchMode;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull allowedHosts;
@property (nonatomic, copy) NSString * _Nullable appStoreUrl;
@property (nonatomic, readonly) BOOL isWebRTC;
@end


SWIFT_CLASS("_TtC6PECore16GifAnimationView")
@interface GifAnimationView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class MyChartUILabel;

/// Standard banner class for H2G orgs that have failed to load for an activity
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore18H2GErrorBannerView")
@interface H2GErrorBannerView : UIView
/// Set this label to the banner text you want to appear next to the icon
@property (nonatomic, weak) IBOutlet MyChartUILabel * _Null_unspecified textLabel;
/// overriden to auto-shrink for vertical constaints and suppose accessibility
@property (nonatomic, getter=isHidden) BOOL hidden;
/// create in code
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// create from nib
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// render in IB
- (void)prepareForInterfaceBuilder;
@end


@interface H2GErrorBannerView (SWIFT_EXTENSION(PECore)) <UIGestureRecognizerDelegate>
/// Do not fire container view’s tap recognizer if delete is the tapped target.
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PEH2GOrgPopupComponentAPIProtocol;

/// Listener for taps to the H2G error banner
SWIFT_PROTOCOL("_TtP6PECore26H2GErrorBannerViewDelegate_")
@protocol H2GErrorBannerViewDelegate
/// Alerts the controller that the user has tapped the H2G banner
/// \param popupComponent the standard popupComponent that can show the details popup
///
- (void)didTapH2GBannerWithPopupComponent:(id <PEH2GOrgPopupComponentAPIProtocol> _Nonnull)popupComponent;
@optional
/// Callback to inform client that the user tapped the close button
- (void)didCloseH2GBanner;
@end

/// The type of overlay to initialize the homepage with
typedef SWIFT_ENUM(NSInteger, HomepageOverlayType, open) {
  HomepageOverlayTypeNone = 0,
  HomepageOverlayTypeUseDefaultLogic = 1,
  HomepageOverlayTypeProxySplashScreen = 2,
  HomepageOverlayTypeOnboardingScreen = 3,
};


SWIFT_CLASS("_TtC6PECore23HttpHeaderFieldsManager")
@interface HttpHeaderFieldsManager : NSObject
+ (HttpHeaderFieldsManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setHttpHeaderField:(NSString * _Nonnull)field withValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (void)removeHttpHeaderField:(NSString * _Nonnull)field;
- (void)removeAllHttpHeaderFields;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getAllHttpHeaderFields SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isHttpHeaderFieldAllowed:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate for handling bottom button expansion/shrinkage animation
SWIFT_PROTOCOL("_TtP6PECore30IBottomButtonAnimationDelegate_")
@protocol IBottomButtonAnimationDelegate
/// Get the current width of the enclosing view - for expanded frame drawing
- (CGFloat)getEnclosingViewWidth SWIFT_WARN_UNUSED_RESULT;
/// Get the current leading constraint constant - for expanded frame drawing
- (CGFloat)getLeadingConstraintConstant SWIFT_WARN_UNUSED_RESULT;
/// Notify enclosing view that button height has been changed
- (void)buttonHeightChangedWithNewHeight:(CGFloat)newHeight;
/// Have enclosing view handle leading and width constraints when expanded
- (void)switchToExpandedConstraints;
/// Have enclosing view handle leading and width constraints when shrunk
- (void)switchToShrunkConstraints;
@end

/// Models IC’s PatientAccessService.IDType
typedef SWIFT_ENUM(NSInteger, IDType, open) {
/// IDType can’t be determined.
  IDTypeUnknown = 0,
/// ID is internal. EPT for patient ID and WPR ID for account ID.
  IDTypeInternalId = 1,
/// Community ID. Used for Intraconnect.
  IDTypeCID = 2,
/// No IDType.
  IDTypeNone = 3,
/// Relationship ID. Used by remote proxy subjects. Account ID is Rel ID, no patient ID exists.
  IDTypeRelId = 4,
};

@class PELocale;

/// Retrieves the user-preferred languages set on this device
SWIFT_CLASS("_TtC6PECore23IOSDeviceLocaleSettings")
@interface IOSDeviceLocaleSettings : NSObject
- (NSArray<PELocale *> * _Nonnull)readLocales SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore19IOnboardingDelegate_")
@protocol IOnboardingDelegate
/// Signal that onboarding has been dismissed
- (void)onboardingDismissedWithActionCompleted:(BOOL)onboardingActionCompleted;
@end


SWIFT_PROTOCOL("_TtP6PECore29IOnboardingNavigationDelegate_")
@protocol IOnboardingNavigationDelegate
/// Action button was tapped
- (void)actionTapped;
/// Back button was tapped
- (void)backTapped;
/// Next button was tapped
- (void)nextTapped;
/// Play button was tapped
- (void)playTapped;
@end


@protocol ImageLoaderDelegate;

/// Utility to load images with special handling for cacheable and provider images
SWIFT_CLASS("_TtC6PECore11ImageLoader")
@interface ImageLoader : NSObject
/// Checks that an image source is valid and that we have never failed to load it
/// \param source The image source to validate
///
///
/// returns:
/// True if the image source is valid
+ (BOOL)canLoadImageWithSource:(id <ImageDataSource> _Nullable)source SWIFT_WARN_UNUSED_RESULT;
/// Checks that an image source is valid and that we have never failed to load it
/// \param source The image source to validate
///
/// \param context Patient context is only required for provider blob photos
///
///
/// returns:
/// True if the image source is valid
+ (BOOL)canLoadImageWithSource:(id <ImageDataSource> _Nullable)source andPatientContext:(PEPatientContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Attempts to load an image from the specified image source
/// \param source The image source for which to load an image
///
/// \param delegate Delegate to be called when the load succeeds or fails
///
/// \param context Patient context is only required for provider blob photos
///
+ (void)loadImageWithSource:(id <ImageDataSource> _Nullable)source delegate:(id <ImageLoaderDelegate> _Nonnull)delegate;
/// Attempts to load an image from the specified image source
/// \param source The image source for which to load an image
///
/// \param delegate Delegate to be called when the load succeeds or fails
///
/// \param context Patient context is only required for provider blob photos
///
+ (void)loadImageWithSource:(id <ImageDataSource> _Nullable)source delegate:(id <ImageLoaderDelegate> _Nonnull)delegate andPatientContext:(PEPatientContext * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate for handling image loading successes and failures
SWIFT_PROTOCOL("_TtP6PECore19ImageLoaderDelegate_")
@protocol ImageLoaderDelegate
/// Handler for when an image successfully loads
/// \param image The image that loaded
///
/// \param source The source for which this image loaded
///
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
/// Handler for when an image fails to load
/// \param source The source for which image loading failed
///
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end


/// Utilities related to images.
SWIFT_CLASS("_TtC6PECore9ImageUtil")
@interface ImageUtil : NSObject
/// Helper metehod to combine an organization’s brand logo with the “MyChart is Epic” image
/// \param brandLogoImage org logo
///
///
/// returns:
/// combined image, or the org logo if there were issues loading/combining the images
+ (UIImage * _Nonnull)combineEpicLogoWithBrandLogo:(UIImage * _Nonnull)brandLogoImage SWIFT_WARN_UNUSED_RESULT;
/// Helper method to set an org logo into an icon view, or fall back to a default org logo on failure
/// \param logoUrl the url of the organization logo
///
/// \param orgIconView the view to set the logo image into
///
+ (void)loadOrgLogoWithLogoUrl:(NSString * _Nonnull)logoUrl orgIconView:(UIView * _Nonnull)orgIconView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSMutableArray;
enum InlineEducationType : NSInteger;
@protocol PEPatientProtocol;

SWIFT_CLASS("_TtC6PECore30InlineEducationContextProvider")
@interface InlineEducationContextProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (InlineEducationContextProvider * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Populate util instance with an array of available education content contexts
/// \param contextIds NSMutableArray
///
- (void)setAvailableContextsFor:(NSMutableArray * _Nonnull)contextIds;
/// Check if a given Inline Education context is supported by the server (has FDI record configured)
/// \param educationType InlineEducationType
///
- (BOOL)isContextAvailableFor:(enum InlineEducationType)educationType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasSecurityPointForContextWithEducationType:(enum InlineEducationType)educationType patient:(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// Remove all contexts between session
+ (void)resetContextState;
@end


SWIFT_PROTOCOL("_TtP6PECore29InlineEducationSourceProtocol_")
@protocol InlineEducationSourceProtocol
/// Indicates whether we’ve set up I WDF 96033 for the corresponding InlineEducationType (WDF 96031)
- (BOOL)hasInlineEducationSource SWIFT_WARN_UNUSED_RESULT;
/// Returns InlineEducationType (I WDF 96031)
- (enum InlineEducationType)getInlineEducationContext SWIFT_WARN_UNUSED_RESULT;
/// Generally returns the model record ID, used to resolve mnemonics in the FDI
- (NSString * _Nonnull)getInlineEducationContextID SWIFT_WARN_UNUSED_RESULT;
/// Return a search keyword - used for H2G records or fallback only
- (NSString * _Nonnull)getInlineEducationSearchTerm SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, InlineEducationType, open) {
  InlineEducationTypeDiagnoses = 1,
  InlineEducationTypeMedications = 2,
  InlineEducationTypeSurgicalProcedures = 3,
  InlineEducationTypeLabResults = 4,
  InlineEducationTypeAllergies = 5,
  InlineEducationTypeImmunizations = 6,
  InlineEducationTypeKeyword_Diagnoses = 7,
  InlineEducationTypeKeyword_LabResults = 8,
  InlineEducationTypeAppointmentProcedures = -1,
};

@protocol PEComponentHostProtocol;
@class PEEncounterContext;

/// Inline Education Infobutton
SWIFT_CLASS("_TtC6PECore19InlineEducationView")
@interface InlineEducationView : UIImageView
- (BOOL)setInlineEducationSourceWithSource:(id <InlineEducationSourceProtocol> _Null_unspecified)source componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost patientContext:(PEPatientContext * _Nullable)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext hostVC:(UIViewController * _Nullable)hostVC onShowLoadingIndicator:(void (^ _Nonnull)(void))onShowLoadingIndicator onHideLoadingIndicator:(void (^ _Nonnull)(void))onHideLoadingIndicator SWIFT_WARN_UNUSED_RESULT;
- (void)onInlineEducationViewClick;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getAccessibilityString SWIFT_WARN_UNUSED_RESULT;
@end

enum TextAlignment : NSInteger;

SWIFT_CLASS("_TtC6PECore8Language")
@interface Language : NSObject
@property (nonatomic, copy) NSString * _Nonnull code;
@property (nonatomic) enum TextAlignment textAlignment;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LaunchMode, open) {
  LaunchModeLaunchInternal = 1,
  LaunchModeLaunchExternal = 2,
  LaunchModeLaunchExternalTab = 3,
};

@class PELiveModel;

SWIFT_PROTOCOL("_TtP6PECore15LiveModelHolder_")
@protocol LiveModelHolder
- (PELiveModel * _Nullable)getLiveModel SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore20LoadingIndicatorView")
@interface LoadingIndicatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
+ (LoadingIndicatorView * _Nonnull)getNewLoadingIndicator:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Create a full screen loading indicator
/// \param view The view to grab the topmost superview from
///
///
/// returns:
/// a full screen LoadingIndicator view
+ (LoadingIndicatorView * _Nonnull)getNewFullScreenLoadingIndicator:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToSuperview;
- (void)showMessage:(enum CenteredMessageTextViewStyle)style :(NSString * _Nullable)msg :(BOOL)isTxtMode;
/// Hide the loading text and only show the loading indicator when the view is visible.
- (void)removeLoadingText;
@end


/// Simple class that loads the locale settings from both the device settings and the Epic settings and chooses the locale to use for CurrentLocale.
SWIFT_CLASS("_TtC6PECore14LocaleSettings")
@interface LocaleSettings : NSObject
@property (nonatomic, strong) PELocale * _Nonnull currentLocale;
@property (nonatomic, strong) PELocale * _Nonnull defaultLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIPanGestureRecognizer;

SWIFT_CLASS("_TtC6PECore11ToolTipView")
@interface ToolTipView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)handleTap:(UIPanGestureRecognizer * _Nonnull)sender;
@end


SWIFT_CLASS("_TtC6PECore18LocalesToolTipView")
@interface LocalesToolTipView : ToolTipView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MidLoginOnboardingStep, open) {
  MidLoginOnboardingStepTwoFactorEnrollment = 0,
  MidLoginOnboardingStepRequiredPasswordReset = 1,
  MidLoginOnboardingStepOrgTermsAndConditions = 2,
  MidLoginOnboardingStepSecondaryLoginSetup = 3,
  MidLoginOnboardingStepHomePageWelcome = 4,
  MidLoginOnboardingStepSelfSubmittedPushNotificationsSetup = 5,
};


/// The standard UIKit view for a “card” that groups related content together.
SWIFT_CLASS("_TtC6PECore15MyChartCardView")
@interface MyChartCardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartWebArgs;
@class MyChartWebViewControllerManager;
enum ButtonStyle : NSInteger;
@class NSNotification;

/// WebView Controller used to log into MyChart or open an external web view. Corresponds to MyChartWebViewFragment in java.
SWIFT_CLASS("_TtC6PECore24MyChartWebViewController")
@interface MyChartWebViewController : UIViewController
/// Show user in tiltle bar Key
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kWPKeyShowUserInfoInTitleBar;)
+ (NSString * _Nonnull)kWPKeyShowUserInfoInTitleBar SWIFT_WARN_UNUSED_RESULT;
/// Skips manual session maintenance when the view deinits
@property (nonatomic) BOOL skipSessionMaintenance;
/// Get a new viewController from the storyboard and set up the web view. Defaults to no close button and showing the back button.
/// \param webViewArgs Args that you want the web view to use
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
/// \param shouldHideComponentHostEpicLogo Whether the componet host should hide Epic logo in the nav bar
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed shouldHideComponentHostEpicLogo:(BOOL)shouldHideComponentHostEpicLogo SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
/// \param shouldHideComponentHostEpicLogo Whether the componet host should hide Epic logo in the nav bar
///
/// \param shouldRefreshWebViews Whether any other webviews should be refreshed when this webview is closed
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed shouldHideComponentHostEpicLogo:(BOOL)shouldHideComponentHostEpicLogo shouldRefreshWebViews:(BOOL)shouldRefreshWebViews SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
/// \param shouldHideComponentHostEpicLogo Whether the componet host should hide Epic logo in the nav bar
///
/// \param shouldRefreshWebViews Whether any other webviews should be refreshed when this webview is closed
///
/// \param shouldConstrainToKeyboard Determines where we are implementing native keyboard tracking features in this viewController
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed shouldHideComponentHostEpicLogo:(BOOL)shouldHideComponentHostEpicLogo shouldRefreshWebViews:(BOOL)shouldRefreshWebViews shouldConstrainToKeyboard:(BOOL)shouldConstrainToKeyboard SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view using a Url. (Use for opening allowed-host, non-MyChart links in this fragment)
/// \param directUrlArgs Args for initializing directly via a url instead a mode
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view using a Url. (Use for opening allowed-host, non-MyChart links in this fragment)
/// \param directUrlArgs Args for initializing directly via a url instead a mode
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton SWIFT_WARN_UNUSED_RESULT;
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton disableJavascriptCommunication:(BOOL)disableJavascriptCommunication SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
/// Sets if we should be listening for a refresh on the web page for any reason
- (void)setRefreshNotification;
/// Reload the web view.
- (void)reload;
/// The javascript function to execute before naivgate away from the current MO activity
- (void)onNavigateAway;
/// Pass incoming notification to manager for handling
/// \param notification notification
///
- (void)didReceiveNotifications:(NSNotification * _Nonnull)notification;
- (void)cancelAndClose;
/// Back button handler
- (void)didTapBackButton;
/// Close button handler
- (void)didTapCloseButton;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum for controlling the functionality of the close button
typedef SWIFT_ENUM(NSInteger, ButtonStyle, open) {
/// No close button shown to the user
  ButtonStyleNone = 0,
/// When attempting to close via close button, the web view will NOT try and save before closing
  ButtonStyleClose = 1,
/// When attempting to close via close button, the web view will try and save before closing
  ButtonStyleFinishLater = 2,
};

@class WKNavigationResponse;

/// Web view controller for the MyChart Central v1 Homepage
SWIFT_CLASS("_TtC6PECore39MyChartCentralHomepageWebViewController")
@interface MyChartCentralHomepageWebViewController : MyChartWebViewController
- (void)viewWillAppear:(BOOL)animated;
- (BOOL)shouldOverrideUrlResponseBehaviorFor:(WKNavigationResponse * _Nonnull)navigationResponse SWIFT_WARN_UNUSED_RESULT;
- (void)onPageStartedWithUrl:(NSURL * _Nonnull)url;
- (void)onPageFinishedWithUrl:(NSURL * _Nonnull)url;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This manager handles events from the MyChartWebViewController. This manager is inteneded to be subclassed for a MO activity and have the necessary functions overriden to handle events important to the specific activity.
/// This manager super class is meant to serve general functionality for all or most of the MO activities. If functionality is needed that will be used by most other activities, it should be added here or in the MyChartWebViewController. However, functionality that is needed for a specific activity, it should be handled in a subclass of this manager that is specific to that activity.
/// Corresponds to MyChartWebViewFragmentManager in Java.
SWIFT_CLASS("_TtC6PECore31MyChartWebViewControllerManager")
@interface MyChartWebViewControllerManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Web view controller manager for the MyChart Central v1 Homepage
SWIFT_CLASS("_TtC6PECore46MyChartCentralHomepageWebViewControllerManager")
@interface MyChartCentralHomepageWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore24MyChartJavascriptManager")
@interface MyChartJavascriptManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore25MyChartJavascriptProtocol_")
@protocol MyChartJavascriptProtocol
- (void)onJavascriptRequestsClose;
- (void)resetIdleTimer;
/// Called by javascript to hide or show the close button on a component popup web view
- (void)disableCloseButton;
- (void)reenableCloseButton;
/// Called by javascript to set the title for the webview. Used to change the title of the webview for multi-step MO workflows
/// \param title The title for the webview
///
- (void)setWebViewTitleWithNewTitle:(NSString * _Nonnull)newTitle;
- (void)locationHandler;
- (void)setWebViewStateChangedWithStateMessage:(NSString * _Nonnull)stateMessage;
- (void)setSearchBarInputValueWithQuery:(NSString * _Nonnull)query;
- (void)focusSearchBarInput;
- (void)onEpicPxMobileIntegrationReady;
@end


/// An IBDesignable UIView that loads from its own XIB
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore15SelfLoadingView")
@interface SelfLoadingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;

/// The standard UIKit view for entering/editing text in MyChart.
SWIFT_CLASS("_TtC6PECore20MyChartTextFieldView")
@interface MyChartTextFieldView : SelfLoadingView
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified backgroundView;
@property (nonatomic, weak) IBOutlet UITextField * _Null_unspecified textField;
- (nonnull instancetype)initWithHint:(NSString * _Nullable)hint startingValue:(NSString * _Nullable)startingValue OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UITextView;
@class UIFont;

/// The standard UIKit view for displaying text in MyChart.
SWIFT_CLASS("_TtC6PECore14MyChartUILabel")
@interface MyChartUILabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the font ramp for this MyChartUILabel.
- (void)setFontRampWithFontRamp:(enum FontRamp)fontRamp;
/// Helper method to apply the text style, based on the provided font ramp, to a UILabel.
+ (void)applyFontRampToLabelWithUiLabel:(UILabel * _Nonnull)uiLabel fontRamp:(enum FontRamp)fontRamp;
/// Helper method to apply the text style, based on the provided font ramp, to a UITextView.
+ (void)applyFontRampToTextViewWithUiTextView:(UITextView * _Nonnull)uiTextView fontRamp:(enum FontRamp)fontRamp;
/// Converts the provided font ramp to a UIFont.
+ (UIFont * _Nonnull)getCustomFontWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
@end

@protocol WKScriptMessageHandler;
@protocol WKScriptMessageHandlerWithReply;
@class WKContentWorld;

/// Use this for WKUserContentControllers to avoid memory leaks caused by script message handlers
/// See this stack overflow for more information:
/// https://stackoverflow.com/questions/26383031/wkwebview-causes-my-view-controller-to-leak
SWIFT_CLASS("_TtC6PECore28MyChartUserContentController")
@interface MyChartUserContentController : WKUserContentController
- (void)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler name:(NSString * _Nonnull)name;
- (void)addScriptMessageHandlerWithReply:(id <WKScriptMessageHandlerWithReply> _Nonnull)scriptMessageHandlerWithReply contentWorld:(WKContentWorld * _Nonnull)contentWorld name:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartWebParameter;
@protocol PEOrganizationInfoProtocol;

/// Contains a collection of parameters needed to generate a valid MO url link by the server
SWIFT_CLASS("_TtC6PECore14MyChartWebArgs")
@interface MyChartWebArgs : NSObject
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters;
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters organization:(id <PEOrganizationInfoProtocol> _Nullable)organization;
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters organization:(id <PEOrganizationInfoProtocol> _Nullable)organization OBJC_DESIGNATED_INITIALIZER;
/// \param baseArgs Args to copy all of the properties from, except parameters
///
/// \param parameters Parameters to use with the new args
/// Create a new object copying all of the parameters from baseArgs, except using the new parameters
///
- (nonnull instancetype)initWithBaseArgs:(MyChartWebArgs * _Nonnull)baseArgs parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A web query parameter set  stored as a key value pair
SWIFT_CLASS("_TtC6PECore19MyChartWebParameter")
@interface MyChartWebParameter : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)name :(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6PECore25MyChartWebQueryParameters")
@interface MyChartWebQueryParameters : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ActionKey;)
+ (NSString * _Nonnull)ActionKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowedReasonForVisitKey;)
+ (NSString * _Nonnull)AllowedReasonForVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ApptCountKey;)
+ (NSString * _Nonnull)ApptCountKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ApptReferenceIdKey;)
+ (NSString * _Nonnull)ApptReferenceIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CampaignIdKey;)
+ (NSString * _Nonnull)CampaignIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CanDirectScheduleKey;)
+ (NSString * _Nonnull)CanDirectScheduleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextKey;)
+ (NSString * _Nonnull)ContextKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CsnKey;)
+ (NSString * _Nonnull)CsnKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CsnIsEncryptedKey;)
+ (NSString * _Nonnull)CsnIsEncryptedKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CustomModeKey;)
+ (NSString * _Nonnull)CustomModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DxoIdKey;)
+ (NSString * _Nonnull)DxoIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ECheckInConfirmKey;)
+ (NSString * _Nonnull)ECheckInConfirmKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ECsnKey;)
+ (NSString * _Nonnull)ECsnKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HideReasonForVisitStepKey;)
+ (NSString * _Nonnull)HideReasonForVisitStepKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HideTabsKey;)
+ (NSString * _Nonnull)HideTabsKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HMDontEncryptTopicKey;)
+ (NSString * _Nonnull)HMDontEncryptTopicKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HMTopicIDKey;)
+ (NSString * _Nonnull)HMTopicIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IdKey;)
+ (NSString * _Nonnull)IdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsEVisitKey;)
+ (NSString * _Nonnull)IsEVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsXorgFeatureAvailableKey;)
+ (NSString * _Nonnull)IsXorgFeatureAvailableKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LtkIdKey;)
+ (NSString * _Nonnull)LtkIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LtkInstantKey;)
+ (NSString * _Nonnull)LtkInstantKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MedRefillModeKey;)
+ (NSString * _Nonnull)MedRefillModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MessageIdKey;)
+ (NSString * _Nonnull)MessageIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ModeKey;)
+ (NSString * _Nonnull)ModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOWorkflowKey;)
+ (NSString * _Nonnull)MOWorkflowKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NowEncounterCSN;)
+ (NSString * _Nonnull)NowEncounterCSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NowEncounterUCI;)
+ (NSString * _Nonnull)NowEncounterUCI SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PostLoginUrlKey;)
+ (NSString * _Nonnull)PostLoginUrlKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PrescriptionIDKey;)
+ (NSString * _Nonnull)PrescriptionIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ProviderBioKey;)
+ (NSString * _Nonnull)ProviderBioKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ProviderIdKey;)
+ (NSString * _Nonnull)ProviderIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ReasonForVisitKey;)
+ (NSString * _Nonnull)ReasonForVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SchedulingTicketIdKey;)
+ (NSString * _Nonnull)SchedulingTicketIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SkipMobileLogoutKey;)
+ (NSString * _Nonnull)SkipMobileLogoutKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull StatusKey;)
+ (NSString * _Nonnull)StatusKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SourceRouteKey;)
+ (NSString * _Nonnull)SourceRouteKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SubModeKey;)
+ (NSString * _Nonnull)SubModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SuggestedTasksKey;)
+ (NSString * _Nonnull)SuggestedTasksKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SupportsMobileBannerLinksKey;)
+ (NSString * _Nonnull)SupportsMobileBannerLinksKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TaskIdKey;)
+ (NSString * _Nonnull)TaskIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TicketIdKey;)
+ (NSString * _Nonnull)TicketIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenKey;)
+ (NSString * _Nonnull)TokenKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TreeIdKey;)
+ (NSString * _Nonnull)TreeIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UrlKey;)
+ (NSString * _Nonnull)UrlKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WorkflowKey;)
+ (NSString * _Nonnull)WorkflowKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WorkflowCompleteKey;)
+ (NSString * _Nonnull)WorkflowCompleteKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XOrgIdKey;)
+ (NSString * _Nonnull)XOrgIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TicklerMethod;)
+ (NSString * _Nonnull)TicklerMethod SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EOrgIdKey;)
+ (NSString * _Nonnull)EOrgIdKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

/// Custom CLLocationManagerDelegate to be used in WebViews so that we can handle location requests natively
SWIFT_CLASS("_TtC6PECore39MyChartWebViewCLLocationManagerDelegate")
@interface MyChartWebViewCLLocationManagerDelegate : NSObject <CLLocationManagerDelegate>
/// Location manager event when the location has changed.
/// \param manager Location manager object
///
/// \param locations Array of location objects containing lat / long
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Location manager event when the location couldn’t be retrieved, sending that response to the site.
/// \param manager Location manager object
///
/// \param error Error object / reason
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
/// Location manager event when the app level location permission changes, setting the current location if previously denied.
/// \param manager Location manager object
///
/// \param status Previous authorization status
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A ViewController can launch a deep link
SWIFT_PROTOCOL("_TtP6PECore28PEDeepLinkLaunchableProtocol_")
@protocol PEDeepLinkLaunchableProtocol
/// Set the deep link  parameters dictionary to the  ViewController
- (void)setDeepLinkLaunchParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)deepLinkLaunchParameters;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <PEDeepLinkLaunchableProtocol>
- (void)setDeepLinkLaunchParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)deepLinkLaunchParameters;
@end

@class WKScriptMessage;

@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WKScriptMessageHandlerWithReply>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message replyHandler:(void (^ _Nonnull)(id _Nullable, NSString * _Nullable))completionHandler;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end


SWIFT_PROTOCOL("_TtP6PECore19WebActivityListener_")
@protocol WebActivityListener
- (void)onActivity;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WebActivityListener>
- (void)onActivity;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@class UIBarButtonItem;

/// A ViewController specifically designed to be hosted in a PEComponentHost.
SWIFT_PROTOCOL("_TtP6PECore33PEHostableComponentViewController_")
@protocol PEHostableComponentViewController
/// Tells the hostable ViewController what its host is, so it can keep a weak reference.
/// REMEMBER TO ONLY KEEP A WEAK REFERENCE, so we don’t get retain cycles
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
@optional
/// Hosted view controllers can implement this function and return true to ask the host to show the user’s information in the navigation bar, as opposed to the current patient’s information.
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Hosted view controllers can implement this function and return true to ask the host hide the “MyChart is Epic” logo in the navigation bar.
- (BOOL)shouldHideComponentHostEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Hosted view controllers can implement this function and return true to ask the host hide the photo in the navigation bar. The photo should only be hidden if it’s displayed elsewhere in the activity.
- (BOOL)shouldHideComponentHostPhotoInNavBar SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a nullable UIBarButtonItem for the left UIBarButtonItem of the parent view controller
- (UIBarButtonItem * _Nullable)getLeftBarButtonItem SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a nullabe UIBarButtonItem for the right UIBarButtonItem of the parent view controller
- (UIBarButtonItem * _Nullable)getRightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
/// checks if the current view controller should warn the user before closing, and calls the appropriate callback
- (void)shouldWarnUserBeforeUnloadWithShowWarning:(void (^ _Nonnull)(void))showWarning continueWithoutWarning:(void (^ _Nonnull)(void))continueWithoutWarning;
- (void)shouldShowComponentHostBackButtonWithCallback:(void (^ _Nonnull)(BOOL))callback;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <PEHostableComponentViewController>
/// Set the component host to the new value
/// \param host New Component host to be used
///
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)host;
- (void)shouldShowComponentHostBackButtonWithShowBackNavigation:(void (^ _Nonnull)(BOOL))showBackNavigation;
/// Create the back button, if it existss
- (UIBarButtonItem * _Nullable)getLeftBarButtonItem SWIFT_WARN_UNUSED_RESULT;
/// Create the close button, if it exists
- (UIBarButtonItem * _Nullable)getRightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
- (void)shouldWarnUserBeforeUnloadWithShowWarning:(void (^ _Nonnull)(void))showWarning continueWithoutWarning:(void (^ _Nonnull)(void))continueWithoutWarning;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldHideComponentHostEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <MyChartJavascriptProtocol>
/// When the javascript requests to close, logout and close the web view.
- (void)onJavascriptRequestsClose;
- (void)resetIdleTimer;
- (void)setWebViewTitleWithNewTitle:(NSString * _Nonnull)newTitle;
- (void)disableCloseButton;
- (void)reenableCloseButton;
/// Javascript hook to handle a location request from the site.
- (void)locationHandler;
- (void)setWebViewStateChangedWithStateMessage:(NSString * _Nonnull)stateMessage;
- (void)setSearchBarInputValueWithQuery:(NSString * _Nonnull)query;
- (void)focusSearchBarInput;
- (void)onEpicPxMobileIntegrationReady;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore))
/// Handle back navigation from the pressing the back button
- (void)handleBackNavigation;
- (BOOL)canClose SWIFT_WARN_UNUSED_RESULT;
/// If the navigation response behavior should be overridden. Serves a similar purpose to Android’s shouldOverrideHttpErrorWithStatusCode
- (BOOL)shouldOverrideUrlResponseBehaviorFor:(WKNavigationResponse * _Nonnull)navigationResponse SWIFT_WARN_UNUSED_RESULT;
/// Tell the manager that the page has started
- (void)onPageStartedWithUrl:(NSURL * _Nonnull)url;
/// Tell the manager that the page has finished loading
- (void)onPageFinishedWithUrl:(NSURL * _Nonnull)url;
+ (void)promptUserWithLaunchOutsideAlertWithRootVC:(UIViewController * _Nonnull)rootVC onLaunch:(void (^ _Nonnull)(void))onLaunch onClose:(void (^ _Nonnull)(void))onClose;
@end



@interface NSData (SWIFT_EXTENSION(PECore))
- (NSData * _Nonnull)toSHA1 SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSLocale (SWIFT_EXTENSION(PECore))
/// Static formatter locale to be used for XML operations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSLocale * _Nonnull xmlFormatterLocale;)
+ (NSLocale * _Nonnull)xmlFormatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the current 12h/24h timeformat
/// Convenience extension to objc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull timeFormat;)
+ (NSString * _Nonnull)timeFormat SWIFT_WARN_UNUSED_RESULT;
/// Retrieves whether the device is displaying in 24h
/// Convenience extension to objc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isDevice24Hour;)
+ (BOOL)isDevice24Hour SWIFT_WARN_UNUSED_RESULT;
+ (PELocale * _Nonnull)commandLocale SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSNotification (SWIFT_EXTENSION(PECore))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull refreshWebView;)
+ (NSString * _Nonnull)refreshWebView SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull refreshAccountSettings;)
+ (NSString * _Nonnull)refreshAccountSettings SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull refreshAccountSettingsDeviceList;)
+ (NSString * _Nonnull)refreshAccountSettingsDeviceList SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull reloadComponentPaneHostedViewController;)
+ (NSString * _Nonnull)reloadComponentPaneHostedViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
- (NSString * _Nonnull)addQueryParamToUrlwithKey:(NSString * _Nonnull)key andValue:(NSString * _Nonnull)value withEncoding:(BOOL)shouldEncode SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
- (NSString * _Nonnull)fromAES128StringWithKey:(NSData * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toAES128StringWithKey:(NSData * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
+ (BOOL)isNullOrWhiteSpace:(NSString * _Nullable)str SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getBaseOrgId:(NSString * _Nullable)orgID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)areAffiliates:(NSString * _Nullable)orgID1 and:(NSString * _Nullable)orgID2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSURL (SWIFT_EXTENSION(PECore))
/// Indicates whether or not this URL is an “about” URL, like “about:blank”.
///
/// returns:
/// True IFF the URL is an “about” URL; false otherwise.
- (BOOL)isAboutUrl SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes navigation between view controllers in a way that emphasizes the workflow step, not the visual appearance of the transition.
typedef SWIFT_ENUM(NSInteger, NavigationType, open) {
/// The user is entering an entirely new workflow. This should be a large visual transition.
  NavigationTypeNewWorkflow = 0,
/// The user has selected something that will show them more detailed information about a part of the whole that they were looking at.
  NavigationTypeDrilldown = 1,
/// The user has progressed through a workflow to the point where they can no longer go back.
  NavigationTypeReplacement = 2,
/// Used to show contextual information about part of the screen, but it shouldn’t feel like the user is going anywhere new.
  NavigationTypeInformationPopover = 3,
/// Used to show important information as an alert on top of the current screen.
  NavigationTypeAlert = 4,
};


SWIFT_CLASS("_TtC6PECore22NotificationCenterUtil")
@interface NotificationCenterUtil : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSNumberFormatter (SWIFT_EXTENSION(PECore))
+ (NSNumberFormatter * _Nonnull)EpicUSFormatter SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)EpicDefaultFormatter SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)EpicCurrencyFormatter SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore29OnExtensibilityActionProtocol_")
@protocol OnExtensibilityActionProtocol
- (void)onLaunchFailure;
- (void)onExtensibilityWebServiceComplete;
- (void)onExtensibilityWebServiceStarted;
- (void)performInternalLaunchWithUrl:(NSString * _Nonnull)url allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts;
@end

typedef SWIFT_ENUM(NSInteger, OnboardingType, open) {
  OnboardingTypePreLoginOnboarding = 0,
  OnboardingTypeMidLoginOnboarding = 1,
  OnboardingTypeHomePageOnboarding = 2,
  OnboardingTypeDetailedPushNotificationOnboarding = 3,
};


enum PEAlertType : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore15PEAlertProtocol_")
@protocol PEAlertProtocol
- (NSInteger)getCount SWIFT_WARN_UNUSED_RESULT;
- (enum PEAlertType)getType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEAlertType, open) {
  PEAlertTypeUnknown = 0,
  PEAlertTypeHealthReminders = 100,
  PEAlertTypeTasks = 2000,
  PEAlertTypeTaskChanges = 2001,
  PEAlertTypeNewInpatientLab = 62,
  PEAlertTypeNewOutpatientLab = 61,
};


SWIFT_PROTOCOL("_TtP6PECore16PEAppleWatchAPIs_")
@protocol PEAppleWatchAPIs
- (UIAlertController * _Nullable)getPrelaunchAlertControllerOnAccept:(void (^ _Nonnull)(void))onAccept onCancel:(void (^ _Nullable)(void))onCancel SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nonnull)getLinkingViewControllerOnLinkComplete:(void (^ _Nullable)(BOOL))onLinkComplete onLinkCanceled:(void (^ _Nullable)(void))onLinkCanceled SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEAppleWatchState, open) {
  PEAppleWatchStateNotLinkable = 0,
  PEAppleWatchStateUnlinked = 1,
  PEAppleWatchStateLinkedToThisOrg = 2,
  PEAppleWatchStateLinkedToAnotherOrg = 3,
};


/// Base IComponentAPI interface.  All component API interfaces must extend this.
SWIFT_PROTOCOL("_TtP6PECore22PEComponentAPIProtocol_")
@protocol PEComponentAPIProtocol
@end


/// Application Level apis - Methods in this interface should be application/build specific and not used when common utils will do.
SWIFT_PROTOCOL("_TtP6PECore33PEApplicationComponentAPIProtocol_")
@protocol PEApplicationComponentAPIProtocol <PEComponentAPIProtocol>
/// Log out of the application
- (void)logout;
@optional
/// Log out of the application and post the following deep link instead of the standard “epichttp://logout”
/// \param url The url that will post to deep link observers after the context has been wiped out.
///
- (void)logoutWithDeepLinkUrl:(NSString * _Nonnull)url;
@required
/// Tell the main application that the following person is selected
/// \param person the person to switch to
///
- (void)switchCurrentPerson:(id <PEPersonProtocol> _Nonnull)person;
@optional
/// Tell the main application to invalidate alerts for the current person
- (void)invalidateAlertsForPatient;
@required
/// Is the application an internal build
- (BOOL)isInternalBuild SWIFT_WARN_UNUSED_RESULT;
/// Is HealthKit available on this device
- (BOOL)isHealthKitDataAvailable SWIFT_WARN_UNUSED_RESULT;
@optional
/// Retrieves the current locale override for general operations if set
- (PELocale * _Nullable)getCurrentLocaleOverride SWIFT_WARN_UNUSED_RESULT;
@required
/// Is the application branded?
- (BOOL)isBrandedApp SWIFT_WARN_UNUSED_RESULT;
/// Returns if this is a self submitted application
- (BOOL)isSelfSubmittedApp SWIFT_WARN_UNUSED_RESULT;
/// Returns if this is an epic submitted application
- (BOOL)isEpicSubmittedApp SWIFT_WARN_UNUSED_RESULT;
/// Returns the epic submitted’s org id
- (NSString * _Nonnull)getBrandedAppOrgId SWIFT_WARN_UNUSED_RESULT;
/// Returns the epic submitted’s customer image
- (UIImage * _Nullable)getBrandedCustomerImage SWIFT_WARN_UNUSED_RESULT;
@optional
/// Should we enable logout button?
- (BOOL)shouldEnableLogoutButton SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns if the application is a test library that is expired.
- (BOOL)isTestLibraryExpired SWIFT_WARN_UNUSED_RESULT;
@optional
///
/// returns:
/// an object of server primary locale, will return nil if the server does not have a primary locale
- (PELocale * _Nullable)getServerPrimaryLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// an object with login-specific locale information
- (PELocale * _Nonnull)getCurrentLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the default locale to be used if no match can be made with user preferences
- (PELocale * _Nonnull)getDefaultLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the locale to be used for webservices
- (PELocale * _Nonnull)getCommandLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the locale to be used for formatting dates and numbers
- (PELocale * _Nonnull)getFormatterLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the locale to be used for formatting currency
- (PELocale * _Nonnull)getCurrencyFormatterLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// an object with login-specific locale information for debugging use
- (NSString * _Nonnull)getLocaleSettingsDebugDescriptionWithDevice:(BOOL)withDevice SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Date Pattern string considering current locale
- (NSString * _Nullable)getDatePatternFrom:(NSString * _Nonnull)dateFormatTemplate SWIFT_WARN_UNUSED_RESULT;
@required
///
/// returns:
/// true if the user is authenticated
- (BOOL)isFullyAuthenticated SWIFT_WARN_UNUSED_RESULT;
@optional
- (enum PEAppleWatchState)getAppleWatchState SWIFT_WARN_UNUSED_RESULT;
/// Tell the main application to reset IdleTimer so we don’t log the patient out
- (void)resetIdleTimer;
@required
/// Tell the main application to start IdleTimer
- (void)startIdleTimer;
/// Tell the main application to stop IdleTimer
- (void)stopIdleTimer;
/// Returns the context for the logged-in user, if applicable
- (PEUserContext * _Nullable)getCurrentUserContext SWIFT_WARN_UNUSED_RESULT;
/// Returns the context for the current patient, if applicable
- (PEPatientContext * _Nullable)getCurrentPatientContext SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns the application id
- (NSString * _Nonnull)getApplicationId SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns the application type
- (enum ApplicationType)getApplicationType SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns the device id
- (NSString * _Nonnull)getDeviceUId SWIFT_WARN_UNUSED_RESULT;
@required
/// Gets the privacy policy url based on the type of app
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns a boolean indicating whether the device has timed out
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether the application supports printing
- (BOOL)isPrintingSupported SWIFT_WARN_UNUSED_RESULT;
@required
/// Get the display name of the app, i.e. MyChart.
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
/// Gets MyChart’s default theme
- (id <PEThemeProtocol> _Nonnull)getDefaultTheme SWIFT_WARN_UNUSED_RESULT;
/// Clears the current login state
- (void)clearLoginState;
@optional
/// Returns the launch scheme of the app
- (NSString * _Nullable)getAppLaunchScheme SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns true if app review mode is enabled
/// Used for Apple/Google reviewers to point the app to our Shared Testing Environment
- (BOOL)isAppReviewModeEnabled SWIFT_WARN_UNUSED_RESULT;
/// Gets the phonebook URL - only to be used in internal builds
- (NSString * _Nonnull)getPhonebookUrl SWIFT_WARN_UNUSED_RESULT;
/// Get if the MO Printing Onboarding should be hidden
- (BOOL)shouldSuppressMOPrintingOnboarding SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore21PEAppointmentProvider_")
@protocol PEAppointmentProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly) BOOL canDirectSchedule;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull getPEOrganization;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEAppointmentsComponentAPIProtocol_")
@protocol PEAppointmentsComponentAPIProtocol <PEComponentAPIProtocol>
/// \param csn The contact serial number of the appointment to launch into
///
///
/// returns:
/// A view controller for the e-checkin workflow
- (UIViewController * _Nullable)getECheckInViewControllerForCSN:(NSString * _Nonnull)csn SWIFT_WARN_UNUSED_RESULT;
/// \param csn The contact serial number of the appointment to launch into
///
///
/// returns:
/// A view controller displaying appointment details
- (UIViewController * _Nullable)getFutureAppointmentViewControllerForCSN:(NSString * _Nonnull)csn SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// if the currrent patient has access to this component
- (BOOL)hasAccessToWebScheduling SWIFT_WARN_UNUSED_RESULT;
/// triggers a call to ping for hello patient
- (void)initiateAppointmentArrivalMonitoring;
/// Creates Appointment Live Activities using appointments from a loader
/// note:
/// If calling this and initiateAppointmentArrivalMonitoring, call both back to back as they both will use the same request
/// \param loader the loader object that will provide the appointments to create Live Activities from
///
- (void)requestAppointmentLiveActivities;
@end

@protocol TwoFactorInformationProtocol;
enum RestrictedAccessTokenType : NSInteger;
@protocol RestrictedAccessTokenProtocol;
@protocol PEPhonebookEntryProtocol;

/// Authentication Component API
SWIFT_PROTOCOL("_TtP6PECore36PEAuthenticationComponentAPIProtocol_")
@protocol PEAuthenticationComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns a view controller for the two-factor authentication workflow during login.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
///
/// returns:
/// A view controller for the two-factor authentication workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorAuthenticationWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for the two-factor enrollment workflow during login.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
///
/// returns:
/// A view controller for the two-factor enrollment workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorEnrollmentWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether or not the back-end supports any of the two-factor opt-in/out workflows.
/// \param userContext the current user context
///
///
/// returns:
/// True if the server supports any of the two-factor opt-in/out workflows; False otherwise.
- (BOOL)supportsTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
/// Executes a web service to load user and system information regarding two-factor authentication.
/// \param userContext the current user context
///
/// \param completionHandler the handler to invoke on completion of the web service
///
/// \param errorHandler the handler to invoke if an error occurs
///
- (void)loadTwoFactorInformationWithContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nonnull)(id <TwoFactorInformationProtocol> _Nullable))completionHandler errorHandler:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))errorHandler;
/// Returns a view controller for the email or SMS two-factor opt-in/out workflow.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
///
/// returns:
/// A view controller for the email or SMS two-factor opt-in/out workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for the TOTP two-factor opt-in/out workflow.
/// \param userContext the current user context
///
/// \param deepLink the deep link used to launch the workflow
///
///
/// returns:
/// A view controller for the TOTP two-factor opt-in/out workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext deepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for two-factor onboarding.
/// \param userContext the current user context
///
///
/// returns:
/// A view controller for two-factor onboarding.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOnboardingWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nullable)twoFactorInformation SWIFT_WARN_UNUSED_RESULT;
/// Checks whether a RestrictedAccessToken exists on the device, and is for a given organization
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param orgID optional org to check
///
///
/// returns:
/// true if a token exists, false otherwise
- (BOOL)hasRestrictedAccessTokenWithTokenType:(enum RestrictedAccessTokenType)tokenType forOrgId:(NSString * _Nullable)orgId SWIFT_WARN_UNUSED_RESULT;
/// Returns a RestrictedAccessTokenProtocol of a given type, if one exists
/// \param tokenType RestrictedAccessTokenType to check
///
///
/// returns:
/// token object
- (id <RestrictedAccessTokenProtocol> _Nullable)getRestrictedAccessTokenWithTokenType:(enum RestrictedAccessTokenType)tokenType SWIFT_WARN_UNUSED_RESULT;
/// Log in with the restricted access of a given type, if one exists
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param phonebookEntry object representing the organization being logged into
///
/// \param defaultTheme default theme to set for the created restricted access session
///
/// \param completionHandler handler for success, returning the setup patientContext
///
/// \param errorHandler handler for errors, returning a string error
///
- (void)loginWithRestrictedAccessTokenWithTokenType:(enum RestrictedAccessTokenType)tokenType phonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry defaultTheme:(id <PEThemeProtocol> _Nonnull)defaultTheme completionHandler:(void (^ _Nonnull)(PEPatientContext * _Nonnull))completionHandler errorHandler:(void (^ _Nonnull)(NSString * _Nonnull))errorHandler;
/// Creates a RestrictedAccessToken of a given type, and stores it on the device
/// \param userContext the current user context
///
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param username the username for whom this token is being created
///
/// \param completionHandler handler for completion, returning a boolean about whether creation was successful
///
- (void)createRestrictedAccessTokenWithUserContext:(PEUserContext * _Nonnull)userContext tokenType:(enum RestrictedAccessTokenType)tokenType username:(NSString * _Nonnull)username completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Removes the stored RestrictedAccessToken of a given type on this device, but not on the server
/// \param tokenType RestrictedAccessTokenType to check
///
- (void)removeRestrictedAccessTokenFromDeviceWithTokenType:(enum RestrictedAccessTokenType)tokenType;
/// Removes the stored RestrictedAccessToken of a given type on this device and on the server
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param userContext The current user context
///
- (void)removeRestrictedAccessTokenFromDeviceAndServerWithTokenType:(enum RestrictedAccessTokenType)tokenType userContext:(PEUserContext * _Nonnull)userContext;
/// Recreates a RestrictedAccessToken of a given type, and stores it on the device, if one already exists
/// \param userContext the current user context
///
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param username the username for whom this token is being created
///
/// \param completionHandler handler for completion, returning a boolean about whether creation was successful
///
- (void)recreateRestrictedAccessTokenIfNeededWithUserContext:(PEUserContext * _Nonnull)userContext tokenType:(enum RestrictedAccessTokenType)tokenType username:(NSString * _Nonnull)username completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Returns a new instance of LoginViewController
- (UIViewController * _Nonnull)getLoginViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the user has a current restricted access session
- (BOOL)hasCurrentRestrictedAccessSession SWIFT_WARN_UNUSED_RESULT;
/// Clears the current restricted access session, if one exists
- (void)clearCurrentRestrictedAccessSession;
/// Retrieves the current SAML session token, if one exists
- (NSString * _Nullable)getSamlToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of the favorited orgs
/// @return
- (NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull)getFavoritedOrgs SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of the favorited orgs
/// @return
- (void)setFavoritedOrgsWithOrgs:(NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull)orgs;
/// Executes an org select deep link with the provided org ID
/// *
- (void)executeOrgSelectDeeplinkWithOrgId:(NSString * _Nonnull)orgId;
@optional
/// Updates the patient access list with feature access information from H2G organizations we have already heard back from
- (void)getCurrentFeatureAccessInformation;
/// Waits for all H2G organizations to respond and updates the patient access list with feature access information from those orgs
- (void)getFullFeatureAccessInformationWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// Get the feature load status from the patient access list for a given account ID
- (enum FeatureLoadStatus)getFeatureLoadStatusForPatientWithAccountID:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
@required
/// The current pre-login theme, if one is available
@property (nonatomic, readonly, strong) id <PEThemeProtocol> _Nullable currentPreLoginTheme;
/// Launches a standard login workflow that will select the organization with the provided orgId and trigger automatic login if available
- (void)launchLoginWorkflowWithOrgId:(NSString * _Nonnull)orgId;
/// Checks if the LoginViewController has a login workflow that is pending due to onboarding not yet being completed.
/// Checks if the org selection step of Onboarding should be skipped
@property (nonatomic, readonly) BOOL shouldSkipOnboardingOrgSelectionStep;
@end

enum PEComponentAccessResult : NSInteger;
enum PEBillingMode : NSInteger;
enum PEEstimatesMode : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore29PEBillingComponentAPIProtocol_")
@protocol PEBillingComponentAPIProtocol <PEComponentAPIProtocol>
/// Determine if the user or selected patient has access to Billing activity
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     patientContext: patient context of the patient whose billing information is being accessed. Nil if accessing a NPP billing
///     page in a HPR environment
///   </li>
/// </ul>
- (enum PEComponentAccessResult)hasAccessForBillingWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Return MO Billing view controller that displays billing summary view
/// \param mode Billing mode to launch
///
/// \param param collection of web parameters
///
- (UIViewController * _Nullable)getBillingViewControllerForMode:(enum PEBillingMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
/// Determines if the user or selected patient has access to Estimates activity
/// \param patientContext patient context of the patient whose Estimates information is being accessed. Nil if accessing Estimates page as NPP in a non-HPR environment
///
///
/// returns:
/// Access Result
- (enum PEComponentAccessResult)hasAccessForEstimatesWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Return MO Estimates view controller that displays the Estimates view
/// \param mode Estimates mode to launch
///
/// \param param collection of web parameters
///
- (UIViewController * _Nullable)getEstimatesViewControllerForMode:(enum PEEstimatesMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEBillingMode, open) {
  PEBillingModeBillingSummary = 0,
  PEBillingModeBillingDetails = 1,
  PEBillingModeBillingPayment = 2,
  PEBillingModeBillingAutopay = 3,
};

typedef SWIFT_ENUM(NSInteger, PEBrandedColor, open) {
  PEBrandedColorUnknown = 0,
/// Person colors, which are used to distinguish between people that the user can access
  PEBrandedColorPersonColor1 = 1,
  PEBrandedColorPersonColor2 = 2,
  PEBrandedColorPersonColor3 = 3,
  PEBrandedColorPersonColor4 = 4,
  PEBrandedColorPersonColor5 = 5,
  PEBrandedColorPersonColor6 = 6,
  PEBrandedColorPersonColor7 = 7,
  PEBrandedColorPersonTextColor1 = 8,
  PEBrandedColorPersonTextColor2 = 9,
  PEBrandedColorPersonTextColor3 = 10,
  PEBrandedColorPersonTextColor4 = 11,
  PEBrandedColorPersonTextColor5 = 12,
  PEBrandedColorPersonTextColor6 = 13,
  PEBrandedColorPersonTextColor7 = 14,
/// The color used as the background for mobile activities.
  PEBrandedColorBackgroundColor = 15,
/// The color for buttons on the nav bar.
  PEBrandedColorBarButtonColor = 16,
/// The color of the nav bar.
  PEBrandedColorBarTintColor = 17,
/// The color for text on the nav bar.
  PEBrandedColorBarTextColor = 18,
/// The color used as the background for the home page header and other headers across the app.
/// Before having a mobile-specific color, this was populated with the body background color.
/// The legacy branded color is used to grab the body background color in case the client is connecting to a server without the mobile-specific color.
  PEBrandedColorHeaderBackgroundColor = 19,
  PEBrandedColorLegacyHeaderBackgroundColor = 20,
/// The color used for header text.
  PEBrandedColorHeaderTextColor = 21,
/// The color for the “I have questions” button in the Education activity.
  PEBrandedColorInconclusiveButtonColor = 22,
/// The color used as the background for informational banners and other views with “informational” content.
  PEBrandedColorInformationalBackgroundColor = 23,
/// The color for links.
  PEBrandedColorLinkColor = 24,
/// The  color of the login button on the login screen.
  PEBrandedColorLoginButtonColor = 25,
/// The color of the text on the login button on the login screen.
  PEBrandedColorLoginButtonTextColor = 26,
/// The color used as the background for critical banners and other views with “negative” content.
  PEBrandedColorNegativeBackgroundColor = 27,
/// The color of buttons that perform a “negative” or “destructive” action.
  PEBrandedColorNegativeButtonColor = 28,
/// The color of the text on buttons that perform a “negative” or “destructive” action.
  PEBrandedColorNegativeButtonTextColor = 29,
/// The color for “negative” or “destructive” text.  Also used for link-style buttons.
  PEBrandedColorNegativeTextColor = 30,
/// The color of buttons that perform an action that is neither “positive” or “negative”.
  PEBrandedColorNeutralButtonColor = 31,
/// The color of the text on buttons that perform an action that is neither “positive” or “negative”.
  PEBrandedColorNeutralButtonTextColor = 32,
/// The color used as the background for success banners and other views with “positive” content.
  PEBrandedColorPositiveBackgroundColor = 33,
/// The color of buttons that perform a “positive” or “progressive” action.
  PEBrandedColorPositiveButtonColor = 34,
/// The color of the text on buttons that perform a “positive” or “advancing” action.
  PEBrandedColorPositiveButtonTextColor = 35,
/// Standard color for Success Banner Header. Matches WPColor-PositiveDim
  PEBrandedColorPositiveTextColor = 36,
/// The  color of the sign up button on the login screen.
  PEBrandedColorSignupButtonColor = 37,
/// The color of the text on the sign up button on the login screen.
  PEBrandedColorSignupButtonTextColor = 38,
/// The color used for the item that is currently selected on a tab bar.
  PEBrandedColorTabBarSelectedItemColor = 39,
/// The color used to tint icons, controls, and other elements across the app.
  PEBrandedColorTintColor = 40,
/// The color used for the “unread” state of the unread indicator.
  PEBrandedColorUnreadIndicatorColor = 41,
/// The color of the dot used for the “unread” state of the unread indicator.
  PEBrandedColorUnreadIndicatorDotColor = 42,
/// The color used as the background for warning banners and other views with “cautionary” content.
  PEBrandedColorWarningBackgroundColor = 43,
/// A positive color that is used for semantic purposes.  Typically Green.
  PEBrandedColorPositiveSemanticColor = 44,
/// A negative color that is used for semantic purposes.  Typically Red.
  PEBrandedColorNegativeSemanticColor = 45,
};


/// A view that can load either local image resources or remote images and then cache them
SWIFT_CLASS("_TtC6PECore20PECacheableImageView")
@interface PECacheableImageView : UIImageView
/// Is the icon tinted
@property (nonatomic) IBInspectable BOOL shouldTintImage;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PECareTeamComponentDelegate;

SWIFT_PROTOCOL("_TtP6PECore30PECareTeamComponentAPIProtocol_")
@protocol PECareTeamComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the care team activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForCareTeam:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the care team view controller
/// \param patientContext The patient context with which to launch the care team
///
/// \param isPrimaryStandalone Whether the view is  standalone
///
/// \param delegate Delegate to use to retrieve the view controller
///
///
/// returns:
/// The care team view controller
- (void)getCareTeamViewController:(PEPatientContext * _Nonnull)patientContext isPrimaryStandalone:(BOOL)isPrimaryStandalone withDelegate:(id <PECareTeamComponentDelegate> _Nullable)delegate;
/// Determines whether the treatment team activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForTreatmentTeam:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the treatment team view controller
/// \param encounterContext The encounter context with which to launch the treatment team
///
/// \param componentHost The host for this component
///
/// \param viewControllerTitle The title for the treatment team list view controller that should be displayed in the app bar (will be passed to it, but not displayed in this widgette)
///
///
/// returns:
/// The treatment team view controller
- (UIViewController * _Nullable)getTreatmentTeamViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the treatment team list view controller (either a table view or collection view showing all members, as opposed to the widget style view)
/// \param encounterContext The encounter context with which to launch the treatment team
///
/// \param componentHost The host for this component
///
/// \param viewControllerTitle The title for the treatment team list view controller that should be displayed in the app bar
///
///
/// returns:
/// The treatment team list view controller
- (UIViewController * _Nullable)getTreatmentTeamListViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the outpatient-only care team activity
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     patientContext: patient whose care team to get
///   </li>
///   <li>
///     viewControllerTitle: The title for the care team list view controller that should be displayed in the app bar
///   </li>
/// </ul>
///
/// returns:
/// full-screen care team view controller
- (UIViewController * _Nullable)getFullscreenCareTeamViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the provider bio activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForProviderBio:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the provider biography view controller
/// \param encounterContext The encounter context with which to launch the provider bio
///
/// \param providerID The ID of the provider for whom to load a bio
///
/// \param providerName The name of the provider for whom to load a bio
///
///
/// returns:
/// The provider bio view controller
- (UIViewController * _Nullable)getProviderBioViewController:(PEEncounterContext * _Nonnull)encounterContext providerID:(NSString * _Nonnull)providerID providerName:(NSString * _Nonnull)providerName SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

SWIFT_PROTOCOL("_TtP6PECore27PECareTeamComponentDelegate_")
@protocol PECareTeamComponentDelegate
/// Callback for when the care team controller was successfully generated and loaded
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         careTeamViewController: The care team view controller
///       </li>
///       <li>
///         failedOrgs: List of external organizations that incurred a failure
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didGetCareTeamViewController:(UIViewController * _Nonnull)careTeamViewController withFailedOrgs:(NSArray<id <PEOrganizationInfoProtocol>> * _Nullable)failedOrgs;
/// Callback for when the care team controller could not be generated. This could be because the patient does not have access, the web-service failed, or because the patient does not have anyone in thier care team.
/// \param error The error that occured
///
- (void)didFailToGetCareTeamViewControllerWithError:(NSError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP6PECore31PEChecklistComponentAPIProtocol_")
@protocol PEChecklistComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to the Checklist activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForChecklist:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Bedside Checklist activity for a given encounter context
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
/// \param buttonStyle 
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getChecklistViewController:(PEEncounterContext * _Nonnull)encounterContext buttonStyle:(enum ButtonStyle)buttonStyle viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end

/// Enum for component API interfaces. Used as a unique identifier for the component APIs.
typedef SWIFT_ENUM(NSInteger, PEComponentAPIKey, open) {
  PEComponentAPIKeyShareEverywhere = 0,
  PEComponentAPIKeyToDo = 1,
  PEComponentAPIKeyAppointments = 2,
  PEComponentAPIKeyQuestionnaires = 3,
  PEComponentAPIKeyTrackMyHealth = 4,
  PEComponentAPIKeyToDoBridging = 5,
  PEComponentAPIKeyMyChartNow = 6,
  PEComponentAPIKeyCareTeam = 7,
  PEComponentAPIKeyEducation = 8,
  PEComponentAPIKeyProblemList = 9,
  PEComponentAPIKeyProblemListBridging = 10,
  PEComponentAPIKeyHappeningSoon = 11,
  PEComponentAPIKeyRequests = 12,
  PEComponentAPIKeyMedications = 13,
  PEComponentAPIKeyMedicationsBridging = 14,
  PEComponentAPIKeyTestResults = 15,
  PEComponentAPIKeyTestResultDetail = 16,
  PEComponentAPIKeyH2GOrgPopup = 17,
  PEComponentAPIKeyDateUtilBridging = 18,
  PEComponentAPIKeyHomePage = 19,
  PEComponentAPIKeyApplication = 20,
  PEComponentAPIKeyDeepLinkManager = 21,
  PEComponentAPIKeyAuthentication = 22,
  PEComponentAPIKeyManageMyAccount = 23,
  PEComponentAPIKeyPreventiveCare = 24,
  PEComponentAPIKeyMyDocuments = 25,
  PEComponentAPIKeyMyChartRef = 26,
  PEComponentAPIKeyMessages = 27,
  PEComponentAPIKeyNativeMessages = 28,
  PEComponentAPIKeyUpcomingOrders = 29,
  PEComponentAPIKeyScheduling = 30,
  PEComponentAPIKeyInfectionControl = 31,
  PEComponentAPIKeyContinuingCare = 32,
  PEComponentAPIKeyBilling = 33,
  PEComponentAPIKeyOnboarding = 34,
  PEComponentAPIKeyUtilMisc = 35,
  PEComponentAPIKeyVisits = 36,
  PEComponentAPIKeyWorkflowStep = 37,
  PEComponentAPIKeyChecklist = 38,
  PEComponentAPIKeyFriendsAndFamilyUpdates = 39,
};



/// Component API Provider
/// This class allows components to communicate with other components.  See this wiki for how to create new components: http://wiki.epic.com/main/MyChart/Mobile/Components
/// In order to create a new component:
/// <ol>
///   <li>
///     Define your IComponentAPI, create an interface in com.epic.patientengagementcore.component that extends
///     IComponentAPI and define methods other components need to communicate to the new component.
///   </li>
///   <li>
///     Create your ComponentAPI in your component module
///   </li>
///   <li>
///     Add a new enum value to PEComponentAPIKey for your new ComponentAPI
///   </li>
///   <li>
///     Register the component using registerComponentAPI (Most likely in the same spot as all the other components)
///   </li>
/// </ol>
/// In order to call into another component, get the IComponentAPI using getComponentAPI.
SWIFT_CLASS("_TtC6PECore22PEComponentAPIProvider")
@interface PEComponentAPIProvider : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// The component API provider instance
+ (PEComponentAPIProvider * _Nonnull)getComponentAPIProvider SWIFT_WARN_UNUSED_RESULT;
/// Register a new IComponentAPI.
/// \param componentKey The class type of IComponentAPI
///
/// \param component The component api instance
///
///
/// throws:
/// Can not be null or already registered.
- (BOOL)register:(enum PEComponentAPIKey)componentKey :(id <PEComponentAPIProtocol> _Nonnull)component error:(NSError * _Nullable * _Nullable)error;
/// Get a registered component for type
/// \param componentType The class type of IComponentAPI
///
///
/// returns:
/// The component, if registered.
- (id <PEComponentAPIProtocol> _Nullable)get:(enum PEComponentAPIKey)componentType SWIFT_WARN_UNUSED_RESULT;
/// Get a registered component for type
/// \param componentType The class type of IComponentAPI
///
///
/// returns:
/// The component, if registered.
+ (id <PEComponentAPIProtocol> _Nullable)getApi:(enum PEComponentAPIKey)componentType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEComponentAccessResult, open) {
  PEComponentAccessResultAccessAllowed = 1,
  PEComponentAccessResultNotAuthenticated = 2,
  PEComponentAccessResultMissingServerUpdate = 3,
  PEComponentAccessResultMissingSecurity = 4,
  PEComponentAccessResultMissingAppPermissions = 5,
  PEComponentAccessResultUserDisabledSetting = 6,
  PEComponentAccessResultDeprecated = 7,
  PEComponentAccessResultUnknownError = 8,
  PEComponentAccessResultSecurityNotLoaded = 11,
};


/// A delegate that allows the parent view controller of a component host to receive updates from the component host
SWIFT_PROTOCOL("_TtP6PECore29PEComponentHostParentDelegate_")
@protocol PEComponentHostParentDelegate
- (void)showMenuInNavBarUpdated:(BOOL)show;
- (void)navBarMenuActionsUpdatedWithActions:(NSArray<UIAlertAction *> * _Nonnull)actions;
@end

@protocol PEComponentHostSharedAnimationElementProtocol;

/// Component Host protocol.  Most/Some component fragments look for this in order to handle errors,
/// navigation, and other UI functions that the containing view controller should control.
SWIFT_PROTOCOL("_TtP6PECore23PEComponentHostProtocol_")
@protocol PEComponentHostProtocol
/// Title of the componentHost.
/// References the UIViewController title property.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Handle a generic web service failure
/// -returns: If something was presented to the user
- (BOOL)handleWebServiceTaskFailed SWIFT_WARN_UNUSED_RESULT;
/// Handle a generic web service failure and close the viewcontroller in the end
/// -returns: If something was presented to the user
- (BOOL)handleWebServiceTaskFailedAndClose SWIFT_WARN_UNUSED_RESULT;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// This version includes an origin view in case the host wants to launch the view as a popover
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType from:(UIView * _Nonnull)originView;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// This version includes shared elements for use in shared element transition animations
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType withSharedElements:(NSArray<id <PEComponentHostSharedAnimationElementProtocol>> * _Nonnull)sharedElements andBoundingElement:(id <PEComponentHostSharedAnimationElementProtocol> _Nullable)boundingElement;
/// Wrap a given viewcontroller in a WPViewController
/// Needed for showing navigationbar title view
/// -returns: WPViewController wrapping the parameter view controller
- (UIViewController * _Nonnull)wrapViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// Wrap a given viewcontroller in a WPViewController
/// Needed for showing navigationbar title view
/// -returns: WPViewController wrapping the parameter view controller
- (UIViewController * _Nonnull)wrapViewController:(UIViewController * _Nonnull)viewController inNavigationController:(BOOL)inNavigationController SWIFT_WARN_UNUSED_RESULT;
/// Dismiss a given viewcontroller
/// Needed so that Bedside and MyChart can dismiss view controllers differently
- (void)dismissViewController:(UIViewController * _Nonnull)viewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Manually expand or collapse the large navigation bar
/// \param expanded if expanding or collapsing the tool bar
///
- (void)setLargeNavBarExpanded:(BOOL)expanded;
@optional
/// Show or hide the dots menu next to the navigation bar title
/// \param show whether to hide/show the menu
///
- (void)shouldShowMenuInNavBar:(BOOL)show;
/// Set the possible actions for the dots menu next to the navigation bar title
/// \param show whether to hide/show the menu
///
- (void)setNavBarMenuActions:(NSArray<UIAlertAction *> * _Nonnull)actions;
/// Hide and show the navigation bar
- (void)changeNavBarVisibility:(BOOL)isVisible;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEComponentHostPopupProtocol_")
@protocol PEComponentHostPopupProtocol <PEComponentHostProtocol>
/// Hide the close button in a component host popup
- (void)disableCloseButton;
/// Show the close button in a component host popup after it’s been hidden
- (void)reenableCloseButton;
@end



/// A shared element to use for animations when launching a new view controller
SWIFT_PROTOCOL("_TtP6PECore45PEComponentHostSharedAnimationElementProtocol_")
@protocol PEComponentHostSharedAnimationElementProtocol
/// The view in the launching view controller
@property (nonatomic, readonly, strong) UIView * _Nonnull fromView;
/// A unique integer tag matching a view in the view controller being launched
@property (nonatomic, readonly) NSInteger toViewTag;
@end

/// Enum Error codes returned when requesting access to activities asynchronously (see WPAPIGoals, WPAPICareTeam, and WPAPICampaigns)
typedef SWIFT_ENUM(NSInteger, PEComponentRequestControllerErrorCode, open) {
/// unknown The request for a controller failed for an unknown reason.
  PEComponentRequestControllerErrorCodeUnknown = -1,
/// noAccess The user does not have access to the activity.
  PEComponentRequestControllerErrorCodeNoAccess = 1,
/// noData There is no data to display for the requested activity.
  PEComponentRequestControllerErrorCodeNoData = 2,
};

@protocol PEOrganizationProtocol;
@protocol PEUserProtocol;
@protocol PEEncounterProtocol;

/// Context Provider
/// This singleton is responsible for providing user context.
/// In order to get a context, call one of the getContext methods.
/// In order to set up the context (or update) call the update methods.
SWIFT_CLASS("_TtC6PECore17PEContextProvider")
@interface PEContextProvider : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// Returns the context provider for the app
+ (PEContextProvider * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
+ (id <PEThemeProtocol> _Nullable)getThemeForCurrentOrganization SWIFT_WARN_UNUSED_RESULT;
/// -returns: the base context which is the PEOrganizationContext if one exists
- (PEOrganizationContext * _Nullable)getContext SWIFT_WARN_UNUSED_RESULT;
/// \param organization The organization for the UserContext
///
///
/// returns:
/// the user contexts for the org
- (NSArray<PEUserContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// \param organization The organization for the UserContext
///
/// \param user The user for the UserContext
///
///
/// returns:
/// the user context if one is set up.
- (PEUserContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user SWIFT_WARN_UNUSED_RESULT;
/// \param organization The org for the PatientContext
///
/// \param user The user for the PatientContext
///
/// \param patient The patient for the PatientContext
///
///
/// returns:
/// a PatientContext for a specific patient
- (PEPatientContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the PatientContexts
///
/// \param user user for the PatientContexts
///
///
/// returns:
/// a list of all the PatientContexts available, null if no patients or user
- (NSArray<PEPatientContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the encounter context
///
/// \param user user for the encounter context
///
/// \param patient patient for the encounter context
///
/// \param encounter encounter for the encounter context
///
///
/// returns:
/// EncounterContext if one is set up for a patient and encounter
- (PEEncounterContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient :(id <PEEncounterProtocol> _Nullable)encounter SWIFT_WARN_UNUSED_RESULT;
- (PEEncounterContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient encounterIdentifier:(NSString * _Nullable)encounterIdentifier SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the encounter context
///
/// \param user user for the encounter context
///
/// \param patient patient for the encounter context
///
///
/// returns:
/// Encounter contexts if one is set up for a patient and encounters
- (NSArray<PEEncounterContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// Update the organization in the context, this overwrites the current organization
/// \param organization The new org
///
- (void)updateOrganization:(id <PEOrganizationProtocol> _Nullable)organization;
/// Update the user in the context, This overwrites the current user.
/// \param organization Update users for this org 
///
/// \param users The new users for org 
///
- (void)updateUser:(id <PEOrganizationProtocol> _Nullable)organization :(NSArray<id <PEUserProtocol>> * _Nullable)users;
/// Update the list of patients in the context, this overwrites the current patients.
/// \param organization Update for this org
///
/// \param user Update for this user
///
/// \param patients Update with these patients
///
- (void)updatePatients:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(NSArray<id <PEPatientProtocol>> * _Nullable)patients;
/// Update the list of encounters in the context, this overwrites the current encounters.
/// \param organization Update for this org
///
/// \param user Update for this user
///
/// \param patient Update for this patient
///
/// \param encounters Update with these encounters
///
- (void)updateEncounters:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient :(NSArray<id <PEEncounterProtocol>> * _Nullable)encounters;
/// Clear the Context Provider (use for logout)
- (void)clearContext;
/// Package private helper for Context objects to get the real encounter data.
/// \param organizationIdentifer The org’s identifier
///
/// \param userIdentifier The user’s identifier
///
/// \param patientIdentifier The patient’s identifier
///
/// \param encounterIdentifier The encounter’s identifier
///
///
/// returns:
/// the real encounter object
- (id <PEEncounterProtocol> _Nullable)getEncounter:(NSString * _Nullable)organizationIdentifer :(NSString * _Nullable)userIdentifier :(NSString * _Nullable)patientIdentifier :(NSString * _Nullable)encounterIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEContinuingCareComponentAPIProtocol_")
@protocol PEContinuingCareComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to the continuing care activity
/// \param encounterContext The encounter context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForContinuingCare:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO continuing care  activity for a given encounter context
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle the title for the view controller
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getContinuingCareViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO continuing care list activity for a given encounter context and deep link
/// \param encounterContext The encounter context to display
///
/// \param epicHttpLink the url for the list that we’re opening
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getOpenListViewController:(PEEncounterContext * _Nonnull)encounterContext epicHttpLink:(NSString * _Nonnull)epicHttpLink SWIFT_WARN_UNUSED_RESULT;
@end


/// List of string constants for commonly used deep link query parameters
SWIFT_CLASS("_TtC6PECore26PEDeepLinkLaunchParameters")
@interface PEDeepLinkLaunchParameters : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCOUNT;)
+ (NSString * _Nonnull)ACCOUNT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCOUNT_ID;)
+ (NSString * _Nonnull)ACCOUNT_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ADDRESS;)
+ (NSString * _Nonnull)ADDRESS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AUTH_TOKEN;)
+ (NSString * _Nonnull)AUTH_TOKEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AVS_DAT;)
+ (NSString * _Nonnull)AVS_DAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_ID;)
+ (NSString * _Nonnull)BILLING_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_BLOBKEY;)
+ (NSString * _Nonnull)BILLING_BLOBKEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_DOC_TYPE;)
+ (NSString * _Nonnull)BILLING_DOC_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_SYSTEM;)
+ (NSString * _Nonnull)BILLING_SYSTEM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_DAT;)
+ (NSString * _Nonnull)CHANGE_DAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_ID;)
+ (NSString * _Nonnull)CHANGE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONTEXT;)
+ (NSString * _Nonnull)CONTEXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONTEXT_TYPE;)
+ (NSString * _Nonnull)CONTEXT_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CSN;)
+ (NSString * _Nonnull)CSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CVG_ID;)
+ (NSString * _Nonnull)CVG_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DAT;)
+ (NSString * _Nonnull)DAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DCS_EXT;)
+ (NSString * _Nonnull)DCS_EXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DCS_ID;)
+ (NSString * _Nonnull)DCS_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EAR_ID;)
+ (NSString * _Nonnull)EAR_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ECSN;)
+ (NSString * _Nonnull)ECSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EMID;)
+ (NSString * _Nonnull)EMID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EPISODE_ID;)
+ (NSString * _Nonnull)EPISODE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EPP_URL;)
+ (NSString * _Nonnull)EPP_URL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEATURE;)
+ (NSString * _Nonnull)FEATURE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEDERATED_LOGOUT;)
+ (NSString * _Nonnull)FEDERATED_LOGOUT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FILE_NAME;)
+ (NSString * _Nonnull)FILE_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FILE_PATH;)
+ (NSString * _Nonnull)FILE_PATH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull H2G_ORG_ID;)
+ (NSString * _Nonnull)H2G_ORG_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ID;)
+ (NSString * _Nonnull)ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IED_ID;)
+ (NSString * _Nonnull)IED_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_CSN_ENCRYPTED;)
+ (NSString * _Nonnull)IS_CSN_ENCRYPTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_EVISIT;)
+ (NSString * _Nonnull)IS_EVISIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_ID_ENCRYPTED;)
+ (NSString * _Nonnull)IS_ID_ENCRYPTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_INPATIENT;)
+ (NSString * _Nonnull)IS_INPATIENT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_ORDER_ID_ENCRYPTED;)
+ (NSString * _Nonnull)IS_ORDER_ID_ENCRYPTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_PAYVIDER_PAYER;)
+ (NSString * _Nonnull)IS_PAYVIDER_PAYER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LAB_NAME;)
+ (NSString * _Nonnull)LAB_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LATITUDE;)
+ (NSString * _Nonnull)LATITUDE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LONGITUDE;)
+ (NSString * _Nonnull)LONGITUDE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LTK_ID;)
+ (NSString * _Nonnull)LTK_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LTK_INSTANT;)
+ (NSString * _Nonnull)LTK_INSTANT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDICATION;)
+ (NSString * _Nonnull)MEDICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGE_INFO;)
+ (NSString * _Nonnull)MESSAGE_INFO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MID;)
+ (NSString * _Nonnull)MID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MODE;)
+ (NSString * _Nonnull)MODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOW_ENCOUNTER_CSN;)
+ (NSString * _Nonnull)NOW_ENCOUNTER_CSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OAUTH_TOKEN;)
+ (NSString * _Nonnull)OAUTH_TOKEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORDER_ID;)
+ (NSString * _Nonnull)ORDER_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORG;)
+ (NSString * _Nonnull)ORG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORG_ID;)
+ (NSString * _Nonnull)ORG_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OVERDUE;)
+ (NSString * _Nonnull)OVERDUE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_INDEX;)
+ (NSString * _Nonnull)PATIENT_INDEX SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PES_ID;)
+ (NSString * _Nonnull)PES_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PROVIDER;)
+ (NSString * _Nonnull)PROVIDER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull REPORT_MNEMONIC;)
+ (NSString * _Nonnull)REPORT_MNEMONIC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RFV_ID;)
+ (NSString * _Nonnull)RFV_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SCHED_TICKET_ID;)
+ (NSString * _Nonnull)SCHED_TICKET_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SEL_RFV_ID;)
+ (NSString * _Nonnull)SEL_RFV_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull START_VIDEO_VISIT;)
+ (NSString * _Nonnull)START_VIDEO_VISIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SUB_MODE;)
+ (NSString * _Nonnull)SUB_MODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SUBJECT;)
+ (NSString * _Nonnull)SUBJECT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TAB;)
+ (NSString * _Nonnull)TAB SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TASK_TITLE;)
+ (NSString * _Nonnull)TASK_TITLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TITLE;)
+ (NSString * _Nonnull)TITLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TITLE_ID;)
+ (NSString * _Nonnull)TITLE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USERNAME;)
+ (NSString * _Nonnull)USERNAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ENCRYPTED_TREE_ID;)
+ (NSString * _Nonnull)ENCRYPTED_TREE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TREE_ID;)
+ (NSString * _Nonnull)TREE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TREE_CID;)
+ (NSString * _Nonnull)TREE_CID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TREE_UNIVERSAL_KEY;)
+ (NSString * _Nonnull)TREE_UNIVERSAL_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull URL;)
+ (NSString * _Nonnull)URL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USE_SOURCE_ENCRYPTION;)
+ (NSString * _Nonnull)USE_SOURCE_ENCRYPTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WORKFLOW;)
+ (NSString * _Nonnull)WORKFLOW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WPR_ID;)
+ (NSString * _Nonnull)WPR_ID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Style of button shown by the website.
typedef SWIFT_ENUM(NSInteger, PEEducationButtonStyle, open) {
/// Show no buttons to the user.
  PEEducationButtonStyleNone = 0,
/// Show buttons that can only be clicked once, and their result is saved. Subsequent clicks of the same button have no effect.
  PEEducationButtonStyleCompletion = 1,
/// Show buttons that save the result when clicked, but clicking the button again will remove the result.
  PEEducationButtonStyleToggle = 2,
};

@protocol PEEducationPointCompletionDelegate;
@class NSNumber;

/// The Interface for the Education component
SWIFT_PROTOCOL("_TtP6PECore31PEEducationComponentAPIProtocol_")
@protocol PEEducationComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForOutpatientEducation:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForInpatientEducation:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForEducationPoint:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This method provides the first view controller for the Education component, in the in patient case,
/// the list of all the assigned education titles in a current encounterContext
/// \param encounterContext An encounter context
///
/// \param viewControllerTitle The title for the education titles  view controller that should be displayed in the app bar
///
///
/// returns:
/// The Home screen of the Education activity, the list of all education titles assigned to the patient
- (UIViewController * _Nullable)getInpatientEducationTitlesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// This method provides the first view controller for the Education component, in the out patient case,
/// the list of all the assigned education titles in a current patientContenxt
/// \param patientContext An encounter context
///
/// \param viewControllerTitle The title for the education titles  view controller that should be displayed in the app bar
///
///
/// returns:
/// The Home screen of the Education activity, the list of all education titles assigned to the patient
- (UIViewController * _Nullable)getOutpatientEducationTitlesViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param userContext The context for the user
///
/// \param patientContext The context for the patient
///
/// \param pointID The education point ID
///
/// \param educationTitle The title of the education point being displayed
///
/// \param completionDelegate An optional delegate to handle completion of the education point
///
/// \param shouldLauncMedicalAdviceMessageComposer Whether or not the web view should open the medical composer view when I have questions is clicked by the user. A popup is shown directing the user to contact their organization directly.
///
/// \param buttonStyle Style of button to be shown by the web view. This is sent as part of the request and is handled by web.
///
/// \param educationKey The education key of the education point to display (“titleID^topicID^pointID”)
///
/// \param componentHost The host for this component
///
/// \param taskID The task ID associated with the education point
///
/// \param taskInstant The scheduled instant of the task
///
///
/// returns:
/// A view controller for this component. It’s the caller’s responsibility to put it in a host ViewController.
- (MyChartWebViewController * _Nullable)getEducationPointViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext pointID:(NSString * _Nonnull)pointID educationTitle:(NSString * _Nonnull)educationTitle completionDelegate:(id <PEEducationPointCompletionDelegate> _Nullable)completionDelegate shouldLaunchMedicalAdviceMessageComposer:(BOOL)shouldLaunchMedicalAdviceMessageComposer buttonStyle:(enum PEEducationButtonStyle)buttonStyle pointStatus:(NSNumber * _Nullable)pointStatus educationKey:(NSString * _Nonnull)educationKey componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost taskID:(NSString * _Nullable)taskID taskInstant:(NSString * _Nullable)taskInstant SWIFT_WARN_UNUSED_RESULT;
/// \param userContext The context for the user
///
/// \param patientContext The context for the patient
///
/// \param titleID The education title ID
///
/// \param activityTitle The name of the activity
///
///
/// returns:
/// A view controller for this component. It’s the caller’s responsibility to put it in a host ViewController.
- (MyChartWebViewController * _Nullable)getEducationTOCViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext titleId:(NSString * _Nonnull)titleId activityTitle:(NSString * _Nonnull)activityTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The context for the patient
///
/// \param activity The name of the activity
///
///
/// returns:
/// A view controller for this component. It’s the caller’s responsibility to put it in a host ViewController.
- (UIViewController * _Nullable)getEducationWebViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext activityTitle:(NSString * _Nonnull)activityTitle SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEEducationPointCompletedStatus, open) {
  PEEducationPointCompletedStatusUnread = 0,
  PEEducationPointCompletedStatusRead = 1,
  PEEducationPointCompletedStatusDone = 2,
  PEEducationPointCompletedStatusHidden = 3,
  PEEducationPointCompletedStatusQuestion = 4,
};


/// Interface for the callbacks for the EducationWebViewManager to its parent view.
SWIFT_PROTOCOL("_TtP6PECore34PEEducationPointCompletionDelegate_")
@protocol PEEducationPointCompletionDelegate
/// \param status The completion status of the education point
/// Delegate callbacks Used by ToDo & Education for reporting the completion status of a point
///
- (void)educationPointCompletedWithStatus:(enum PEEducationPointCompletedStatus)status;
@optional
/// Callback for when the user navigates away from an educaiton point
- (void)userDidNavigateAwayFromPoint;
/// Callback for when the user navigates back to an education point
- (void)userDidNavigateBackToPoint;
@end


SWIFT_PROTOCOL("_TtP6PECore24PEEncounterAlertProtocol_")
@protocol PEEncounterAlertProtocol <PEAlertProtocol>
- (NSInteger)getEncounterAlertCount SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEncounterCsn SWIFT_WARN_UNUSED_RESULT;
@end


/// Context for a specific org
SWIFT_CLASS("_TtC6PECore21PEOrganizationContext")
@interface PEOrganizationContext : NSObject
///
/// returns:
/// the user data for a PEOrganizationContext
- (NSArray<id <PEUserProtocol>> * _Nullable)getUsers SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The organization data for a PEOrganizationContext
- (id <PEOrganizationProtocol> _Nullable)getOrganization SWIFT_WARN_UNUSED_RESULT;
/// \param object Check against
///
///
/// returns:
/// true, only if it is a OrganizationContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Context for a user
SWIFT_CLASS("_TtC6PECore13PEUserContext")
@interface PEUserContext : PEOrganizationContext
///
/// returns:
/// the user data for a UserContext
- (id <PEUserProtocol> _Nullable)getUser SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of patients for a UserContext
- (NSArray<id <PEPatientProtocol>> * _Nullable)getPatients SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The npp-inclusive list of patients. this[0] is either a user or patient
- (NSArray<id <PEPersonProtocol>> * _Nonnull)getPersonList SWIFT_WARN_UNUSED_RESULT;
/// Is the user a proxy (and has proxy subjects)
- (BOOL)hasProxySubjects SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     returns true, only if it is a UserContext (Not subclass, and identifiers are identical)
///   </li>
/// </ul>
/// \param object compare too
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, and user ids regardless of class hierarchy
- (BOOL)isSameUserAs:(PEUserContext * _Nullable)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Context for a specific patient.
SWIFT_CLASS("_TtC6PECore16PEPatientContext")
@interface PEPatientContext : PEUserContext
/// Package private constructor for the ContextProvider
- (nonnull instancetype)init:(NSString * _Nonnull)orgIdentifier :(NSString * _Nonnull)userIdentifier :(NSString * _Nonnull)patientIdentifier OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
/// The patient data for a PatientContext
- (id <PEPatientProtocol> _Nullable)getPatient SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The encounter list data for a PatientContext
- (NSArray<id <PEEncounterProtocol>> * _Nullable)getEncounters SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// If the Patient/User combo is a proxy context
- (BOOL)isPatientProxy SWIFT_WARN_UNUSED_RESULT;
/// \param object compare too
///
///
/// returns:
/// true, only if it is a UserContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, user, and patient ids regardless of class hierarchy
- (BOOL)isSamePatientAs:(PEPatientContext * _Nullable)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Encounter context
SWIFT_CLASS("_TtC6PECore18PEEncounterContext")
@interface PEEncounterContext : PEPatientContext
///
/// returns:
/// The encounter data for a EncounterContext
- (id <PEEncounterProtocol> _Nullable)getEncounter SWIFT_WARN_UNUSED_RESULT;
/// \param object compare too
///
///
/// returns:
/// true, only if it is a EncounterContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, user, patient, and encounter ids regardless of class hierarchy
- (BOOL)isSameEncounterAs:(PEEncounterContext * _Nullable)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init:(NSString * _Nonnull)orgIdentifier :(NSString * _Nonnull)userIdentifier :(NSString * _Nonnull)patientIdentifier SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP6PECore19PEEncounterProtocol_")
@protocol PEEncounterProtocol
///
/// returns:
/// Unique identifier for encounter
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The Now context for the encounter
- (NSString * _Nonnull)getNowContext SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The destination location for this encounter
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The universal contact identifier (UCI) for this encounter
- (NSString * _Nonnull)getUniversalIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the encounter’s current alerts
- (NSArray<id <PEEncounterAlertProtocol>> * _Nonnull)getAlertsWithPatient:(id <PEPatientProtocol> _Nonnull)patient SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEEstimatesMode, open) {
  PEEstimatesModeEstimates = 0,
  PEEstimatesModeEstimateDetails = 1,
};


/// Protocol for the Friends And Family Updates component
SWIFT_PROTOCOL("_TtP6PECore45PEFriendsAndFamilyUpdatesComponentAPIProtocol_")
@protocol PEFriendsAndFamilyUpdatesComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to the Friends And Family Updates activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForFriendsAndFamilyUpdates:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Friends And Family Updates activity for a given encounter context
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
/// \param buttonStyle Button style to use for this view controller
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getFriendsAndFamilyUpdatesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle buttonStyle:(enum ButtonStyle)buttonStyle SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for getting the view controller for organization refresh
SWIFT_PROTOCOL("_TtP6PECore31PEH2GManageMyAccountAPIProtocol_")
@protocol PEH2GManageMyAccountAPIProtocol <PEComponentAPIProtocol>
/// return the view controller for organization refresh
/// If connecting to an Nov 2019 or later environment, this will return a viewcontroller for a
/// standalone Update My Account activity. Otherwise, it will return a viewcontroller for the Link My Account
/// activity instead.
///
/// returns:
/// UIViewController
- (UIViewController * _Nullable)getManageMyAccountViewControllerWithContext:(enum CommunityUpdateContext)context SWIFT_WARN_UNUSED_RESULT;
/// set the feature we’re displaying the banner
- (void)setFeatureIsCurrentlyCheckingStatusWithFeatureBit:(NSString * _Nonnull)featureBit;
/// launch community loading status request
- (void)launchCommunityLoadingStatusRequest;
/// check if MO link my accounts is available to the user
- (BOOL)isMOManageMyAccountAvailable SWIFT_WARN_UNUSED_RESULT;
/// check if the version support asyn loading
- (BOOL)canAsynLoadingExternalData SWIFT_WARN_UNUSED_RESULT;
/// check if the version supports the H2GPP workflow update
- (BOOL)canSupportH2GPPWorkflowUpdate SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for creating view controller for showing external organization information
SWIFT_PROTOCOL("_TtP6PECore33PEH2GOrgPopupComponentAPIProtocol_")
@protocol PEH2GOrgPopupComponentAPIProtocol <PEComponentAPIProtocol>
/// Get a popup view controller showing a list of H2G organizations with failed connections
/// \param failedOrgsList list of H2G organizations that we failed to connect to
///
/// \param title title of the popup
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GErrorPopupViewControllerForPEH2GFailedOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)failedOrgsList withTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of H2G organizations with failed connections
/// \param orgList list of H2G organizations that we failed to connect to
///
/// \param title title of the popup
///
/// \param shouldShowOrgErrorText false if just the org names should be shown, true if error strings should be used for additional context
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GErrorPopupViewControllerForPEH2GFailedOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)failedOrgsList withTitle:(NSString * _Nonnull)title shouldShowOrgErrorText:(BOOL)shouldShowOrgErrorText SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of H2G organizations
/// \param orgList list of H2G organizations to be shown
///
/// \param title title of the popup
///
/// \param shouldShowUpToDateString Whether to show the refresh date along with the organization’s name
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GOrgPopupViewControllerForPEH2GOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)orgList withTitle:(NSString * _Nonnull)title shouldShowUpToDateString:(BOOL)shouldShowUpToDateString SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of who has data at an org
/// \param orgList list of H2G organizations to be shown
///
/// \param title title of the popup
///
/// \param shouldShowUpToDateString Whether to show the refresh date along with the organization’s name
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getShowSubjectsForH2GOrgViewControllerForSubjects:(NSArray<NSString *> * _Nonnull)subjects forOrg:(id <PEOrganizationInfoProtocol> _Nonnull)org SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for the Happening Soon component
SWIFT_PROTOCOL("_TtP6PECore35PEHappeningSoonComponentAPIProtocol_")
@protocol PEHappeningSoonComponentAPIProtocol <PEComponentAPIProtocol>
/// Finds out whether the user has access to the Happening Soon feature for the given encounter.
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHappeningSoon:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the Happening Soon timeline widgette.
/// \param encounterContext The encounter
///
/// \param componentHost Optionally, the host for this component
///
///
/// returns:
/// the view controller for the widgette
- (UIViewController * _Nullable)getHappeningSoonTimelineWidgetteViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEHealthAdvisoryCompletionDelegate_")
@protocol PEHealthAdvisoryCompletionDelegate
- (void)healthAdvisoryMarkedCompleteWithCompletionDate:(NSDate * _Nonnull)completionDate;
@end


SWIFT_PROTOCOL("_TtP6PECore30PEHomePageComponentAPIProtocol_")
@protocol PEHomePageComponentAPIProtocol <PEComponentAPIProtocol>
/// Get the main homepage view controller
/// \param context The logged-in user’s context
/// <ul>
///   <li>
///     overlay: which screen should appear on top of the homepage
///   </li>
///   <li>
///     selectedPerson: is there a pre-selected person whose context we should launch?
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller displaying the home page
- (UIViewController * _Nonnull)getHomePageFor:(PEUserContext * _Nonnull)context with:(enum HomepageOverlayType)overlay presetPerson:(id <PEPersonProtocol> _Nullable)selectedPerson SWIFT_WARN_UNUSED_RESULT;
/// Get the main MyChart Central v1 homepage view controller
/// \param context The logged-in user’s context
/// <ul>
///   <li>
///     selectedPerson: is there a pre-selected person whose context we should launch?
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller displaying the MyChart Central v1 home page
- (UIViewController * _Nonnull)getMyChartCentralHomePageFor:(PEUserContext * _Nonnull)context presetPerson:(id <PEPersonProtocol> _Nullable)selectedPerson SWIFT_WARN_UNUSED_RESULT;
/// Prevents the homepage from redisplaying its menu when navigating back to it.
/// <ul>
///   <li>
///     Remark This is designed with workflows in mind wherein the consumer wishes to immediately present/push other content on the homepage
///   </li>
/// </ul>
- (void)preventMenuFromReopeningUponReturn;
/// Called by library
///
/// returns:
/// A view controller displaying the feed.
- (UIViewController * _Nonnull)getHomePageFeedFor:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Called by library. Sets the provided item feed controller to “select” the provided context for a wpr identifier.  This primarily reorders the feed so that the selected person is sorted to the top.
- (void)setHealthFeedContext:(UIViewController * _Nonnull)feed person:(id <PEPersonProtocol> _Nonnull)person;
/// Returns if the patient context has access to this component
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHomePage:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Returns if we should audit user actions on the Home Page Menu
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHomePageMenuAudit:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// force the feed to refresh
- (void)invalidateFeed;
/// Get the mobile-optimized personalize shortcuts view controller
/// \param userContext The logged-in user’s context
/// <ul>
///   <li>
///     patientContext: the current patient context
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller for mobile-optimized personalize shortcuts
- (UIViewController * _Nonnull)getPersonalizeShortcutsViewControllerForUserContext:(PEUserContext * _Nonnull)userContext andPatientContext:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns if the user context has access to mobile-optimized personalize shortcuts
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForPersonalizeShortcuts:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Returns the title of the mobile-optimized personalize shortcuts view controller
/// \param userContext The logged-in user’s context
/// <ul>
///   <li>
///     patientContext: the current patient context
///   </li>
/// </ul>
///
///
/// returns:
/// the title
- (NSString * _Nonnull)getPersonalizeShortcutsActivityTitle:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// reload menu and shortcuts from database
- (void)notifyReloadMenu;
/// Sets the Apple Watch status for the current user/org to linked
/// \param userContext The logged-in user’s context
///
/// \param isDismissed Whether or not the Apple Watch card has been dismissed
///
- (void)setAppleWatchCardDismissmal:(PEUserContext * _Nonnull)userContext :(BOOL)isDismissed;
/// Load the menu into memory and indicate whether it was successful
/// \param completion Successful completion
///
- (void)preloadMenuWithCompletion:(void (^ _Nonnull)(BOOL, WebServiceFailedError * _Nonnull))completion;
/// Does the provided view controller represent the homepage menu?
/// \param viewController controller to check
///
- (BOOL)isMenuViewController:(UIViewController * _Nullable)viewController SWIFT_WARN_UNUSED_RESULT;
/// Helper function for determining if Home Page onboarding is complete
/// \param userContext the active user
///
- (BOOL)getOnboardingCompleteStatus:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP6PECore38PEInfectionControlComponentAPIProtocol_")
@protocol PEInfectionControlComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to covid status
- (enum PEComponentAccessResult)hasAccessForCovidStatus:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to prelogin covid status
- (enum PEComponentAccessResult)hasAccessForPreloginCovidStatus:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show
- (UIViewController * _Nullable)getCovidStatusController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// An NSObject of the Covid Status data
- (NSObject * _Nullable)getCovidStatusViewModel:(PEPatientContext * _Nonnull)patientContext successHandler:(void (^ _Nonnull)(NSObject * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// \param phonebookEntry Object that represents the settings for the organization being logged into
///
/// \param defaultTheme theme to display, unless the organization’s theme can be otherwise retrieved
///
/// \param presentingViewControler the viewController from which to present expanded details
///
/// \param existingLiveModel an existing live model to use for the data displayed in the widget. if null, a new live model is created
///
///
/// returns:
/// A views for this component to show
- (UIView * _Nullable)getPreloginCovidStatusWidget:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry defaultTheme:(id <PEThemeProtocol> _Nonnull)defaultTheme presentingViewController:(UIViewController * _Nullable)presentingViewController existingLiveModel:(PELiveModel * _Nullable)existingLiveModel SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param onboardingDelegate The delegate to handle actions taken in the onboarding view
///
///
/// returns:
/// A view controller that shows onboarding for prelogin covid status
- (UIViewController * _Nullable)getCovidPreloginOnboardingController:(PEPatientContext * _Nonnull)patientContext :(id <IOnboardingDelegate> _Nonnull)onboardingDelegate SWIFT_WARN_UNUSED_RESULT;
@end


/// Interface for the callbacks for the LinkTaskWebView to its parent view.
SWIFT_PROTOCOL("_TtP6PECore28PELinkTaskCompletionDelegate_")
@protocol PELinkTaskCompletionDelegate
/// Delegate callbacks Used by ToDo for reporting the complete status of a link task
- (void)linkTaskCompleted;
/// Delegate callbacks Used by ToDo for reporting the skip status of a link task
- (void)linkTaskSkipped;
@end


SWIFT_CLASS("_TtC6PECore11PELiveModel")
@interface PELiveModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Region;
@class Script;

SWIFT_CLASS("_TtC6PECore8PELocale")
@interface PELocale : NSObject
@property (nonatomic, strong) Language * _Nonnull language;
@property (nonatomic, strong) Region * _Nonnull region;
@property (nonatomic, strong) Script * _Nonnull script;
- (nonnull instancetype)init:(Language * _Nonnull)language :(Region * _Nonnull)region :(Script * _Nonnull)script OBJC_DESIGNATED_INITIALIZER;
/// The string representation of this as a locale code for general usage
/// Takes the format: lang-script-region
@property (nonatomic, copy) NSString * _Nonnull code;
/// The string representation of this as a locale code for Epic server-side usage.
/// Takes the format: lang-region-script
@property (nonatomic, copy) NSString * _Nonnull commandCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) BOOL isArabicLang;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
/// Construct a PELocale from a string locale code
/// Handles both lang-script-region and lang-region-script formats
+ (PELocale * _Nonnull)fromString:(NSString * _Nonnull)rawValue SWIFT_WARN_UNUSED_RESULT;
/// Construct a PELocale from a string locale code
+ (PELocale * _Nullable)fromLocale:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Convert to a Foundations locale object
- (NSLocale * _Nonnull)toLocale SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull EnglishUS;)
+ (PELocale * _Nonnull)EnglishUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull EnglishGB;)
+ (PELocale * _Nonnull)EnglishGB SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull ArabicSA;)
+ (PELocale * _Nonnull)ArabicSA SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull ArabicAE;)
+ (PELocale * _Nonnull)ArabicAE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Spanish;)
+ (PELocale * _Nonnull)Spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Swedish;)
+ (PELocale * _Nonnull)Swedish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull SimplifiedChineseUS;)
+ (PELocale * _Nonnull)SimplifiedChineseUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Russian;)
+ (PELocale * _Nonnull)Russian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull MongolianUS;)
+ (PELocale * _Nonnull)MongolianUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Gibberish;)
+ (PELocale * _Nonnull)Gibberish SWIFT_WARN_UNUSED_RESULT;
/// Text alignment for this Locale. Ex: RTL, LTR
- (enum TextAlignment)getTextAlignment SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6PECore18PELocalizedStrings")
@interface PELocalizedStrings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)initStrings:(PELocale * _Nonnull)locale SWIFT_METHOD_FAMILY(none);
/// The locale for the user changed
+ (void)handleLocaleChange:(PELocale * _Nonnull)locale;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.  With parameters in the string
/// \param key The key for the string
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale.  With parameters in the string
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle.  With parameters in the string
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
/// \param count the count for the plural string
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEMedicationsComponentAPIProtocol_")
@protocol PEMedicationsComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the outpatient medications activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForOutpatientMedications:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the encounter-specific medications activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForEncounterSpecificMedications:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the MyChart Now medications view controller
/// \param encounterContext The encounter context with which to launch the problem list
///
/// \param viewControllerTitle The title for the MyChart Now medications view controller that should be displayed in the app bar
///
///
/// returns:
/// MyChart Now Medications view controller
- (UIViewController * _Nullable)getMyChartNowMedicationsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore41PEMedicationsComponentBridgingAPIProtocol_")
@protocol PEMedicationsComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxID:(NSString * _Nullable)rxID eorgID:(NSString * _Nullable)eorgID SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getMedicationsViewControllerForMCNOutPatientWithParentDelegate:(id <PEComponentHostParentDelegate> _Nullable)parentDelegate SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getMedicationsViewControllerForRefillWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldDisableOutpatientMeds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore17PEMessageProvider_")
@protocol PEMessageProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isPCP;
@property (nonatomic, readonly, copy) NSString * _Nonnull photoURL;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@property (nonatomic, readonly) BOOL isProviderIdEncrypted;
@end


SWIFT_PROTOCOL("_TtP6PECore31PEMessagingComponentAPIProtocol_")
@protocol PEMessagingComponentAPIProtocol <PEComponentAPIProtocol>
/// Checks whether the patient has access to send a medical advice message
/// \param patientContext The patient context to check
///
///
/// returns:
/// Whether the patient has access to send a medical advice message
- (enum PEComponentAccessResult)hasAccessForSendingMedicalAdviceMessage:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Checks whether the patient has access to MO Messages
/// \param patientContext The patient context to check
///
///
/// returns:
/// whether the patient has access to MO Messages
- (enum PEComponentAccessResult)hasAccessForMOMessages:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Checks whether the patient has access to inpatient conversations
/// \param encounterContext The encounter context to check
///
///
/// returns:
/// whether the patient has access to inpatient conversations
- (enum PEComponentAccessResult)hasAccessForInpatientMessages:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch into the messages list activity
/// \param patientContext The patient context  for the patient accessing messages
///
/// \param params query params to pass through to the MO messaging activity
///
///
/// returns:
/// A view controller to launch the messages list activity
- (UIViewController * _Nullable)getMessageListViewController:(PEPatientContext * _Nonnull)patientContext params:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch into the Inpatient conversation activity
/// \param encounterContext The patient context  for the patient accessing messages
///
/// \param viewControllerTitle The title for the inpatient messaging view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller to launch the inpatient conversation activity
- (UIViewController * _Nullable)getInpatientMessageListViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch message detail for a single message
/// \param patientContext The patient context for the patient accessing the message detail
///
/// \param messageID The encrypted messageID of the message to launch details for
///
/// \param myChartWebMessageIDKey The key that is used to place the messageId in the MyChartWebArgs as a parameter
///
/// \param isEncrypted Boolean indicating whether the message ID is encrypted
///
/// \param orgID Organization ID of the external organization for Happy Together messages
///
///
/// returns:
/// A view controller to launch into message details for the passed in message ID
- (UIViewController * _Nullable)getMessageDetailViewController:(PEPatientContext * _Nonnull)patientContext forMessage:(NSString * _Nonnull)messageID myChartWebMessageIDKey:(NSString * _Nonnull)myChartWebMessageIDKey andIsEncrypted:(BOOL)isEncrypted forOrganization:(NSString * _Nonnull)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message
/// \param patientContext The patient context for the patient composing the message
///
///
/// returns:
/// A view controller to launch into a message compose activity
- (UIViewController * _Nullable)getComposeViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message
/// \param patientContext The patient context for the patient composing the message
///
///
/// returns:
/// A view controller to launch into a medical advice message compose activity
- (UIViewController * _Nullable)getComposeMedicalAdviceViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a customer service message
/// \param patientContext The patient context for the patient composing the message
///
/// \param isExternal Whether or not this message should be launched in an external H2G context
///
///
/// returns:
/// A view controller to launch into a customer service message compose activity
- (UIViewController * _Nullable)getComposeCustomerServiceViewController:(PEPatientContext * _Nonnull)patientContext isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a billing  customer service message
/// \param patientContext The patient context for the patient composing the message
///
/// \param encryptedAccountID The encrypted billing account ID
///
/// \param encryptedBilligContext The billing type - 1 (PB), 2 (HB), or 3 (SBO)
///
/// \param isExternal Whether or not this message should be launched in an external H2G context
///
///
/// returns:
/// A view controller to launch into a customer service message compose activity for a billing-related question
- (UIViewController * _Nullable)getComposeBillingCustomerServiceViewController:(PEPatientContext * _Nonnull)patientContext forAccount:(NSString * _Nonnull)encryptedAccountID withType:(NSString * _Nonnull)encryptedBilligContext isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message to a  provider
/// \param patientContext The patient context for the patient composing the message
///
/// \param provider The provider that will be the recipient of the message
///
///
/// returns:
/// A view controller to launch into a message compose activity for a provider
- (UIViewController * _Nullable)getProviderMessageViewController:(PEPatientContext * _Nonnull)patientContext forProvider:(id <PEMessageProvider> _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message with a predefined subject or org
/// \param patientContext The patient context for the patient composing the message
///
/// \param subject The subject of the message to send. Note that there is a limit of 2048 characters on the entire URL. So, the subject should not be long enough that the length of the URL exceeds that limit. It is important to factor in the fact that I18N and encryption can cause the length of the subject to increase while populating the subject.
///
/// \param orgID Organization ID of the external organization for Happy Together message compose
///
///
/// returns:
/// A view controller to launch into a message compose activity with the subject
- (UIViewController * _Nullable)getComposeMedicalAdviceWithSubjectOrOrgViewController:(PEPatientContext * _Nonnull)patientContext withSubject:(NSString * _Nonnull)subject forOrganization:(NSString * _Nonnull)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message with an attachment passed in via a DCS ID
/// \param patientContext The patient context for the patient composing the message
///
/// \param dcsID The DCS ID of the attachment that will be attached
///
- (UIViewController * _Nullable)getComposeMedicalAdviceWithDCSIDViewController:(PEPatientContext * _Nonnull)patientContext withDCSID:(NSString * _Nonnull)dcsID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose an education question message with an encrypted LTK ID
/// \param patientContext The patient context for the patient composing the message
///
/// \param ltkID The related education task ID
///
/// \param isExternal Whether or not this message should be launched in an external H2G context
///
- (UIViewController * _Nullable)getComposeEduQuestionWithLTKIDViewController:(PEPatientContext * _Nonnull)patientContext withLTKID:(NSString * _Nonnull)ltkID isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message about a prescription medication
/// \param patientContext The patient context for the patient composing the message
///
/// \param medication The encrypted ID of the medication that will be attached
///
- (UIViewController * _Nullable)getComposePrescriptionMessageViewController:(PEPatientContext * _Nonnull)patientContext withMedication:(NSString * _Nonnull)medication SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore31PEMyChartNowAutoRefreshWidgette_")
@protocol PEMyChartNowAutoRefreshWidgette
- (void)performAutoRefresh;
@end

@protocol PEMyChartNowComponentDelegate;
@protocol PEMyChartNowSwitcherDelegate;
@protocol PEMyChartNowSwitcherProtocol;
@protocol PEMyChartNowItemFeedThemeProtocol;

SWIFT_PROTOCOL("_TtP6PECore32PEMyChartNowComponentAPIProtocol_")
@protocol PEMyChartNowComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
/// \param delegate The delegate to inform when the activities are loaded
///
- (void)getMyChartNowActivitiesForPatientContext:(PEPatientContext * _Nonnull)patientContext delegate:(id <PEMyChartNowComponentDelegate> _Null_unspecified)delegate;
/// Notifies the MyChart Now component that the patient context has changed
- (void)onPatientContextChanged;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to this component
- (enum PEComponentAccessResult)hasAccessForMyChartNow:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign
- (UIViewController * _Nullable)getMyChartNowFullscreenViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param secondaryDeepLinkUrl A deep link url that we want to launch after MCNHome launches
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign
- (UIViewController * _Nullable)getMyChartNowFullscreenViewController:(PEPatientContext * _Nonnull)patientContext secondaryDeepLinkUrl:(NSString * _Nonnull)secondaryDeepLinkUrl SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign, for use in the MyChart library
- (UIViewController * _Nullable)getMyChartNowWidgetViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param componentHost The component’s host. Nullable for library support, but the view controller expects this to be set before it’s displayed.
///
///
/// returns:
/// A view controller for this component to show in the classic springboard
- (UIViewController * _Nullable)getMyChartNowClassicViewController:(PEPatientContext * _Nonnull)patientContext componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost SWIFT_WARN_UNUSED_RESULT;
/// Try to get a redirect view controller from an epicmychart deep link
/// \param userInfo The dictionary of userInfo from the deep link
///
///
/// returns:
/// A view controller for the deep link
- (UIViewController * _Nullable)getMyChartNowDeepLinkController:(NSDictionary<NSString *, NSString *> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Try to get a secondary deep link url from a mychartnowhome deep link
/// \param userInfo The dictionary of userInfo from the deep link
///
///
/// returns:
/// A deep link url
- (NSString * _Nullable)getMyChartNowDeepLinkUrl:(NSDictionary<NSString *, NSString *> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The current encounter context for this widget
///
/// \param activityDescriptor The activity descriptor corresponding to the MyChartNow Feature
///
/// \param delegate The delegate to inform when the context has been switched
///
///
/// returns:
/// A view controller containing the switcher widget
- (UIView <PEMyChartNowSwitcherProtocol> * _Nonnull)getMyChartNowSwitcherView:(PEEncounterContext * _Nonnull)encounterContext :(NSString * _Nonnull)activityDescriptor :(id <PEMyChartNowSwitcherDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// \param myChartnowContextId The string MyChart Now context ID
///
///
/// returns:
/// The UIImage of the icon to use for this context
- (UIImage * _Nonnull)getMyChartNowIcon:(NSString * _Nonnull)myChartnowContextId SWIFT_WARN_UNUSED_RESULT;
/// \param myChartnowContextId The string MyChart Now context ID
///
///
/// returns:
/// A short string used as part of an accessibility label for the patient tab informing the VoiceOver user about the current now context
- (NSString * _Nonnull)getMyChartNowPatientTabAccessibilityLabel:(NSString * _Nonnull)myChartnowContextId SWIFT_WARN_UNUSED_RESULT;
/// \param myChartnowContextId The string MyChart Now context ID
///
///
/// returns:
/// A string that can be used to describe the non-MyChart Now activity section on the springboard. This string should be used as the heading for any activities meant to be used outside of the MyChart Now encounter.
- (NSString * _Nonnull)getMyChartNowOtherActivityListTitle:(NSString * _Nonnull)myChartnowContextId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Whether or not MyChart Now has automatically launched for the patient whose chart is being viewed. Reset when the user logs out or switches subjects through the proxy switcher
- (BOOL)getMyChartNowHasShownForCurrPatient SWIFT_WARN_UNUSED_RESULT;
/// \param hasShown True when MCN auto launches, false when current patient changes
///
- (void)setMyChartNowHasShownForCurrPatient:(BOOL)hasShown;
/// \param url The URL returned by the video response when loading up the MCN Onboarding video from server
///
- (void)setMyChartNowOnboardingURLWithUrl:(NSString * _Nonnull)url;
///
/// returns:
/// The URL that the embedded video controller will be passed
- (NSString * _Nonnull)getMyChartNowOnboardingURL SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The current encounter context for this instance of MyChart Now
///
/// \param activityDescriptor The string used as the MyChartNowFeatureType descriptor for the activity
///
///
/// returns:
/// The name of the activity to be used as the title text in the header menu banner
- (void)getTitleForMyChartNowActivity:(PEPatientContext * _Nonnull)patientContext :(NSString * _Nonnull)activityDescriptor onTitleValueRetrieved:(void (^ _Nonnull)(NSString * _Nullable))onTitleValueRetrieved;
/// \param patientContext The patient context object
///
///
/// returns:
/// Indirectly (via closures) either the encounter context object or an error event
- (void)getMyChartContextWithPatientContext:(PEPatientContext * _Nonnull)patientContext onComplete:(void (^ _Nonnull)(id <PEEncounterProtocol> _Nullable))onComplete onError:(void (^ _Nonnull)(void))onError;
/// \param myChartnowContextId the string MyChart Now context ID
///
///
/// returns:
/// an object containing theming information for a specific context in the HomePage item feed
- (id <PEMyChartNowItemFeedThemeProtocol> _Nullable)getMyChartNowFeedThemeWithMyChartNowContextId:(NSString * _Nonnull)myChartNowContextId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the list of MyChart Now context ID strings supported by this version of the component
- (NSArray<NSString *> * _Nonnull)getMyChartNowAvailableContexts SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The current encounter context for this instance of MyChart Now
///
///
/// returns:
/// String array with the list of problems loaded into MyChart Now
- (NSArray<NSString *> * _Nonnull)getListOfProblemsWithEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Invalidates the “unread” badge associated with a feature
/// \param encounterContext the Encounter context
///
/// \param featureID the String feature ID
///
- (void)invalidateFeatureBadgeWithEncounterContext:(PEEncounterContext * _Nonnull)encounterContext featureID:(NSString * _Nonnull)featureID;
@end


SWIFT_PROTOCOL("_TtP6PECore29PEMyChartNowComponentDelegate_")
@protocol PEMyChartNowComponentDelegate
/// Called when the list of MyChartNow activity descriptors has been loaded
/// \param availableFeatures The list of MyChartNow activity descriptors that will be displayed in the MyChart Now widget
///
- (void)didGetMyChartNowActivities:(NSArray<NSString *> * _Nullable)availableFeatures;
/// Called when there was a problem loading the list of activity descriptors
/// \param errorMessage The error message that was encountered during the activity load
///
- (void)didGetMyChartNowActivitiesError:(NSString * _Nullable)errorMessage;
@end


/// Describes the theming and formatting of the home page card
SWIFT_PROTOCOL("_TtP6PECore33PEMyChartNowItemFeedThemeProtocol_")
@protocol PEMyChartNowItemFeedThemeProtocol
///
/// returns:
/// a background image that is displayed at the start (left) of
/// the card header
- (UIImage * _Nullable)getStartBackgroundImage SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a background image that is displayed at the end (right) of
/// the card header
- (UIImage * _Nullable)getEndBackgroundImage SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header background
- (UIColor * _Nonnull)getHeaderBackgroundColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header foreground triangle
- (UIColor * _Nonnull)getHeaderForegroundColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header text color
- (UIColor * _Nonnull)getHeaderTextColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the start date if it exists
- (UIImage * _Nullable)getStartDateIcon SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the location if it exists
- (UIImage * _Nullable)getLocationIcon SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the end date if it exists: String
- (UIImage * _Nullable)getEndDateIcon SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes tags for views within the MyChart Now activity that can be used in shared element transition animations
typedef SWIFT_ENUM(NSInteger, PEMyChartNowSharedAnimationElementViewTag, open) {
  PEMyChartNowSharedAnimationElementViewTagActivityBackground = 96000,
  PEMyChartNowSharedAnimationElementViewTagNavigationBar = 96001,
  PEMyChartNowSharedAnimationElementViewTagHeaderBackground = 96002,
  PEMyChartNowSharedAnimationElementViewTagHeaderStartImage = 96003,
  PEMyChartNowSharedAnimationElementViewTagHeaderEndImage = 96004,
};

/// Describes the context that has been selected with the MyChartNow switcher widget
typedef SWIFT_ENUM(NSInteger, PEMyChartNowSwitcherContext, open) {
  PEMyChartNowSwitcherContextPatient = 1,
  PEMyChartNowSwitcherContextEncounter = 2,
};


SWIFT_PROTOCOL("_TtP6PECore28PEMyChartNowSwitcherDelegate_")
@protocol PEMyChartNowSwitcherDelegate
/// Called when the switcher widget has changed contexts
/// Will be called once when the widget initially loads with the default context
/// \param context The current active context (eg. Encounter)
///
- (void)didSwitchContext:(enum PEMyChartNowSwitcherContext)context;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEMyChartNowSwitcherProtocol_")
@protocol PEMyChartNowSwitcherProtocol
/// The currently selected switcher context
@property (nonatomic, readonly) enum PEMyChartNowSwitcherContext currentContext;
@end


SWIFT_PROTOCOL("_TtP6PECore20PEMyChartNowWidgette_")
@protocol PEMyChartNowWidgette
/// Called when the user taps the header of a MyChart Now widgette
- (void)didTapHeader;
@end

@class UINavigationController;
@protocol TextStyleProtocol;

SWIFT_PROTOCOL("_TtP6PECore32PEMyChartRefComponentAPIProtocol_")
@protocol PEMyChartRefComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// The application key for menu filtering [MYCHART, MYCHART IOS]
- (NSArray<NSString *> * _Nonnull)getApplicationKeys SWIFT_WARN_UNUSED_RESULT;
/// Sets the default selected person to bypass the splash screen
/// \param userId the user who is logging in
///
/// \param newDefaultWprId the default selected person’s WPR
///
- (void)setDefaultPersonWprIdFor:(NSString * _Nonnull)userId newDefaultWprId:(NSString * _Nullable)newDefaultWprId;
/// Gets the default selected person when bypassing the splash screen
/// \param userId the user who is logging in
///
///
/// returns:
/// the default selected person’s WPR
- (NSString * _Nullable)getDefaultPersonWprIdFor:(NSString * _Nonnull)userId forHomepageLaunch:(BOOL)forHomepageLaunch SWIFT_WARN_UNUSED_RESULT;
/// Checks for secondary login methods to set up
/// \param phonebook a PEPhonebookEntry that gets converted to a WPServer. If nil, uses the current server
///
///
/// returns:
/// The raw value of PESecondaryLoginMethod
- (NSInteger)getAvailableSecondaryLoginMethodsToSetUpRawValue:(id <PEPhonebookEntryProtocol> _Nullable)phonebook SWIFT_WARN_UNUSED_RESULT;
/// Do not show the feed item for secondary login, even if not set
- (void)setPreventSecondaryLoginAlert:(BOOL)preventAlert;
/// Has the user requested not to see the alert for secondary login?
- (BOOL)getPreventSecondaryLoginAlert SWIFT_WARN_UNUSED_RESULT;
/// Get the currently monitored CSN
///
/// returns:
/// returns the CSN, empty string if no monitored appt
- (NSString * _Nonnull)getMonitoredAppointmentCSN SWIFT_WARN_UNUSED_RESULT;
/// Increments the number of logins completed by the user for this device and installation
- (void)incrementLoginCounter;
/// Sets flag that the app review card has been dismissed
- (void)setAppReviewCardDismissWithDismissed:(BOOL)dismissed;
/// Determines if the app review card should be requested from the server
- (BOOL)shouldDisplayAppReviewCard SWIFT_WARN_UNUSED_RESULT;
/// Sets flag that the background app refresh card has been dismissed
- (void)setBackgroundAppRefreshCardDismissalFlag:(BOOL)isDismissed;
/// Checks if the background app refresh card has been dismissed before
- (BOOL)getBackgroundAppRefreshCardDismissalFlag SWIFT_WARN_UNUSED_RESULT;
/// Check internal storage to see if we have viewed secondary login onboarding
/// <ul>
///   <li>
///     Returns True if the user has viewed the secondary login
///   </li>
/// </ul>
- (BOOL)hasUserViewedSecondaryLogin SWIFT_WARN_UNUSED_RESULT;
/// Adds the current user/org pair to storage for secondary login onboarding
- (void)setSecondaryLoginViewed;
/// Saves the given email and phone to the users notification preferences
- (void)saveNotificationPreferencesWithEmail:(NSString * _Nonnull)email phone:(NSString * _Nonnull)phone;
/// Container  for apple watch APIs
@property (nonatomic, readonly, strong) id <PEAppleWatchAPIs> _Nonnull appleWatch;
/// Returns whether the current deep link is coming from a hand off
- (BOOL)isDeepLinkComingFromHandOff SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the current deep link is an internal prelogin deep link
- (BOOL)isDeepLinkComingFromPushNotification SWIFT_WARN_UNUSED_RESULT;
/// Returns whether secondary login is enabled at the current organization for a user other than the one currently logged in
- (BOOL)isSecondaryLoginEnabledForOtherUser SWIFT_WARN_UNUSED_RESULT;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for the organization with the given orgId
/// remark:
/// This method is async to ensure that code can be executed only after the secondary login has been removed
/// \param orgId the org ID of the organization for which the secondary login token is being removed
///
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
- (void)removeSecondaryLoginWithOrgId:(NSString * _Nullable)orgId completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Returns a boolean indicating whether the current user has a RAT for prelogin Covid Status
- (BOOL)hasPreloginCovidStatusToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether this is a self-submitted build using the homepage
- (BOOL)isSelfSubmittedCustomerUsingHomepage SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether or not a self-submitted customer has disabled the nav bar logo
- (BOOL)shouldHideEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Returns the top view controller
- (UIViewController * _Nullable)getTopViewController SWIFT_WARN_UNUSED_RESULT;
/// Get the phonebook entries
- (void)loadPhonebookEntriesWithSuccess:(void (^ _Nonnull)(NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull, BOOL))success failure:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))failure;
/// Get the cached phonebook entries
- (NSArray<id <PEPhonebookEntryProtocol>> * _Nullable)getCachedPhonebookEntries SWIFT_WARN_UNUSED_RESULT;
/// Clears all files from the MyChart cache
/// <ul>
///   <li>
///     Returns true if successful, false otherwise
///   </li>
/// </ul>
- (BOOL)clearCachedFiles;
/// Asks whether signup is allowed for the phonebook entry
- (BOOL)canLaunchSignUpWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
/// Retrieves expiry message for a test library build
- (NSString * _Nullable)getTestLibraryExpiryMessage SWIFT_WARN_UNUSED_RESULT;
/// Gets the EULA as a utf8-encoded encoded string from the EULA file
/// <ul>
///   <li>
///     Returns the EULA string for displaying the EULA
///   </li>
/// </ul>
- (NSString * _Nullable)getEulaString SWIFT_WARN_UNUSED_RESULT;
/// Gets the privacy policy URL for onboarding
/// <ul>
///   <li>
///     Returns the URL string for the privacy policy
///   </li>
/// </ul>
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
/// Gets the status of the EULA
/// <ul>
///   <li>
///     Returns True if the EULA has been accepted by the user/device
///   </li>
/// </ul>
- (BOOL)isEULAAccepted SWIFT_WARN_UNUSED_RESULT;
/// Sets the EULA as accepted after onboarding
- (void)setEulaAccepted;
/// Gets the notifications status for onboarding
/// <ul>
///   <li>
///     Returns true if the notifications screen has been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedNotificationsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Sets the notifications screen as viewed after onboarding
- (void)setNotificationsOnboardingViewed;
/// Gets the location status for onboarding
/// <ul>
///   <li>
///     Returns true if the location screen has been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedLocationOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Gets the notifications status for onboarding
/// <ul>
///   <li>
///     Returns true if the notifications screen has been viewed or is unavailable
///   </li>
/// </ul>
- (void)setLocationOnboardingViewed;
/// Gets the status for all three pre-login onboarding steps
/// <ul>
///   <li>
///     Returns true if all three steps (EULA, notifications, location) have been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedPreLoginOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Makes a location always auth request
- (void)makeLocationAuthorizationRequest;
/// Make a location while using auth request
- (void)makeLocationWhileUsingAuthorizationRequest;
/// Gets the authorization status of location
/// <ul>
///   <li>
///     Returns the current CLAuthorizationStatus
///   </li>
/// </ul>
- (CLAuthorizationStatus)getLocationAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
/// Gets branded app settings for push notifications
/// <ul>
///   <li>
///     Returns true if supportsBrandedAppPushNotifications is true
///   </li>
/// </ul>
- (BOOL)supportsPushNotifications SWIFT_WARN_UNUSED_RESULT;
/// Gets the string for the UserInfo entry for a biometrics workflow notification during onboarding, fired after storing biometrics
/// <ul>
///   <li>
///     Returns true if storing biometrics was successful
///   </li>
/// </ul>
- (NSString * _Nonnull)getUserInfoStringForBiometricsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Set user declined org’s terms, conditions, proxy statement
- (void)setUserDeclinedOrgTermsConditions;
/// Get create passcode workflow for onboarding
- (UIViewController * _Nullable)getPasscodeWorkflow SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether biometrics for current user and org were enabled
- (void)setBiometrics;
/// Returns a boolean indicating whether biometrics is currently enabled for a user
- (BOOL)getBiometrics SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether to disable the animated background on the welcome page
- (BOOL)isAnimatedBackgroundDisabled SWIFT_WARN_UNUSED_RESULT;
/// Returns a display name for the application.
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
/// Returns the navigation controller for org selection
- (UINavigationController * _Nonnull)getOrgSelectionViewController SWIFT_WARN_UNUSED_RESULT;
/// Opens the camera to scan an orgselect QR code
- (void)scanOrgSelectQRCodeWithViewController:(UIViewController * _Nonnull)viewController;
/// Sets the root nav controller to always use dark status bar icons
- (void)setNavControllerOnboardingOverride:(BOOL)status;
/// Removes a web server from the preferred list
- (void)removeWebServerFromPreferredWithOrgId:(NSString * _Nonnull)orgId;
/// Returns whether the language picker is available
- (BOOL)isLanguagePickerAvailable SWIFT_WARN_UNUSED_RESULT;
/// Jumps out into the settings-app language picker, with potentially a popup beforehand
/// \param vc vc from which to launch the informational popup
///
/// \param orgName the current organization name
///
- (void)launchSettingsLanguagePickerWithVc:(UIViewController * _Nonnull)vc orgName:(NSString * _Nonnull)orgName;
/// Displays the share dialog and will handle sharing the file pass into the items array.
- (void)displayShareDialogWithItemsWithItems:(NSArray * _Nonnull)items presenter:(UIViewController * _Nonnull)presenter fromBarButtonItem:(UIBarButtonItem * _Nonnull)fromBarButtonItem didShow:(void (^ _Nonnull)(void))didShow didCancel:(void (^ _Nullable)(void))didCancel;
/// Check if the app supports updates to the patient access list
- (BOOL)hasDynamicPatientAccessList SWIFT_WARN_UNUSED_RESULT;
/// Get the color key for a PEBrandedColor
- (NSArray<NSString *> * _Nullable)getWebCSSColorKeysWithColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
- (id <PEThemeProtocol> _Nonnull)getMyChartThemeWithLanguage:(NSString * _Nonnull)language colorProvider:(id <BrandedColorProviderProtocol> _Nonnull)colorProvider assetsProvider:(id <BrandedAssetsProviderProtocol> _Nonnull)assetsProvider cardStyle:(id <CardStyleProtocol> _Nonnull)cardStyle interactiveCardStyle:(id <CardStyleProtocol> _Nonnull)interactiveCardStyle textStyles:(NSArray<id <TextStyleProtocol>> * _Nonnull)textStyles SWIFT_WARN_UNUSED_RESULT;
/// Determines if the warning displayed when the user attempts to share content outside of the app should be displayed.
/// If the user indicates that they should not be asked again, you can call <code>disableShareWarning()</code> to make this function return false going forward.
///
/// returns:
/// true if the warning should be shown, false otherwise
- (BOOL)shouldShowShareWarning SWIFT_WARN_UNUSED_RESULT;
/// Disables the share warning that is displayed to users when they attempt to share content outside of the app
- (void)disableShareWarning;
@property (nonatomic, readonly) BOOL isUserAuthenticationStatusNotAuthenticated;
/// Determines if the application is configured to hide the EULA checkbox in the Onboarding and EULA agreement recollection workflows
/// Returns <code>true</code> if the EULA checkbox should be hidden, <code>false</code> otherwise
@property (nonatomic, readonly) BOOL shouldHideEulaCheckbox;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEMyDocumentsComponentAPIProtocol_")
@protocol PEMyDocumentsComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to patient-level  my documents
/// \param patientContext the patient context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForMyDocuments:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO my documents  activity for a given patient context
/// \param patientContext the patient context to display
///
///
/// returns:
/// A view controller displaying the my documents
- (MyChartWebViewController * _Nullable)getMyDocumentsViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO my documents activity for an admission
/// \param encounterContext the encounter context for the admission
///
/// \param viewControllertitle The title for the inpatient my documents  view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller displaying the my documents
- (MyChartWebViewController * _Nullable)getInpatientMyDocumentsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle isBedsideMode:(BOOL)isBedsideMode SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore36PENativeMessagesComponentAPIProtocol_")
@protocol PENativeMessagesComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// the native view controller to launch into message compose for a provider
- (UIViewController * _Nullable)getNativeProviderMessageViewControllerWithProvider:(id <PEMessageProvider> _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
@end


/// Onboarding Component API
SWIFT_PROTOCOL("_TtP6PECore32PEOnboardingComponentAPIProtocol_")
@protocol PEOnboardingComponentAPIProtocol <PEComponentAPIProtocol>
/// Gets the optional two factor enrollment view
/// <ul>
///   <li>
///     Returns a UIViewController instance of OnboardingWorkflowStepView for 2FA
///   </li>
/// </ul>
/// \param linkAction Action callback for the “Learn More” link
///
/// \param positiveAction Action callback for the accept button
///
/// \param negativeAction Action callback for the decline button
///
/// \param debugText Text for non-prod users to bypass 2FA
///
/// \param debugLinkAction Action for non-prod users to bypass 2FA
///
- (UIViewController * _Nonnull)getTwoFactorEnrollmentOptionalViewControllerWithLinkAction:(void (^ _Nonnull)(void))linkAction positiveAction:(void (^ _Nonnull)(void))positiveAction negativeAction:(void (^ _Nonnull)(void))negativeAction debugText:(NSString * _Nullable)debugText debugLinkAction:(void (^ _Nullable)(void))debugLinkAction SWIFT_WARN_UNUSED_RESULT;
/// Gets the required two factor enrollment view
/// <ul>
///   <li>
///     Returns a UIViewController instance of OnboardingWorkflowStepView for 2FA
///   </li>
/// </ul>
/// \param linkAction Action callback for the “Learn More” link
///
/// \param positiveAction Action callback for the accept button
///
/// \param negativeAction Action callback for the decline button
///
/// \param debugText Text for non-prod users to bypass 2FA
///
/// \param debugLinkAction Action for non-prod users to bypass 2FA
///
- (UIViewController * _Nonnull)getTwoFactorEnrollmentRequiredViewControllerWithLinkAction:(void (^ _Nonnull)(void))linkAction positiveAction:(void (^ _Nonnull)(void))positiveAction negativeAction:(void (^ _Nonnull)(void))negativeAction debugText:(NSString * _Nullable)debugText debugLinkAction:(void (^ _Nullable)(void))debugLinkAction SWIFT_WARN_UNUSED_RESULT;
/// Gets the org’s terms and conditions view controller
/// \param phonebook Phonebook for the org we are viewing the Terms and Conditions of.
///
/// \param onCompletion Action taken when the view is dismissed, either by accepting (true) or declining (false) the Terms and Conditions.
///
///
/// returns:
/// A UIViewController with a root view of OrgTermsConditionsView
- (UIViewController * _Nullable)getOrgTermsConditionsViewController:(id <PEPhonebookEntryProtocol> _Nonnull)phonebook :(id <PEPatientProtocol> _Nullable)userPatient :(NSArray<id <PEPatientProtocol>> * _Nullable)patientList :(void (^ _Nonnull)(BOOL))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Gets the secondary login setup view controller
/// \param onCompletion Action taken when the view is dismissed, either by accepting (true) or declining (false) secondary login.
///
///
/// returns:
/// A UIViewController with a root view of OnboardingWorkflowStepView for secondary login
- (UIViewController * _Nullable)getSecondaryLoginSetupViewControllerOnCompletion:(void (^ _Nonnull)(BOOL, BOOL))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Gets the push notification setup view controller
/// \param onCompletion Action taken when the view is dismissed
///
///
/// returns:
/// A UIViewController with a root view of OnboardingWorkflowStepView for push notification
- (UIViewController * _Nullable)getPushNotificationSetupViewControllerOnCompletion:(void (^ _Nonnull)(void))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Get the pre-login view controller (welcome, notifications, location)
/// <ul>
///   <li>
///     Returns the UIViewController that contains the pre-login onboarding steps
///   </li>
/// </ul>
- (UIViewController * _Nonnull)getPreLoginViewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nonnull)getHomePageOnboardingViewControllerWithContext:(PEUserContext * _Nonnull)context onboardingDelegate:(id <IOnboardingDelegate> _Nonnull)onboardingDelegate SWIFT_WARN_UNUSED_RESULT;
/// Adds step to singleton containing list of a user’s mid-login onboarding steps, and creates the singleton if it doesn’t exist.
/// \param step A member of the OnboardingSteps enum.
///
- (void)addStepToMidLoginOnboardingWorkflowWithStep:(enum MidLoginOnboardingStep)step;
/// Clears the singleton containing list of a user’s mid-login onboarding steps.
- (void)clearStepsInMidLoginOnboardingWorkflow;
/// Because Objective-C apparently can’t handle arrays of enums, even though we don’t want to use this in an Objective-C context,
/// we have to do something absurd to get the progress dots into Home Page onboarding.
- (NSArray<NSNumber *> * _Nonnull)getMidLoginOnboardingWorkflow SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore22PEOnboardingHeaderView")
@interface PEOnboardingHeaderView : SelfLoadingView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Page view controller that holds the onboarding views
SWIFT_CLASS("_TtC6PECore30PEOnboardingHostViewController")
@interface PEOnboardingHostViewController : UIViewController
@property (nonatomic, weak) IBOutlet PEOnboardingHeaderView * _Null_unspecified headerView;
/// Set status bar style based on nav bar text color
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// Sets up main view elements and pager
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIPageViewController;

@interface PEOnboardingHostViewController (SWIFT_EXTENSION(PECore)) <UIPageViewControllerDataSource>
/// gets the onboarding page before the given page
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// gets the onboarding page after the given page
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// gets the number of onboarding pages
- (NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
/// gets the index of the current onboarding page
- (NSInteger)presentationIndexForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore29PEOnboardingNavigationControl")
@interface PEOnboardingNavigationControl : SelfLoadingView
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified actionButton;
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified backButton;
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified nextButton;
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified playButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class PEOnboardingTextContentView;

/// The main view controller all onboarding screen subclass
SWIFT_CLASS("_TtC6PECore30PEOnboardingPageViewController")
@interface PEOnboardingPageViewController : UIViewController
@property (nonatomic, weak) IBOutlet PEOnboardingTextContentView * _Null_unspecified textContentView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable imageView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PEOnboardingPageViewController (SWIFT_EXTENSION(PECore)) <IOnboardingNavigationDelegate>
- (void)actionTapped;
- (void)backTapped;
- (void)nextTapped;
- (void)playTapped;
@end


SWIFT_CLASS("_TtC6PECore27PEOnboardingTextContentView")
@interface PEOnboardingTextContentView : SelfLoadingView
@property (nonatomic, weak) IBOutlet MyChartUILabel * _Null_unspecified titleLabel;
@property (nonatomic, weak) IBOutlet MyChartUILabel * _Null_unspecified bodyLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, PEOrganizationCustomString, open) {
  PEOrganizationCustomStringShareEverywhereAdditionalText = 1,
  PEOrganizationCustomStringListSeparatorPrimary = 2,
  PEOrganizationCustomStringTestResultsPreText = 3,
  PEOrganizationCustomStringTestResultsPostText = 4,
  PEOrganizationCustomStringDoctorsCommentHeader = 5,
  PEOrganizationCustomStringMedicationsHospitalAdmissionBannerText = 6,
  PEOrganizationCustomStringMedicationsHospitalAdmissionBannerProxyText = 7,
  PEOrganizationCustomStringTestResults = 8,
  PEOrganizationCustomStringShareEverywhere = 9,
  PEOrganizationCustomStringToDo = 10,
  PEOrganizationCustomStringMedications = 11,
  PEOrganizationCustomStringQuestionnaires = 12,
  PEOrganizationCustomStringEVisitName = 13,
  PEOrganizationCustomStringMessages = 14,
  PEOrganizationCustomStringECheckIn = 15,
  PEOrganizationCustomStringMyDocuments = 16,
  PEOrganizationCustomStringSwitchPatients = 17,
  PEOrganizationCustomStringSelectPatientToView = 18,
  PEOrganizationCustomStringSelectPatientToViewAccessibility = 19,
  PEOrganizationCustomStringEmergencyPhoneNumber = 20,
  PEOrganizationCustomStringCovidScreeningStatusLowRisk = 21,
  PEOrganizationCustomStringCovidScreeningStatusMediumRisk = 22,
  PEOrganizationCustomStringCovidScreeningStatusHighRisk = 23,
  PEOrganizationCustomStringCovidPastScreeningStatusLowRisk = 24,
  PEOrganizationCustomStringCovidPastScreeningStatusMediumRisk = 25,
  PEOrganizationCustomStringCovidPastScreeningStatusHighRisk = 26,
  PEOrganizationCustomStringCovidStateRegistryName = 27,
  PEOrganizationCustomStringShareMyRecord = 28,
  PEOrganizationCustomStringRequests = 29,
  PEOrganizationCustomStringCovidActivityTitle = 30,
  PEOrganizationCustomStringPreventiveCare = 31,
};


/// This has been deprecated in favor of a concrete implementation.  See PEOrganizationInfo
SWIFT_PROTOCOL("_TtP6PECore26PEOrganizationInfoProtocol_")
@protocol PEOrganizationInfoProtocol
@property (nonatomic, readonly, copy) NSString * _Nonnull organizationId;
@property (nonatomic, readonly) BOOL isExternal;
@property (nonatomic, readonly, copy) NSString * _Nonnull logoUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull organizationName;
@property (nonatomic, readonly) NSInteger linkStatus;
@property (nonatomic, readonly) enum ExternalOrganizationLinkType organizationLinkType;
@property (nonatomic, readonly, copy) NSDate * _Nullable lastRefreshDate;
- (UIImage * _Nullable)getPayerLogo SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPayerName SWIFT_WARN_UNUSED_RESULT;
@end


/// Information for an organization
SWIFT_CLASS("_TtC6PECore18PEOrganizationInfo")
@interface PEOrganizationInfo : NSObject <ImageDataSource, PEOrganizationInfoProtocol>
@property (nonatomic, copy) NSString * _Nonnull organizationId;
@property (nonatomic) BOOL isExternal;
@property (nonatomic, copy) NSString * _Nonnull logoUrl;
@property (nonatomic, copy) NSString * _Nonnull organizationName;
@property (nonatomic) NSInteger linkStatus;
@property (nonatomic) enum ExternalOrganizationLinkType organizationLinkType;
@property (nonatomic, copy) NSDate * _Nullable lastRefreshDate;
@property (nonatomic, copy) NSString * _Nonnull imageURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (UIImage * _Nullable)getPayerLogo SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPayerName SWIFT_WARN_UNUSED_RESULT;
@end


enum PESupportedFeature : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore22PEOrganizationProtocol_")
@protocol PEOrganizationProtocol
///
/// returns:
/// the name for the organization
- (NSString * _Nonnull)getOrganizationName SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A unique identifier for this org
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the MyChart Brand Name for the organization
- (NSString * _Nonnull)getMyChartBrandName SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the name of this organization’s website from the phone book
- (NSString * _Nonnull)getWebsiteName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     useDarkLogo: Determines if the dark variant of the default ogo should be used
///   </li>
///   <li>
///     completionHandler: Handler that contains the MyChart large logo for the mychart brand name, after it loads
///   </li>
/// </ul>
- (void)getBrandLogoWithUseDarkLogo:(BOOL)useDarkLogo completionHandler:(void (^ _Nonnull)(UIImage * _Nonnull))completionHandler;
///
/// returns:
/// the MyChart large header art for the homepage
- (void)getBrandHeaderFor:(id <ImageLoaderDelegate> _Nonnull)delegate;
///
/// returns:
/// the image path for website-based images
- (NSString * _Nullable)getBaseImageUrlPath SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The PE Theme for this org.
- (id <PEThemeProtocol> _Nonnull)getTheme SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     supportedFeature: The feature to check
///   </li>
/// </ul>
///
/// returns:
/// true if the feature is supported
- (BOOL)isFeatureAvailable:(enum PESupportedFeature)supportedFeature SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of allowed hosts for webviews inside the app.
- (NSArray<NSString *> * _Nonnull)getAllowedHosts SWIFT_WARN_UNUSED_RESULT;
/// A Custom String for an Org
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     customString: custom string to get
///   </li>
///   <li>
///     defaultValue: default value if key isn’t set
///   </li>
/// </ul>
///
/// returns:
/// the custom string
- (NSString * _Nullable)getCustomString:(enum PEOrganizationCustomString)customString :(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// A Custom String for an Org
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     customString: custom string to get
///   </li>
///   <li>
///     defaultValue: default value if key isn’t set
///   </li>
///   <li>
///     parameters: Map of key, value pairs of parameters
///   </li>
/// </ul>
///
/// returns:
/// the custom string
- (NSString * _Nullable)getCustomString:(enum PEOrganizationCustomString)customString :(NSString * _Nullable)defaultValue :(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of cookies set during the SAML login workflow, that need to be stored to persistent storage.
- (NSArray<NSString *> * _Nullable)getSamlLoginCookiesToPersist SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The domain of the SAML Login page. This is used to determine if cookies set during the SAML login workflow, need to be stored to persistent storage.
- (NSString * _Nullable)getSamlLoginDomainForCookiesToPersist SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Whether the web server we would connect to for MO activities has the acordex viewer license.
- (BOOL)getHasAcordexLicense SWIFT_WARN_UNUSED_RESULT;
@end



/// Helper interface to get a patient index from a IPEPatient.  Not all PEPatientProtocol’s need to implement
/// PEPatientIndexProtocol, so check the type of the PEPatientProtocol’s to see if it contains PEPatientIndexProtocol
SWIFT_PROTOCOL("_TtP6PECore22PEPatientIndexProtocol_")
@protocol PEPatientIndexProtocol
- (NSInteger)getPatientIndex SWIFT_WARN_UNUSED_RESULT;
@end

enum TokenType : NSInteger;

/// This protocol represents a person who is also a patient.
SWIFT_PROTOCOL("_TtP6PECore17PEPatientProtocol_")
@protocol PEPatientProtocol <PEPersonProtocol>
/// Gets the URL to use for web service requests that return data for the patient. May return null to indicate that the default URL for web service requests should be used.
///
/// returns:
/// True IFF this patient is currently in an ED; False otherwise.
- (BOOL)getIsInED SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not the patient is currently admitted to a hospital or other inpatient facility.
///
/// returns:
/// True IFF this patient is currently admitted to a hospital or other inpatient facility; False otherwise.
- (BOOL)getIsAdmitted SWIFT_WARN_UNUSED_RESULT;
/// Gets the list of alerts for the patient.
///
/// returns:
/// The list of alerts for this patient.
- (NSArray<id <PEAlertProtocol>> * _Nonnull)getAlerts SWIFT_WARN_UNUSED_RESULT;
/// Gets the patient’s MyChart Now context ID, if any.
///
/// returns:
/// This patient’s MyChart Now context ID, or null if the patient is not in a MyChart Now context.
- (NSString * _Nonnull)getNowContext SWIFT_WARN_UNUSED_RESULT;
/// Sets the patient’s MyChart Now context ID
/// \param nowContextId This patient’s MyChart Now context ID, or null if the patient is not in a MyChart Now context.
///
- (void)setNowContext:(NSString * _Nonnull)nowContextId;
@optional
/// Gets the current (authentication) token for the specified token type.
/// \param tokenType the type for which to get a token for
///
///
/// returns:
/// The current token for the specified token type.
- (NSString * _Nonnull)getToken:(enum TokenType)tokenType SWIFT_WARN_UNUSED_RESULT;
@end



/// Phonebook entry object
SWIFT_PROTOCOL("_TtP6PECore24PEPhonebookEntryProtocol_")
@protocol PEPhonebookEntryProtocol
/// Get the org’s id
///
/// returns:
/// The org id
- (NSString * _Nonnull)getOrgId SWIFT_WARN_UNUSED_RESULT;
/// Get the org’s dxo id
///
/// returns:
/// the org’s dxo id
- (NSString * _Nullable)getDxoId SWIFT_WARN_UNUSED_RESULT;
/// Get the login config file for the environment
///
/// returns:
/// The config file url
- (NSString * _Nullable)getLoginConfigFileUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the login config file for the environment
///
/// returns:
/// The config file url
- (BOOL)hasPreloginBuild SWIFT_WARN_UNUSED_RESULT;
/// Get the website branding url for the environment
///
/// returns:
/// The website branding base url
- (NSString * _Nullable)getWebsiteBrandingUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the default username text
///
/// returns:
/// The default username text
- (NSString * _Nullable)getUsernameText SWIFT_WARN_UNUSED_RESULT;
/// Get the default password text
///
/// returns:
/// The default password text
- (NSString * _Nullable)getPasswordText SWIFT_WARN_UNUSED_RESULT;
/// Get org login logo url
///
/// returns:
/// The org login logo url
- (NSString * _Nullable)getOrgLoginLogoUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the org login image if there is one
///
/// returns:
/// The org login image
- (UIImage * _Nullable)getOrgLoginImage SWIFT_WARN_UNUSED_RESULT;
/// Get the login background color
///
/// returns:
/// The login background color
- (UIColor * _Nonnull)getLoginBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Get the login status bar color
///
/// returns:
/// The login status bar color
- (UIColor * _Nonnull)getLoginStatusBarColor SWIFT_WARN_UNUSED_RESULT;
/// Get the login text color for the status bar
///
/// returns:
/// The login status bar color
- (UIColor * _Nonnull)getLoginBarTextColor SWIFT_WARN_UNUSED_RESULT;
/// Get the login button color for the status bar
///
/// returns:
/// The login status bar color
- (UIColor * _Nonnull)getLoginBarButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Get the  neutral button color
///
/// returns:
/// The neutral button color
- (UIColor * _Nonnull)getNeutralButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Get the neutral button text color
///
/// returns:
/// The neutral button text color
- (UIColor * _Nonnull)getNeutralButtonTextColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the URL for the interconnect instance
///
/// returns:
/// The org’s Interconnect URL
- (NSString * _Nonnull)getUrl SWIFT_WARN_UNUSED_RESULT;
/// Gets the name for the org
///
/// returns:
/// The org’s name
- (NSString * _Nonnull)getOrganizationName SWIFT_WARN_UNUSED_RESULT;
/// Gets the website name for the org
///
/// returns:
/// The org’s website name
- (NSString * _Nullable)getWebsiteName SWIFT_WARN_UNUSED_RESULT;
/// Does this org allow username/password login?
///
/// returns:
/// True if username/password login is allowed; false otherwise
- (BOOL)isUsernamePasswordLoginAllowed SWIFT_WARN_UNUSED_RESULT;
/// Check if saml login method should be secondary behind username and password
///
/// returns:
/// True if saml is secondary is disabled; false otherwise
- (BOOL)isSAMLLoginMethodSecondary SWIFT_WARN_UNUSED_RESULT;
/// Get the allowed hosts for prelogin
///
/// returns:
/// List of allowed hosts for prelogin
- (NSArray<NSString *> * _Nonnull)getPreloginAllowedHosts SWIFT_WARN_UNUSED_RESULT;
/// Save username of the server to storage
/// \param username username to save 
///
- (void)saveUsername:(NSString * _Nonnull)username;
/// Return any username saved with this server
///
/// returns:
/// saved username
- (NSString * _Nonnull)getSavedUsername SWIFT_WARN_UNUSED_RESULT;
/// Delete any username saved with this server
- (void)deleteSavedUsername;
/// Set the state of the remember user name setting for this server
/// \param value boolean to set 
///
- (void)setRememberUsernameSetting:(BOOL)value;
/// Return the setting of save user name for this server
///
/// returns:
/// value of remember user name setting
- (BOOL)getRememberUsernameSetting SWIFT_WARN_UNUSED_RESULT;
/// Delete the setting of save user name for this server
- (void)deleteRememberUserSetting;
/// Does this org have a valid passcode set up?
///
/// returns:
/// True if passcode is set up; false otherwise
- (BOOL)hasPasscodeSetUp SWIFT_WARN_UNUSED_RESULT;
/// Does this org have Touch ID set up?
///
/// returns:
/// True if Touch ID is set up; false otherwise
- (BOOL)hasTouchIdSetUp SWIFT_WARN_UNUSED_RESULT;
/// Does this org have Face ID set up?
///
/// returns:
/// True if Face ID is set up; false otherwise
- (BOOL)hasFaceIdSetUp SWIFT_WARN_UNUSED_RESULT;
/// Does this org have Optic ID set up?
///
/// returns:
/// True if Optic ID is set up; false otherwise
- (BOOL)hasOpticIdSetUp SWIFT_WARN_UNUSED_RESULT;
/// Remove secondary login
- (void)removeSecondaryLogin;
/// Remove biometric login
- (void)removeBiometricLogin;
/// Remove passcode login
- (void)removePasscodeLogin;
/// Get the MyChart brand name
///
/// returns:
/// The org’s MyChart brand name
- (NSString * _Nonnull)getMyChartBrandName SWIFT_WARN_UNUSED_RESULT;
/// Get the default language from the phonebook
/// @return
- (NSString * _Nonnull)getDefaultLanguage SWIFT_WARN_UNUSED_RESULT;
/// Get the formatter locale from the phonebook
/// @return
- (NSString * _Nonnull)getFormatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Get the allowed languages, as a comma-separated string, from the phonebook
/// @return
- (NSString * _Nonnull)getAllowedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Get the current PELocale
/// @return
- (PELocale * _Nonnull)getCurrentLocale SWIFT_WARN_UNUSED_RESULT;
/// Get the custom login url for prelogin-extensibility for epic-submitted
/// @return
- (NSString * _Nullable)getCustomLoginUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the support phone number
///
/// returns:
/// The org’s support phone number
- (NSString * _Nullable)getSupportPhoneNumber SWIFT_WARN_UNUSED_RESULT;
/// Get the support email address
///
/// returns:
/// The org’s support email address
- (NSString * _Nullable)getSupportEmailAddress SWIFT_WARN_UNUSED_RESULT;
/// Get the faq URL
///
/// returns:
/// The org’s FAQ URL
- (NSString * _Nullable)getFaqUrl SWIFT_WARN_UNUSED_RESULT;
/// Check if support options are configured
///
/// returns:
/// True if there is an FAQ URL or support phone number/email listed; false otherwise
- (BOOL)hasSupportOptions SWIFT_WARN_UNUSED_RESULT;
@optional
/// Sets up the locale settings from the given locale config info.
- (void)setupLocaleSettingsSourceWithDefaultLocale:(PELocale * _Nullable)defaultLocale allowedLocales:(NSArray<PELocale *> * _Nullable)allowedLocales;
@required
/// Set the theme with the PEThemeProtocol
- (void)setThemeWithTheme:(id <PEThemeProtocol> _Nonnull)theme;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEPreventiveCareComponentAPIProtocol_")
@protocol PEPreventiveCareComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to preventive care reminders
/// \param patientContext the patient context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForPreventiveCare:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
/// </ul>
///
/// returns:
/// A view controller displaying the preventive care reminders
- (MyChartWebViewController * _Nullable)getPreventiveCareViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEProblemListComponentAPIProtocol_")
@protocol PEProblemListComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the outpatient problem list activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForOutpatientProblemList:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the encounter-specific problem list activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForEncounterSpecificProblemList:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the encounter-specific problem list view controller
/// \param encounterContext The encounter context with which to launch the problem list
///
/// \param viewControllerTitle The title for the problem list view controller that should be displayed in the app bar
///
///
/// returns:
/// encounter-specific problem list view controller
- (UIViewController * _Nullable)getProblemListViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore41PEProblemListComponentBridgingAPIProtocol_")
@protocol PEProblemListComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (UIViewController * _Nullable)getHealthIssuesViewController SWIFT_WARN_UNUSED_RESULT;
@end


/// A view with a pulsing heart that mimics the loading indicator for mobile optimized views. Use this view as an optional alternative to the standard LoadingIndicator.
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore18PEPulsingHeartView")
@interface PEPulsingHeartView : UIView
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEQuestionnaireCompletionDelegate_")
@protocol PEQuestionnaireCompletionDelegate
/// Called when the user finishes a questionnaire
- (void)questionnaireCompleted;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEQuestionnairesComponentAPIProtocol_")
@protocol PEQuestionnairesComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to patient-level questionnaires
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForPatientQuestionnaires:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to admission-specific questionnaires
/// \param encounterContext the encounter context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForInpatientQuestionnaires:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to a general questionnaire
/// \param patientContext The patient context to check
///
/// \param contextType Questionnaire context enum value
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForGeneralQuestionnaire:(PEPatientContext * _Nonnull)patientContext contextType:(NSString * _Nonnull)contextType SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to a history questionnaire
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForHistoryQuestionnaire:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO questionnaires activity for a given patient context
/// \param patientContext The patient context to display
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getPatientQuestionnairesViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO questionnaires activity for an admission
/// \param encounterContext the encounter context for the admission
///
/// \param viewControllerTitle The title for the inpatient questionnaires  view controller that should be displayed in the app bar
///
///
/// returns:
/// the ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getInpatientQuestionnairesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets a View Controller that displays the MO questionnaires activity for a given patient context and
/// Epic HTTP link corresponding to a single questionnaire in a series
/// \param patientContext the patient context to display 
///
/// \param epicHttpLink link to launch once the MO activity is started 
///
///
/// returns:
/// a fragment to display, or null if it’s not a valid request
- (UIViewController * _Nullable)getStartQuestionnaireViewController:(PEPatientContext * _Nonnull)patientContext epicHttpLink:(NSString * _Nonnull)epicHttpLink SWIFT_WARN_UNUSED_RESULT;
/// \param questionnaireID The ID of the questionnaire to display
///
/// \param seriesAnswerID The ID of the questionnaire series answer to display
///
/// \param completionDelegate An optional delegate to handle questionnare completion
///
///
/// returns:
/// A view controller displaying the questionnaire
- (UIViewController * _Nullable)getQuestionnairesViewControllerForQuestionnaire:(NSString * _Nonnull)questionnaireID andSeries:(NSString * _Nonnull)seriesAnswerID patientContext:(PEPatientContext * _Nonnull)patientContext completionDelegate:(id <PEQuestionnaireCompletionDelegate> _Nullable)completionDelegate SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show questionnaires for an upcoming appointment
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a history questionnaire for an upcoming appointment
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getHistoryAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show questionnaires for an upcoming appointment on an old server
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getOldServerAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a questionnaire attached to a message
/// \param messageID the message ID
///
/// \param taskID the task ID for the questionnaire
///
/// \param patientContext the patient context for the message
///
/// \param organization the (external) organization for the message
///
- (UIViewController * _Nonnull)getQuestionnaireMessageTaskViewControllerWithMessageID:(NSString * _Nonnull)messageID taskID:(NSString * _Nonnull)taskID patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a history questionnaire attached to a message
/// \param messageID the message ID
///
/// \param taskID the task ID for the questionnaire
///
/// \param patientContext the patient context for the message
///
/// \param organization the (external) organization for the message
///
- (UIViewController * _Nonnull)getHistoryQuestionnaireMessageTaskViewControllerWithMessageID:(NSString * _Nonnull)messageID taskID:(NSString * _Nonnull)taskID patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaire web view to show a general questionnaire
/// \param patientContext the patient context for the questionnaire
///
/// \param parameters query parameters containing meta data to launch the general questionnaire
///
- (UIViewController * _Nonnull)getGeneralQuestionnaireViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaire web view to show a history questionnaire
/// \param patientContext the patient context for the questionnaire
///
/// \param parameters query parameters containing meta data to launch the history questionnaire
///
- (UIViewController * _Nonnull)getHistoryQuestionnaireViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
@end

/// The format of the request parameters sent with a web request. This enumeration corresponds to
/// processor objects that are of the <em>WebRequestProcessor</em> type.
typedef SWIFT_ENUM(NSInteger, PERequestFormat, open) {
/// the default request type for the service category
  PERequestFormatDefaultForCategory = 0,
/// an HTTP GET request. Parameters will be converted to a query string
  PERequestFormatGet = 1,
/// JSON formatted POST request body
  PERequestFormatJsonPost = 2,
/// JSON formatted POST request body
  PERequestFormatJsonGet = 3,
};


SWIFT_PROTOCOL("_TtP6PECore30PERequestsComponentAPIProtocol_")
@protocol PERequestsComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to patient requests
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForRequests:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Bedside MO requests activity for a given encounter context
/// \param patientContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getRequestsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets the title for the requests activity
/// \param organizationContext The organization context
///
///
/// returns:
/// the org override for the activity name or the default activity name if no override exists
- (NSString * _Nonnull)getRequestsActivityTitle:(PEOrganizationContext * _Nonnull)organizationContext SWIFT_WARN_UNUSED_RESULT;
@end

/// The format of a response body returned by a web request. This enumeration corresponds to
/// processor objects defined in the com.epic.patientengagement.core.webservice.processor package of
/// the core library
typedef SWIFT_ENUM(NSInteger, PEResponseFormat, open) {
/// Use the default response type for the service category
  PEResponseFormatDefault = 0,
/// JSON formatted response body
  PEResponseFormatJSON = 1,
/// JSON formatted response body wrapped with the Bedside WcfResponse object in Interconnect
  PEResponseFormatJSONWrappedBedside = 2,
/// Raw NSData object
  PEResponseFormatRawData = 3,
};


SWIFT_PROTOCOL("_TtP6PECore37PEShareEverywhereComponentAPIProtocol_")
@protocol PEShareEverywhereComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForShareEverywhere:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getShareEverywhereViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
@end

/// Enum representing supported features that depend on back-end server support.
/// KEEP THESE CONSISTENT WITH ANDROID.
typedef SWIFT_ENUM(NSInteger, PESupportedFeature, open) {
  PESupportedFeatureUnknown = 0,
  PESupportedFeatureShareEverywhere = 1,
  PESupportedFeatureMyC3NotificationSettings = 2,
  PESupportedFeatureHealthAdvisoriesSorted = 3,
  PESupportedFeatureToDo = 5,
  PESupportedFeatureMyC3Personalization = 6,
  PESupportedFeatureMarkHMTopicComplete = 7,
  PESupportedFeatureHappyTogether = 8,
  PESupportedFeatureHomePage = 9,
  PESupportedFeatureProblemList = 10,
  PESupportedFeatureProviderPhotos = 11,
  PESupportedFeatureMyC3TimeZoneCustomization = 12,
  PESupportedFeatureHappeningSoon = 13,
  PESupportedFeatureTestResults = 14,
  PESupportedFeatureMobileOptimizedWeb = 15,
  PESupportedFeatureClinicalInfo = 16,
  PESupportedFeatureTreatmentTeam = 17,
  PESupportedFeatureCareTeamScheduling = 18,
  PESupportedFeatureEncounterMedications = 19,
  PESupportedFeatureMODirectUrl = 20,
  PESupportedFeatureNPPMobileOptimizedWeb = 21,
  PESupportedFeatureEducation = 22,
  PESupportedFeatureTwoFactorOptIn = 23,
  PESupportedFeatureHMScheduling = 24,
  PESupportedFeaturePatientCreatedTasks = 25,
  PESupportedFeatureToDoProgress = 26,
  PESupportedFeatureHappyTogetherActions = 27,
  PESupportedFeatureMyC3TaskTypeNotifications = 28,
  PESupportedFeatureMyC3PushNotificationDeepLink = 29,
  PESupportedFeatureTreatmentTeam2019 = 30,
  PESupportedFeatureGenericMoJump = 31,
  PESupportedFeaturePanelAppointments = 32,
  PESupportedFeatureMOMessages = 33,
  PESupportedFeatureExploreMoreAuditing = 34,
  PESupportedFeatureMOShortcutPersonalization = 35,
  PESupportedFeatureCovidStatus = 36,
  PESupportedFeatureBrandingPathsLookup = 37,
  PESupportedFeatureMOToDoChangeDetails = 38,
  PESupportedFeatureToDoPersistentQuestionnaires = 39,
  PESupportedFeatureToDoPatientCreatedTaskSecurityPoints = 40,
  PESupportedFeatureUpcomingOrders = 41,
  PESupportedFeatureAppleWatchRedesign = 42,
  PESupportedFeatureHPRemoveFunIcons = 43,
  PESupportedFeatureHowToVideos = 44,
  PESupportedFeatureNPPBilling = 45,
  PESupportedFeatureMOPersonalInformation = 46,
  PESupportedFeatureLaunchPreventiveCareForHealthMaint = 47,
  PESupportedFeatureMOToDo = 48,
  PESupportedFeatureMOImmunizations = 49,
  PESupportedFeaturePreloginCovidStatus = 50,
  PESupportedFeatureCovidPDF = 51,
  PESupportedFeatureEMMIEducation = 52,
  PESupportedFeatureCovidRegistryQuery = 53,
  PESupportedFeatureAppleWatchSnowflake = 54,
  PESupportedFeatureCovidVaccineReconciliation = 55,
  PESupportedFeatureCovidStatusAlwaysOn = 56,
  PESupportedFeatureHPMenuAudit = 57,
  PESupportedFeatureMOEducation = 58,
  PESupportedFeatureCovidTestResults = 59,
  PESupportedFeatureCovidCredentialsHowToVideo = 60,
  PESupportedFeatureMOEducationIP = 61,
  PESupportedFeatureEncounterSummaryPDFDownload = 62,
  PESupportedFeatureH2GCovidVaccineSync = 63,
  PESupportedFeatureNewBdsdQNRSecurity = 64,
  PESupportedFeatureMOCommunicationPreferences = 65,
  PESupportedFeatureAccountDeactivation = 66,
  PESupportedFeatureFeatureUsageLogging = 67,
  PESupportedFeatureFeatureLibrary = 68,
  PESupportedFeatureMOAppointmentArrival = 69,
  PESupportedFeaturePatientEstimates = 70,
  PESupportedFeatureArrivalEventAudit = 71,
  PESupportedFeatureMOTestResults = 72,
  PESupportedFeatureH2GAffiliateBranding = 73,
  PESupportedFeatureMOProviderDetails = 74,
  PESupportedFeatureTwoFactorInfoForLogin = 75,
  PESupportedFeatureMOMyDocuments = 76,
  PESupportedFeatureSelfReportedClinicalUpdates = 77,
  PESupportedFeatureMOAppointmentTicketDecline = 78,
  PESupportedFeatureAppleWallet = 79,
  PESupportedFeatureCustomHealthKitDataTypes = 80,
  PESupportedFeatureBdsdMOTestResults = 81,
  PESupportedFeatureBasicLiveActivityAuditing = 82,
  PESupportedFeatureMOProviderFinder = 83,
  PESupportedFeaturePersonalNotes = 84,
  PESupportedFeatureCovidVaccinationAppleWalletCard = 85,
  PESupportedFeatureMOHealthSummary = 86,
  PESupportedFeatureNPPFDILink = 87,
  PESupportedFeatureMyChartCentral = 88,
  PESupportedFeatureMOTrackMyHealth = 89,
  PESupportedFeatureMOPaperlessSettings = 90,
  PESupportedFeatureMOPastVisitDetails = 91,
  PESupportedFeatureRemoteProxyAccess = 93,
  PESupportedFeatureExpandedHomePageShortcuts = 94,
  PESupportedFeaturePatientAccessUpdates = 96,
  PESupportedFeatureOIDCFederatedLogout = 97,
  PESupportedFeatureShouldUseOrgLogoCE = 98,
  PESupportedFeatureMOShareEverywhere = 99,
  PESupportedFeatureMyChartCentralOn = 100,
  PESupportedFeatureMyChartCentralDTC = 101,
  PESupportedFeatureDrivingDirectionsConsentEnabled = 102,
  PESupportedFeatureDeclutteredQNRNavigationButtons = 103,
  PESupportedFeatureMOPageArbitraryDownloadSupport = 104,
  PESupportedFeatureMyChartSearch = 105,
  PESupportedFeatureMOChangePassword = 106,
  PESupportedFeaturePersonalizeEnabledFriendsAndFamily = 108,
  PESupportedFeatureMyChartCentralV1 = 109,
  PESupportedFeatureEpicFunFacts = 110,
  PESupportedFeaturePreviewFeatures = 111,
};


SWIFT_PROTOCOL("_TtP6PECore12PETestResult_")
@protocol PETestResult
@property (nonatomic, readonly, copy) NSString * _Nullable objectID;
@property (nonatomic, readonly, copy) NSString * _Nullable dat;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@end


SWIFT_PROTOCOL("_TtP6PECore38PETestResultDetailComponentAPIProtocol_")
@protocol PETestResultDetailComponentAPIProtocol <PEComponentAPIProtocol>
/// \param testResult the base test result with which to launch the details view controller
///
///
/// returns:
/// A view controller which will show the test result details
- (UIViewController * _Nonnull)getTestResultDetailControllerWithTestResult:(id <PETestResult> _Nonnull)testResult overrideUri:(NSString * _Nonnull)overrideUri componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost patientContext:(PEPatientContext * _Nonnull)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext logEncounterCSN:(BOOL)logEncounterCSN SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// True if the current patient has access to view test result details
- (BOOL)hasAccessToTestResultDetails SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PETestResultsComponentAPIProtocol_")
@protocol PETestResultsComponentAPIProtocol <PEComponentAPIProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull testResultViewedNotification;)
+ (NSString * _Nonnull)testResultViewedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull organizationLinkUpdatedNotification;)
+ (NSString * _Nonnull)organizationLinkUpdatedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull communityRefreshBannerNeedUpdate;)
+ (NSString * _Nonnull)communityRefreshBannerNeedUpdate SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull communityNotificationRefreshBannerUpdateKey;)
+ (NSString * _Nonnull)communityNotificationRefreshBannerUpdateKey SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A QSP unique to MO test results, the existence of which indicates the details should be launched in MO
- (NSString * _Nonnull)getMOTestResultModeQSP SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A QSP in MO test results that specifies the (external) org ID
- (NSString * _Nonnull)getMOTestResultOrgIdQSP SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A QSP used in MO test results for the encrypted order ID
- (NSString * _Nonnull)getMOTestResultEOrderIDQSP SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForOutpatientTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The encounter context to launch into
///
///
/// returns:
/// if the encounter context has access to MO test results in Bedside mobile
- (enum PEComponentAccessResult)hasAccessForMOInpatientTestResults:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to MO test results
- (enum PEComponentAccessResult)hasAccessForMOTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param deepLinkUrl deepLinkUrl for the activity
///
///
/// returns:
/// whether the given deepLinkUrl should show the details in a local MO view, or a legacy native view
- (BOOL)shouldUseMOTestResultDetails:(PEPatientContext * _Nonnull)patientContext deepLinkUrl:(NSString * _Nullable)deepLinkUrl SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The encounter context to launch into
///
/// \param viewControllerTitle The title for the test results view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller for this component in Bedside mobile
- (UIViewController * _Nullable)getInpatientTestResultsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param viewControllerTitle The title for the test results view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTestResultsViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param viewControllerTitle The title for the test results view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTestResultDetailsViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle params:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore15PEThemeProtocol_")
@protocol PEThemeProtocol
/// Gets a UIColor value for the specified PEBrandedColor.
/// \param color the PEBrandedColor to get a color value for
///
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not the To Do activity should use animated backgrounds and To Do-specific colors.
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not test results should use title casing for display names.
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not onboarding should be displayed for the home page.
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the card style
///   </li>
///   <li>
///     @return The card style
///   </li>
/// </ul>
- (id <CardStyleProtocol> _Nonnull)getCardStyle SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the interactive card style
///   </li>
///   <li>
///     @return The card style
///   </li>
/// </ul>
- (id <CardStyleProtocol> _Nonnull)getInteractiveCardStyle SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the text style for a font ramp
///   </li>
/// </ul>
- (id <TextStyleProtocol> _Nonnull)getTextStyleWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the image from the local, no network calls
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the image for the key, can use network calls
///   </li>
/// </ul>
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
@end


SWIFT_PROTOCOL("_TtP6PECore26PEToDoComponentAPIProtocol_")
@protocol PEToDoComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForToDo:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Changes
- (enum PEComponentAccessResult)hasAccessForToDoChanges:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Changes
- (enum PEComponentAccessResult)hasAccessForToDoChangeDetails:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do link tasks
- (enum PEComponentAccessResult)hasAccessForToDoLinkTask:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do manage reminders
- (enum PEComponentAccessResult)hasAccessForToDoManageReminders:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Progress
- (enum PEComponentAccessResult)hasAccessForToDoProgress:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The view controller for the To Do Changes activity
- (UIViewController * _Nullable)getToDoChangesViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param ltkID The task ID of the task to be opened after To Do is launched.
///
/// \param ltkInst The task instant of the task to be opened afater To Do is launched
///
/// \param showSuggestedTasks True if the suggested tasks section in To Do should be automatically expanded, false otherwise
///
///
/// returns:
/// The main view controller for the To Do component
- (UIViewController * _Nullable)getToDoViewController:(PEPatientContext * _Nonnull)patientContext ltkID:(NSString * _Nonnull)ltkID ltkInst:(NSString * _Nonnull)ltkInst showSuggestedTasks:(BOOL)showSuggestedTasks SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To do component, launched into the overdue tasks view
- (UIViewController * _Nullable)getToDoOverdueViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This function returns the web view controller for showing the change details web page for a chosen To Do change.
/// \param patientContext The patient context 
///
/// \param changeId The ALT id of the change 
///
/// \param changeDAT The DAT of the ALT record of the change 
///
/// \param isEncrypted Boolean indicating whether the ALT ID and DAT are already encrypted 
///
- (UIViewController * _Nullable)getToDoChangeDetailsWebViewController:(PEPatientContext * _Nonnull)patientContext changeId:(NSString * _Nonnull)changeId changeDAT:(NSString * _Nonnull)changeDAT isEncrypted:(BOOL)isEncrypted SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To do component, launched into the manage reminders view
- (UIViewController * _Nullable)getToDoManageRemindersViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To Do component, launched into the progress view
- (UIViewController * _Nullable)getToDoProgressViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This function marks the given change as viewed
/// \param patientContext The patient context 
///
/// \param changeId The ALT id of the change 
///
/// \param changeDAT The DAT of the ALT record of the change 
///
/// \param isEncrypted Boolean indicating whether the ALT ID and DAT are already encrypted 
///
- (void)markChangeAsViewed:(PEPatientContext * _Nonnull)patientContext changeId:(NSString * _Nonnull)changeId changeDAT:(NSString * _Nonnull)changeDAT isEncrypted:(BOOL)isEncrypted;
/// This function returns the web view controller for the detail of a Link Task.
/// \param patientContext The patient context 
///
/// \param ltkId The LTK ID of the link task instance 
///
/// \param ltkInstant The instant of the link task instance 
///
/// \param delegate  The delegate to handle completion of the link task 
///
- (UIViewController * _Nullable)getLinkTaskDetailWebViewController:(PEPatientContext * _Nonnull)patientContext ltkId:(NSString * _Nonnull)ltkId ltkInstant:(NSString * _Nonnull)ltkInstant delegate:(id <PELinkTaskCompletionDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEToDoComponentBridgingAPIProtocol_")
@protocol PEToDoComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (NSString * _Nonnull)getQuestionnaireIDFromTaskWithID:(NSString * _Nonnull)taskID atInstant:(NSString * _Nonnull)taskInstant andQuestionnaireIDs:(NSArray<NSString *> * _Nonnull)questionnaireIDs withSeriesID:(NSString * _Nonnull)seriesID SWIFT_WARN_UNUSED_RESULT;
/// \param topicID The ID of the HM topic to display
///
/// \param name The name of the HM topic to display
///
/// \param statusText The status text to display for the HM topic
///
/// \param detailText The detail text to display for the HM topic
///
/// \param completionDelegate An optional completion delegate to handle the completion of the health advisory
///
///
/// returns:
/// A view controller for the HM topic completion workflow.
- (UIViewController * _Nullable)getMarkHealthAdvisoryCompleteViewControllerForTopic:(NSString * _Nonnull)topicID named:(NSString * _Nonnull)name withStatusText:(NSString * _Nonnull)statusText andDetailText:(NSString * _Nonnull)detailText completionDelegate:(id <PEHealthAdvisoryCompletionDelegate> _Nullable)completionDelegate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore35PETrackMyHealthComponentAPIProtocol_")
@protocol PETrackMyHealthComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTrackMyHealthViewController SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PETutorialHostProtocol;
@class PETutorialUIModel;

SWIFT_CLASS("_TtC6PECore20PETutorialController")
@interface PETutorialController : NSObject
/// Initializes the PETutorialController. This method must be called before controller usage
/// \param tutorialHost an object conforming to the PETutorialHostProtocol interface
///
+ (void)initializeWithTutorialHost:(id <PETutorialHostProtocol> _Nullable)tutorialHost;
/// Load a PETutorialUIModel from a JSON resource
/// \param bundle Name of the bundle to load the resource from
///
/// \param fileName Name of the json file
///
///
/// returns:
/// a model containing tutorial data
+ (PETutorialUIModel * _Nullable)loadTutorialFromJsonWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName patientContext:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Load a PETutorialUIModel from a JSON resource
/// \param bundle Name of the bundle to load the resource from
///
/// \param fileName Name of the json file
///
/// \param replacementMap a list of tokens and their replacements to make in the tutorial model
///
///
/// returns:
/// a model containing tutorial data
+ (PETutorialUIModel * _Nullable)loadTutorialFromJsonWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName patientContext:(PEPatientContext * _Nullable)patientContext replacementMap:(NSDictionary * _Nullable)replacementMap SWIFT_WARN_UNUSED_RESULT;
/// Show the most recently registered tutorial
+ (void)showCurrentTutorial;
/// Registers a tutorial, which will be automatically shown if it has not been finished and the application has automatic display configured
/// \param tutorialUIModel a tutorial model
///
+ (void)registerTutorialWithTutorialUIModel:(PETutorialUIModel * _Nullable)tutorialUIModel;
/// Unregisters a tutorial, which will hide it if it’s showing and remove the tutorial registration
/// \param tutorialUIModel a tutorial model
///
+ (void)unregisterTutorialWithTutorialUIModel:(PETutorialUIModel * _Nullable)tutorialUIModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Controls interaction with the PETutorialController and its hosting application
SWIFT_PROTOCOL("_TtP6PECore22PETutorialHostProtocol_")
@protocol PETutorialHostProtocol
/// Notifies the hosting application when a tutorial is available
/// \param available true if a tutorial is available
///
- (void)tutorialIsAvailable:(BOOL)available;
///
/// returns:
/// if tutorials show be shown automatically when registered
- (BOOL)showTutorialsAutomatically SWIFT_WARN_UNUSED_RESULT;
/// Notifies the hosting application that a tutorial has been completed
/// \param tutorialId the ID of the tutorial
///
- (void)didCompleteTutorial:(NSString * _Nullable)tutorialId;
/// \param tutorialId the ID of the tutorial
///
///
/// returns:
/// true if a tutorial has been completed already
- (BOOL)isTutorialCompleted:(NSString * _Nullable)tutorialId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a NSDictionary containing string replacements that should always be made
- (NSDictionary * _Nullable)globalReplacementMap SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore17PETutorialUIModel")
@interface PETutorialUIModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC6PECore24PETutorialViewController")
@interface PETutorialViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEUpcomingOrdersComponentAPIProtocol_")
@protocol PEUpcomingOrdersComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines if the user has access to upcoming orders
/// \param patientContext the current patient context
///
///
/// returns:
/// PEComponentAccessResult.AccessAllowed if the user has access, otherwise various reasons why they cannot
- (enum PEComponentAccessResult)hasAccessForUpcomingOrders:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller for the Upcoming Orders activity
/// \param patientContext the current patient context
///
/// \param ordId the current upcoming order identifier
///
- (UIViewController * _Nonnull)getUpcomingOrdersViewController:(PEPatientContext * _Nonnull)patientContext :(NSString * _Nullable)ordId SWIFT_WARN_UNUSED_RESULT;
@end


/// Stores and provides the default URLs used by the web service engine
SWIFT_CLASS("_TtC6PECore13PEUrlProvider")
@interface PEUrlProvider : NSObject
/// private initializer, only instance <em>instance</em> is available
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <ul>
///   <li>
///     return: the single instance of the <em>PEUrlProvider</em> class
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PEUrlProvider * _Nonnull instance;)
+ (PEUrlProvider * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Sets the default Url for a given <em>UrlType</em>
/// \param type the type of Url destination  to store
///
/// \param url a string containing the url
///
- (void)setUrlWithType:(enum UrlType)type url:(NSString * _Nonnull)url;
/// \param type the Url destination type
///
///
/// returns:
/// a string representing the Url
- (NSString * _Nullable)getUrlStringWithType:(enum UrlType)type SWIFT_WARN_UNUSED_RESULT;
@end



/// This protocol represents a person who is also the current MyChart user.
SWIFT_PROTOCOL("_TtP6PECore14PEUserProtocol_")
@protocol PEUserProtocol <PEPersonProtocol>
/// Get the corresponding patient for this user. The patient will be nil if the user is a non-patient proxy (NPP).
///
/// returns:
/// The corresponding patient for this user, if any.
- (id <PEPatientProtocol> _Nullable)getPatient SWIFT_WARN_UNUSED_RESULT;
/// Gets the current (authentication) token for the specified token type.
/// \param tokenType the type for which to get a token for
///
///
/// returns:
/// The current token for the specified token type.
- (NSString * _Nonnull)getToken:(enum TokenType)tokenType SWIFT_WARN_UNUSED_RESULT;
/// Sets a new (authentication) token with the specified token type.
/// \param token the token to be set
///
/// \param forType the type for which to set the token with
///
- (void)setToken:(NSString * _Nonnull)token forType:(enum TokenType)forType;
/// Gets the current locale string for webservices.
///
/// returns:
/// The current locale string for webservices.
- (NSString * _Nonnull)getCommandLocaleString SWIFT_WARN_UNUSED_RESULT;
/// Gets the current device ID.
///
/// returns:
/// The current device ID.
- (NSString * _Nonnull)getDeviceID SWIFT_WARN_UNUSED_RESULT;
/// Reports whether the user’s session has timed out
///
/// returns:
/// if the user’s session is timed out
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
/// Gets the user’s login username
///
/// returns:
/// string username
- (NSString * _Nonnull)getUsername SWIFT_WARN_UNUSED_RESULT;
/// If the current user can only access proxies and not self-access
@property (nonatomic, readonly) BOOL isRestrictedToProxySubjectAccess;
@end


SWIFT_PROTOCOL("_TtP6PECore30PEUtilMiscComponentAPIProtocol_")
@protocol PEUtilMiscComponentAPIProtocol <PEComponentAPIProtocol>
- (id _Nullable)getSettingWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEVisitsComponentAPIProtocol_")
@protocol PEVisitsComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns the eorgid QSP used when deep linking for an external org
///
/// returns:
/// A H2G QSP unique to MO past visit details, which will let us know if this is an external visit
- (NSString * _Nonnull)getMOPastVisitDetailsOrgIdQSP SWIFT_WARN_UNUSED_RESULT;
/// Returns the pageMode QSP when we should launch the MO Past Visit Details activity
///
/// returns:
/// A QSP unique to MO past visit details, the existence of which indicates the details should be launched in MO
- (NSString * _Nonnull)getMOPastVisitDetailsModeQSP SWIFT_WARN_UNUSED_RESULT;
/// Returns the isExternal QSP when the visit is an external H2G visit
///
/// returns:
/// A QSP unique to MO Past visit details letting us know the visit is H2G
- (NSString * _Nonnull)getMOPastVisitDetailsIsExternalQSP SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to the After Visit Summary activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForAfterVisitSummary:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the deep link provided is a H2G/external link
/// \param deepLinkUrl The deep link URL to check
///
///
/// returns:
/// true if the visit is external, false if local or deep link is nil
- (BOOL)isExternalVisitWithDeepLinkUrl:(NSString * _Nullable)deepLinkUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user should use the MO Past Visit Details activity based on the deep link QSPs and if they have access
/// \param patientContext The patient context to check
///
/// \param deepLinkUrl The deep link URL invoked
///
/// \param isExternal Whether or not the visit is external
///
///
/// returns:
/// true if the user should access the MO Past Visit Details activity
- (BOOL)shouldUseMOPastVisitDetails:(PEPatientContext * _Nonnull)patientContext deepLinkUrl:(NSString * _Nullable)deepLinkUrl isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Returns the view controller for the MO Past Visit Details activity
/// \param patientContext The patient context to check
///
/// \param isNotes whether or not this is specifically for notes
///
/// \param viewControllerTitle The title of the view controller
///
/// \param params key/value map of query string parameters
///
/// \param orgInfo External org info if external visit
///
///
/// returns:
/// the MO past visit details activity view controller
- (UIViewController * _Nonnull)getMOPastVisitDetailsController:(PEPatientContext * _Nonnull)patientContext isNotes:(BOOL)isNotes viewControllerTitle:(NSString * _Nullable)viewControllerTitle params:(NSDictionary<NSString *, NSString *> * _Nonnull)params orgInfo:(id <PEOrganizationInfoProtocol> _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to the Bedside Notes from Care Team (Visit Notes) activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForBedsideVisitNotes:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Bedside After Visit Summary activity for a given encounter context
/// \param patientContext The encounter context to display
///
/// \param showHeader Whether a header should be shown in the MO activity
///
/// \param viewControllerTitle The name to display at the top of the activity
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getBedsideAfterVisitSummaryViewController:(PEEncounterContext * _Nonnull)encounterContext showHeader:(BOOL)showHeader viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the AVS PDF
/// \param patientContext The patient context to display
///
/// \param dcsID Document ID to load
///
/// \param showBackButton Will show a back button within the view controller if true
///
/// \param setTitle Whether the view controller title is set
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getAvsPdfViewController:(PEPatientContext * _Nonnull)patientContext dcsID:(NSString * _Nullable)dcsID setTitle:(BOOL)setTitle showBackButton:(BOOL)showBackButton orgID:(NSString * _Nullable)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that opens the Bedside Notes from Care Team (Visit Notes) activity
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getBedsideVisitNotesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for the Workflow Step component
SWIFT_PROTOCOL("_TtP6PECore34PEWorkflowStepComponentAPIProtocol_")
@protocol PEWorkflowStepComponentAPIProtocol <PEComponentAPIProtocol>
/// Finds out whether the user has access to the workflow step feature for the given encounter.
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForWorkflowStep:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the workflow step widget.
/// \param encounterContext The encounter
///
/// \param componentHost Optionally, the host for this component
///
///
/// returns:
/// the view controller for the widgette
- (UIViewController * _Nullable)getWorkflowStepWidget:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayout;

/// Class do do a horizontal peeking collection (view pager)
SWIFT_CLASS("_TtC6PECore20PeekUICollectionView")
@interface PeekUICollectionView : UICollectionView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)reloadData;
- (void)layoutSubviews;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
@end

@class NSIndexPath;
@class UICollectionViewCell;

@interface PeekUICollectionView (SWIFT_EXTENSION(PECore)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface PeekUICollectionView (SWIFT_EXTENSION(PECore)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


/// A view for displaying patient/npp photos
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore15PersonImageView")
@interface PersonImageView : UIImageView
/// The border width around the image
@property (nonatomic) IBInspectable CGFloat borderWidth;
/// image views typically return the size of their un-resized image. This returns the actual size of the scaled image
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, PreLoginOnboardingStep, open) {
  PreLoginOnboardingStepWelcome = 0,
  PreLoginOnboardingStepNotifications = 1,
  PreLoginOnboardingStepLocation = 2,
  PreLoginOnboardingStepOrgSelect = 3,
};


/// Determines a locale to be used before logging in to a particular organization.
/// Pulls from device locales only
SWIFT_CLASS("_TtC6PECore21PreloginLocaleManager")
@interface PreloginLocaleManager : NSObject
/// The locale to be used in the prelogin context.
/// Calculated from user preferred languages and available translations on the device.
+ (PELocale * _Nonnull)getPreloginLocale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore9PrintUtil")
@interface PrintUtil : NSObject
/// Prints the passed in webview with the jobName
+ (void)printWebViewWithWebView:(WKWebView * _Nonnull)webView jobName:(NSString * _Nonnull)jobName;
/// displays a short error toast when there’s an issue printing
+ (void)displayPrintErrorToast;
+ (BOOL)userHasAccessToPrintingWithUser:(id <PEUserProtocol> _Nonnull)user SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<UIAlertAction *> * _Nonnull)getNavBarPrintMenuActionsWithWebView:(WKWebView * _Nonnull)webView printJobName:(NSString * _Nonnull)printJobName SWIFT_WARN_UNUSED_RESULT;
/// Determines if the user has not yet seen printing onboarding on this device.
+ (BOOL)shouldShowPrintOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Marks the device as having seen printing onboarding
+ (void)setPrintOnboardingSeen;
/// Checks if printing onboarding should show, and displays onboarding if needed
+ (void)presentPrintOnboardingIfNeededWithPresentingVC:(UIViewController * _Nonnull)presentingVC userContext:(PEUserContext * _Nonnull)userContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore15ProgressArcView")
@interface ProgressArcView : UIView
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified baseColor;
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified progressColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6PECore11ProgressBar")
@interface ProgressBar : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Source from which a provider’s photo can be retrieved and cached. ImageLoader will automatically handle caching and blob server loading for objects of this type.
SWIFT_PROTOCOL("_TtP6PECore23ProviderImageDataSource_")
@protocol ProviderImageDataSource <CacheableImageDataSource>
/// This provider’s record ID
@property (nonatomic, readonly, copy) NSString * _Nonnull providerId;
/// Is the SER ID encrypted?
@property (nonatomic, readonly) BOOL isProviderIdEncrypted;
/// If true, the provider’s photo should be loaded from the blob server
@property (nonatomic, readonly) BOOL hasImageOnBlob;
/// Organization information to use when loading a provider’s blob photo
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@end


/// Circular image of a provider’s photo, or first initial if the photo cannot be loaded
SWIFT_CLASS("_TtC6PECore17ProviderImageView")
@interface ProviderImageView : UIImageView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@interface ProviderImageView (SWIFT_EXTENSION(PECore)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end


SWIFT_CLASS("_TtC6PECore6Region")
@interface Region : NSObject
@property (nonatomic, copy) NSString * _Nonnull code;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Unspecified;)
+ (Region * _Nonnull)Unspecified SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Australia;)
+ (Region * _Nonnull)Australia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Belgium;)
+ (Region * _Nonnull)Belgium SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Brazil;)
+ (Region * _Nonnull)Brazil SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Canada;)
+ (Region * _Nonnull)Canada SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull China;)
+ (Region * _Nonnull)China SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Denmark;)
+ (Region * _Nonnull)Denmark SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Finland;)
+ (Region * _Nonnull)Finland SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull France;)
+ (Region * _Nonnull)France SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Germany;)
+ (Region * _Nonnull)Germany SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Ireland;)
+ (Region * _Nonnull)Ireland SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Lebanon;)
+ (Region * _Nonnull)Lebanon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Netherlands;)
+ (Region * _Nonnull)Netherlands SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Norway;)
+ (Region * _Nonnull)Norway SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull SaudiArabia;)
+ (Region * _Nonnull)SaudiArabia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Singapore;)
+ (Region * _Nonnull)Singapore SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Sweden;)
+ (Region * _Nonnull)Sweden SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Switzerland;)
+ (Region * _Nonnull)Switzerland SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull UnitedArabEmirates;)
+ (Region * _Nonnull)UnitedArabEmirates SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull UnitedKingdom;)
+ (Region * _Nonnull)UnitedKingdom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull UnitedStates;)
+ (Region * _Nonnull)UnitedStates SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Russia;)
+ (Region * _Nonnull)Russia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Epic;)
+ (Region * _Nonnull)Epic SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing an issue that can be reported back to Epic.
SWIFT_CLASS("_TtC6PECore15ReportableIssue")
@interface ReportableIssue : NSObject
/// Base initializer that sets the app version, OS version, app ID, and whether or not this build of the app is “internal”.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol representing the information stored for a single RestrictedAccessToken, besides the actual token value
SWIFT_PROTOCOL("_TtP6PECore29RestrictedAccessTokenProtocol_")
@protocol RestrictedAccessTokenProtocol
@property (nonatomic, readonly) enum RestrictedAccessTokenType tokenType;
@property (nonatomic, readonly, copy) NSString * _Nullable username;
@property (nonatomic, readonly, copy) NSString * _Nullable orgId;
@property (nonatomic, readonly) BOOL hasValues;
@end

/// List of RestrictedAccessTokenTypes. Matches WPR 1910
typedef SWIFT_ENUM(NSInteger, RestrictedAccessTokenType, open) {
  RestrictedAccessTokenTypeAppleWatchHealthFeed = 1,
  RestrictedAccessTokenTypePreloginCovidStatus = 2,
};


SWIFT_CLASS("_TtC6PECore6Script")
@interface Script : NSObject
@property (nonatomic, copy) NSString * _Nonnull code;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SearchableProtocol;

SWIFT_CLASS("_TtC6PECore19SearchConfiguration")
@interface SearchConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addSearchableObjectWithSearchableObject:(id <SearchableProtocol> _Nonnull)searchableObject;
@end


SWIFT_CLASS("_TtC6PECore12SearchResult")
@interface SearchResult : NSObject
- (id <SearchableProtocol> _Nonnull)getResultObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore18SearchableProtocol_")
@protocol SearchableProtocol
- (NSArray<NSString *> * _Nonnull)getSearchTerms SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore17SectionHeaderView")
@interface SectionHeaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A class defining Feature Name constants of various category values from ECL 32010: MyChart Features
/// The comment for each category value indicates the category value ID, category value title, and occasionally additional information.
SWIFT_CLASS("_TtC6PECore14SecurityPoints")
@interface SecurityPoints : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 8 | Alerts
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ALERTS;)
+ (NSString * _Nonnull)ALERTS SWIFT_WARN_UNUSED_RESULT;
/// 9 | Allergies - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ALLERGIES;)
+ (NSString * _Nonnull)ALLERGIES SWIFT_WARN_UNUSED_RESULT;
/// 37 | HealthIssues - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_ISSUES;)
+ (NSString * _Nonnull)HEALTH_ISSUES SWIFT_WARN_UNUSED_RESULT;
/// 39 | HealthReminders
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_REMINDERS;)
+ (NSString * _Nonnull)HEALTH_REMINDERS SWIFT_WARN_UNUSED_RESULT;
/// 41 | HealthReminder Request Appointment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_REMINDER_SCHEDULE;)
+ (NSString * _Nonnull)HEALTH_REMINDER_SCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 42 | HealthSnapshot - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_SNAPSHOT;)
+ (NSString * _Nonnull)HEALTH_SNAPSHOT SWIFT_WARN_UNUSED_RESULT;
/// 43 | Immunizations - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMMUNIZATIONS;)
+ (NSString * _Nonnull)IMMUNIZATIONS SWIFT_WARN_UNUSED_RESULT;
/// 52 | Medications - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDS_REVIEW;)
+ (NSString * _Nonnull)MEDS_REVIEW SWIFT_WARN_UNUSED_RESULT;
/// 54 | Medication Refill
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDS_REFILL;)
+ (NSString * _Nonnull)MEDS_REFILL SWIFT_WARN_UNUSED_RESULT;
/// 122 | Medication Direct Refill
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDS_DIRECT_REFILL;)
+ (NSString * _Nonnull)MEDS_DIRECT_REFILL SWIFT_WARN_UNUSED_RESULT;
/// 177 | View Physician Notes - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_SHARING;)
+ (NSString * _Nonnull)NOTE_SHARING SWIFT_WARN_UNUSED_RESULT;
/// 178 | Goals Review
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GOALS_REVIEW;)
+ (NSString * _Nonnull)GOALS_REVIEW SWIFT_WARN_UNUSED_RESULT;
/// 182 | Provider Widget List - Proxy Only | This security point controls the web only provider widget, which is not on mobile. On mobile, this controls the Care Team activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CARE_TEAM;)
+ (NSString * _Nonnull)CARE_TEAM SWIFT_WARN_UNUSED_RESULT;
/// 211 | Health Maintenance - Mark As Complete
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HM_MARK_COMPLETE;)
+ (NSString * _Nonnull)HM_MARK_COMPLETE SWIFT_WARN_UNUSED_RESULT;
/// 269 | Health Goals - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_GOALS_PROXY;)
+ (NSString * _Nonnull)HEALTH_GOALS_PROXY SWIFT_WARN_UNUSED_RESULT;
/// 10072 | F1 | Health Summary
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_SUMMARY;)
+ (NSString * _Nonnull)HEALTH_SUMMARY SWIFT_WARN_UNUSED_RESULT;
/// 10075 | F4 | Health Goals
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_GOALS;)
+ (NSString * _Nonnull)HEALTH_GOALS SWIFT_WARN_UNUSED_RESULT;
/// 10123 | F49 | Organ Donor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORGAN_DONOR;)
+ (NSString * _Nonnull)ORGAN_DONOR SWIFT_WARN_UNUSED_RESULT;
/// 69 | Recent Appointments
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RECENT_APPOINTMENTS;)
+ (NSString * _Nonnull)RECENT_APPOINTMENTS SWIFT_WARN_UNUSED_RESULT;
/// 70 | Recent Visits List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RECENT_VISITS;)
+ (NSString * _Nonnull)RECENT_VISITS SWIFT_WARN_UNUSED_RESULT;
/// 71 | Recent Visits Summary | refers to clinical details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VISIT_SUMMARY;)
+ (NSString * _Nonnull)VISIT_SUMMARY SWIFT_WARN_UNUSED_RESULT;
/// 81 | Hospital Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAST_ADMISSIONS;)
+ (NSString * _Nonnull)PAST_ADMISSIONS SWIFT_WARN_UNUSED_RESULT;
/// 10090 | F16 | MO Past Visit Details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_PAST_VISIT_DETAILS;)
+ (NSString * _Nonnull)MO_PAST_VISIT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 11 | Appointment Cancel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_CANCEL;)
+ (NSString * _Nonnull)APPT_CANCEL SWIFT_WARN_UNUSED_RESULT;
/// 12 | Appointment Confirm
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_CONFIRM;)
+ (NSString * _Nonnull)APPT_CONFIRM SWIFT_WARN_UNUSED_RESULT;
/// 13 | Appointment Details | refers to non-clinical details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_DETAILS;)
+ (NSString * _Nonnull)APPT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 14 | Upcoming Appt List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_REVIEW;)
+ (NSString * _Nonnull)APPT_REVIEW SWIFT_WARN_UNUSED_RESULT;
/// 25 | Driving Directions
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DRIVING_DIRECTIONS;)
+ (NSString * _Nonnull)DRIVING_DIRECTIONS SWIFT_WARN_UNUSED_RESULT;
/// 106 | Appointment Direct Cancel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_DIRECT_CANCEL;)
+ (NSString * _Nonnull)APPT_DIRECT_CANCEL SWIFT_WARN_UNUSED_RESULT;
/// 164 | eCheck-In
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_ECHECKIN;)
+ (NSString * _Nonnull)APPT_ECHECKIN SWIFT_WARN_UNUSED_RESULT;
/// 189 | Allow Rescheduling
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_RESCHEDULING;)
+ (NSString * _Nonnull)APPT_RESCHEDULING SWIFT_WARN_UNUSED_RESULT;
/// 197 | Upcoming Preadmission
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PREADMISSION_DETAILS;)
+ (NSString * _Nonnull)PREADMISSION_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 161 | Auto Wait List Alerts | Appointment Offer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AUTO_WAITLIST;)
+ (NSString * _Nonnull)AUTO_WAITLIST SWIFT_WARN_UNUSED_RESULT;
/// 175 | Update Wait List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UPDATE_WAITLIST;)
+ (NSString * _Nonnull)UPDATE_WAITLIST SWIFT_WARN_UNUSED_RESULT;
/// 15 | Appointment Schedule Request
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_SCHEDULE_REQUEST;)
+ (NSString * _Nonnull)APPT_SCHEDULE_REQUEST SWIFT_WARN_UNUSED_RESULT;
/// 16 | Make Appointment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_SCHEDULE;)
+ (NSString * _Nonnull)APPT_SCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 17 | Make Appointment Using Ticket
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_TICKET_SCHEDULE;)
+ (NSString * _Nonnull)APPT_TICKET_SCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 67 | Provider Details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PROVIDER_DETAILS;)
+ (NSString * _Nonnull)PROVIDER_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 47 | Labs - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LABS;)
+ (NSString * _Nonnull)LABS SWIFT_WARN_UNUSED_RESULT;
/// 48 | Lab Results - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LAB_DETAILS;)
+ (NSString * _Nonnull)LAB_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 96005 | DENY Bedside - Myhealth
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_TEST_RESULTS;)
+ (NSString * _Nonnull)DENY_BEDSIDE_TEST_RESULTS SWIFT_WARN_UNUSED_RESULT;
/// 24 | Customer Service Request
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CUSTOMER_SERVICE;)
+ (NSString * _Nonnull)CUSTOMER_SERVICE SWIFT_WARN_UNUSED_RESULT;
/// 45 | Messaging (fka Inbox)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGES_INBOX;)
+ (NSString * _Nonnull)MESSAGES_INBOX SWIFT_WARN_UNUSED_RESULT;
/// 51 | Medical Advice Request
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDICAL_ADVICE;)
+ (NSString * _Nonnull)MEDICAL_ADVICE SWIFT_WARN_UNUSED_RESULT;
/// 55 | Outbox
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGES_OUTBOX;)
+ (NSString * _Nonnull)MESSAGES_OUTBOX SWIFT_WARN_UNUSED_RESULT;
/// 103 | Appointment Through Message | Scheduling Task
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGE_TASK_SCHEDULE_APPT;)
+ (NSString * _Nonnull)MESSAGE_TASK_SCHEDULE_APPT SWIFT_WARN_UNUSED_RESULT;
/// 113 | File Attachments - Messages | Image Upload
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMAGE_UPLOAD;)
+ (NSString * _Nonnull)IMAGE_UPLOAD SWIFT_WARN_UNUSED_RESULT;
/// 149 | File Attachments - E-Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMAGE_UPLOAD_EVISIT;)
+ (NSString * _Nonnull)IMAGE_UPLOAD_EVISIT SWIFT_WARN_UNUSED_RESULT;
/// 4501 | Messages - Billing | Billing Customer Service Messages
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_CUST_SVC;)
+ (NSString * _Nonnull)BILLING_CUST_SVC SWIFT_WARN_UNUSED_RESULT;
/// 10068 | A49 | Pharmacy Messages
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PHARMACY_MESSAGE;)
+ (NSString * _Nonnull)PHARMACY_MESSAGE SWIFT_WARN_UNUSED_RESULT;
/// 90 | History questionnaires
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull QUESTIONNAIRES_HISTORY;)
+ (NSString * _Nonnull)QUESTIONNAIRES_HISTORY SWIFT_WARN_UNUSED_RESULT;
/// 160 | General questionnaires
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull QUESTIONNAIRES_GENERAL;)
+ (NSString * _Nonnull)QUESTIONNAIRES_GENERAL SWIFT_WARN_UNUSED_RESULT;
/// 96013 | DENY Bedside - A few questions - general questions
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_QUESTIONNAIRES;)
+ (NSString * _Nonnull)DENY_BEDSIDE_QUESTIONNAIRES SWIFT_WARN_UNUSED_RESULT;
/// 3 | Account Inquiry
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCOUNT_INQUIRY;)
+ (NSString * _Nonnull)ACCOUNT_INQUIRY SWIFT_WARN_UNUSED_RESULT;
/// 92 | PB Statement Detail |  Note that there is no corresponding security for HB or SBO
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PB_STATEMENT_DETAILS;)
+ (NSString * _Nonnull)PB_STATEMENT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 108 | HB Account Inquiry
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HB_ACCOUNT_INQUIRY;)
+ (NSString * _Nonnull)HB_ACCOUNT_INQUIRY SWIFT_WARN_UNUSED_RESULT;
/// 115 | Copay Payment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COPAY_PAYMENT;)
+ (NSString * _Nonnull)COPAY_PAYMENT SWIFT_WARN_UNUSED_RESULT;
/// 123 | SBO Account Inquiry
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBO_ACCOUNT_INQUIRY;)
+ (NSString * _Nonnull)SBO_ACCOUNT_INQUIRY SWIFT_WARN_UNUSED_RESULT;
/// 158 | Premium Billing Summary
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PREMIUM_BILLING;)
+ (NSString * _Nonnull)PREMIUM_BILLING SWIFT_WARN_UNUSED_RESULT;
/// 195 | Patient Estimates
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_ESTIMATES;)
+ (NSString * _Nonnull)PATIENT_ESTIMATES SWIFT_WARN_UNUSED_RESULT;
/// 206 | Financial Assistance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FINANCIAL_ASSISTANCE;)
+ (NSString * _Nonnull)FINANCIAL_ASSISTANCE SWIFT_WARN_UNUSED_RESULT;
/// 171 | Insurance ID Card
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull INSURANCE_ID_CARD;)
+ (NSString * _Nonnull)INSURANCE_ID_CARD SWIFT_WARN_UNUSED_RESULT;
/// 172 | HTML Insurance ID Card
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTML_INSURANCE_ID_CARD;)
+ (NSString * _Nonnull)HTML_INSURANCE_ID_CARD SWIFT_WARN_UNUSED_RESULT;
/// 91 | Patient Entered Flowsheet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRACK_MY_HEALTH;)
+ (NSString * _Nonnull)TRACK_MY_HEALTH SWIFT_WARN_UNUSED_RESULT;
/// 162 | PEF - External Accounts
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EXTERNAL_PEF;)
+ (NSString * _Nonnull)EXTERNAL_PEF SWIFT_WARN_UNUSED_RESULT;
/// 152 | Patient Photo Upload & Replacement
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PERSONALIZE_PHOTO;)
+ (NSString * _Nonnull)PERSONALIZE_PHOTO SWIFT_WARN_UNUSED_RESULT;
/// 153 | Personalize MyChart
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PERSONALIZE;)
+ (NSString * _Nonnull)PERSONALIZE SWIFT_WARN_UNUSED_RESULT;
/// 151 | Telemedicine Scheduling
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_SCHEDULING;)
+ (NSString * _Nonnull)TELEMEDICINE_SCHEDULING SWIFT_WARN_UNUSED_RESULT;
/// 207 | On Demand Video Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_ON_DEMAND_VIDEO_VISITS;)
+ (NSString * _Nonnull)TELEMEDICINE_ON_DEMAND_VIDEO_VISITS SWIFT_WARN_UNUSED_RESULT;
/// 208 | QuickSchedule
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_QUICKSCHEDULE;)
+ (NSString * _Nonnull)TELEMEDICINE_QUICKSCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 234 | DENY Joining Video Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_DENY_JOINING_VIDEO_VISITS;)
+ (NSString * _Nonnull)TELEMEDICINE_DENY_JOINING_VIDEO_VISITS SWIFT_WARN_UNUSED_RESULT;
/// 179 | Upcoming Orders
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UPCOMING_ORDERS;)
+ (NSString * _Nonnull)UPCOMING_ORDERS SWIFT_WARN_UNUSED_RESULT;
/// 2000 | View Patient Assigned Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_VIEW_ASSIGNED_TASKS;)
+ (NSString * _Nonnull)TODO_VIEW_ASSIGNED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2001 | Act On Patient Assigned Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_ACT_ON_ASSIGNED_TASKS;)
+ (NSString * _Nonnull)TODO_ACT_ON_ASSIGNED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2002 | Personalize Task Times
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_PERSONALIZE_ASSIGNED_TASKS;)
+ (NSString * _Nonnull)TODO_PERSONALIZE_ASSIGNED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2003 | View Patient Created Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_VIEW_PATIENT_CREATED_TASKS;)
+ (NSString * _Nonnull)TODO_VIEW_PATIENT_CREATED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2004 | Act On Patient Created Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_ACT_ON_PATIENT_CREATED_TASKS;)
+ (NSString * _Nonnull)TODO_ACT_ON_PATIENT_CREATED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 77 | User Audit Trail
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USER_AUDIT_TRAIL;)
+ (NSString * _Nonnull)USER_AUDIT_TRAIL SWIFT_WARN_UNUSED_RESULT;
/// 126 | Download CCD
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DOWNLOAD_CCD;)
+ (NSString * _Nonnull)DOWNLOAD_CCD SWIFT_WARN_UNUSED_RESULT;
/// 154 | MyChart Audit Trail
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYCHART_AUDIT_TRAIL;)
+ (NSString * _Nonnull)MYCHART_AUDIT_TRAIL SWIFT_WARN_UNUSED_RESULT;
/// 155 | Download Visit Summary
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DOWNLOAD_VISIT_SUMMARY;)
+ (NSString * _Nonnull)DOWNLOAD_VISIT_SUMMARY SWIFT_WARN_UNUSED_RESULT;
/// 156 | Transmit Visit Summary CE
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRANSMIT_VISIT_SUMMARY_CE;)
+ (NSString * _Nonnull)TRANSMIT_VISIT_SUMMARY_CE SWIFT_WARN_UNUSED_RESULT;
/// 157 | Transmit Visit Summary Direct
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRANSMIT_VISIT_SUMMARY_DIRECT;)
+ (NSString * _Nonnull)TRANSMIT_VISIT_SUMMARY_DIRECT SWIFT_WARN_UNUSED_RESULT;
/// 159 | ROI Access
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ROI_ACCESS;)
+ (NSString * _Nonnull)ROI_ACCESS SWIFT_WARN_UNUSED_RESULT;
/// 188 | Transmit Visit Summary Email
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRANSMIT_VISIT_SUMMARY_EMAIL;)
+ (NSString * _Nonnull)TRANSMIT_VISIT_SUMMARY_EMAIL SWIFT_WARN_UNUSED_RESULT;
/// 217 | My Documents
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MY_DOCUMENTS;)
+ (NSString * _Nonnull)MY_DOCUMENTS SWIFT_WARN_UNUSED_RESULT;
/// 10 | Allergy Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ALLERGY_CONTENT;)
+ (NSString * _Nonnull)ALLERGY_CONTENT SWIFT_WARN_UNUSED_RESULT;
/// 38 | HealthIssue Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICD_DETAILS;)
+ (NSString * _Nonnull)ICD_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 44 | Immunization Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMMUNIZATION_CONTENT;)
+ (NSString * _Nonnull)IMMUNIZATION_CONTENT SWIFT_WARN_UNUSED_RESULT;
/// 49 | Lab Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CPT_DETAILS;)
+ (NSString * _Nonnull)CPT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 116 | Keyword Search
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEYWORD_SEARCH;)
+ (NSString * _Nonnull)KEYWORD_SEARCH SWIFT_WARN_UNUSED_RESULT;
/// 226 | Education List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EDUCATION_LIST;)
+ (NSString * _Nonnull)EDUCATION_LIST SWIFT_WARN_UNUSED_RESULT;
/// 10048 | A17
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BEDSIDE_MO_EDUCATION;)
+ (NSString * _Nonnull)BEDSIDE_MO_EDUCATION SWIFT_WARN_UNUSED_RESULT;
/// 96006 | DENY Bedside - To Learn
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_EDUCATION;)
+ (NSString * _Nonnull)DENY_BEDSIDE_EDUCATION SWIFT_WARN_UNUSED_RESULT;
/// 10108  | Bedside Self Service Tablet Code
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BEDSIDE_SELF_SERVICE_TABLET_CODE;)
+ (NSString * _Nonnull)BEDSIDE_SELF_SERVICE_TABLET_CODE SWIFT_WARN_UNUSED_RESULT;
/// 6 | View/Edit Personal Information - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PERSONAL_INFO_PROXY_ONLY;)
+ (NSString * _Nonnull)PERSONAL_INFO_PROXY_ONLY SWIFT_WARN_UNUSED_RESULT;
/// 50 | Letters
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LETTERS;)
+ (NSString * _Nonnull)LETTERS SWIFT_WARN_UNUSED_RESULT;
/// 56 | Password Change
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_PASSWORD;)
+ (NSString * _Nonnull)CHANGE_PASSWORD SWIFT_WARN_UNUSED_RESULT;
/// 59 | Patient Preferences
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_PREFERENCES;)
+ (NSString * _Nonnull)PATIENT_PREFERENCES SWIFT_WARN_UNUSED_RESULT;
/// 117 | E-Visit
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EVISIT;)
+ (NSString * _Nonnull)EVISIT SWIFT_WARN_UNUSED_RESULT;
/// 198 | Manage External Accounts | Community connections for H2G
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MANAGE_EXTERNAL_ACCOUNTS;)
+ (NSString * _Nonnull)MANAGE_EXTERNAL_ACCOUNTS SWIFT_WARN_UNUSED_RESULT;
/// 203 | Patient Visit Guide
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_VISIT_GUIDE;)
+ (NSString * _Nonnull)PATIENT_VISIT_GUIDE SWIFT_WARN_UNUSED_RESULT;
/// 210 | Geolocation Self Arrival | Appointment auto-arrival with geolocation or Bluetooth beacons
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_SELF_ARRIVAL;)
+ (NSString * _Nonnull)APPT_SELF_ARRIVAL SWIFT_WARN_UNUSED_RESULT;
/// 214 | Self-Triage | Symptom Checker
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SYMPTOM_CHECKER;)
+ (NSString * _Nonnull)SYMPTOM_CHECKER SWIFT_WARN_UNUSED_RESULT;
/// 220 | DENY Share Everywhere
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_SHARE_EVERYWHERE;)
+ (NSString * _Nonnull)DENY_SHARE_EVERYWHERE SWIFT_WARN_UNUSED_RESULT;
/// 225 | Send Proxy Invite | MO Family access
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SEND_PROXY_INVITE;)
+ (NSString * _Nonnull)SEND_PROXY_INVITE SWIFT_WARN_UNUSED_RESULT;
/// 239 | DENY On My Way | MO On My Way
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_ON_MY_WAY;)
+ (NSString * _Nonnull)DENY_ON_MY_WAY SWIFT_WARN_UNUSED_RESULT;
/// 240 | DENY Infectious Disease Status | Infection Control
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_INFECTIOUS_DISEASE_STATUS;)
+ (NSString * _Nonnull)DENY_INFECTIOUS_DISEASE_STATUS SWIFT_WARN_UNUSED_RESULT;
/// 10001 | A2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_COMM_CENTER;)
+ (NSString * _Nonnull)MO_COMM_CENTER SWIFT_WARN_UNUSED_RESULT;
/// 10009 | A3
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EDIT_PERSONAL_INFORMATION;)
+ (NSString * _Nonnull)EDIT_PERSONAL_INFORMATION SWIFT_WARN_UNUSED_RESULT;
/// 10014 | A7
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ONBOARDING_HOW_TO_VIDEO;)
+ (NSString * _Nonnull)ONBOARDING_HOW_TO_VIDEO SWIFT_WARN_UNUSED_RESULT;
/// 10043 | A33 | COVID Status
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COVID_STATUS;)
+ (NSString * _Nonnull)COVID_STATUS SWIFT_WARN_UNUSED_RESULT;
/// 10044 | A34 | COVID Test Results
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COVID_TEST_RESULTS;)
+ (NSString * _Nonnull)COVID_TEST_RESULTS SWIFT_WARN_UNUSED_RESULT;
/// 10053 | A40 | Account Deactivation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DEACTIVATE_ACCOUNT;)
+ (NSString * _Nonnull)DEACTIVATE_ACCOUNT SWIFT_WARN_UNUSED_RESULT;
/// 10055 | A42
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_TESTRESULTS;)
+ (NSString * _Nonnull)MO_TESTRESULTS SWIFT_WARN_UNUSED_RESULT;
/// 10056 | E1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEATURE_LIBRARY;)
+ (NSString * _Nonnull)FEATURE_LIBRARY SWIFT_WARN_UNUSED_RESULT;
/// 10069 | A51
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOBILE_PRINTING;)
+ (NSString * _Nonnull)MOBILE_PRINTING SWIFT_WARN_UNUSED_RESULT;
/// 10070 | A52
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_BEDSIDE_TESTRESULTS;)
+ (NSString * _Nonnull)MO_BEDSIDE_TESTRESULTS SWIFT_WARN_UNUSED_RESULT;
/// 10073 | F2 | Always-on feature for retrieving locale settings from server. Falls back to phonebook locale settings if disabled by off-switch.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOBILE_SERVER_LOCALE_SETTINGS;)
+ (NSString * _Nonnull)MOBILE_SERVER_LOCALE_SETTINGS SWIFT_WARN_UNUSED_RESULT;
/// 10093 | F19 | Controlled by an ELF. If disabled, secondary login is disabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYC_MOBILE_SECONDARY_LOGIN;)
+ (NSString * _Nonnull)MYC_MOBILE_SECONDARY_LOGIN SWIFT_WARN_UNUSED_RESULT;
/// 10094 | F20 | Controlled by an ELF. If disabled, passcode login is disabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYC_MOBILE_PASSCODE_LOGIN;)
+ (NSString * _Nonnull)MYC_MOBILE_PASSCODE_LOGIN SWIFT_WARN_UNUSED_RESULT;
/// 96001 | DENY Bedside - Happening soon
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_HAPPENING_SOON;)
+ (NSString * _Nonnull)DENY_BEDSIDE_HAPPENING_SOON SWIFT_WARN_UNUSED_RESULT;
/// 96002 | DENY Bedside - DENY Bedside - Taking care of me
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_CARE_TEAM;)
+ (NSString * _Nonnull)DENY_BEDSIDE_CARE_TEAM SWIFT_WARN_UNUSED_RESULT;
/// 96003 | DENY Bedside - I would like…
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_REQUESTS;)
+ (NSString * _Nonnull)DENY_BEDSIDE_REQUESTS SWIFT_WARN_UNUSED_RESULT;
/// 96010 | MyChartNow Emergency - Happening Now - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BEDSIDE_WORKFLOW_STEP;)
+ (NSString * _Nonnull)BEDSIDE_WORKFLOW_STEP SWIFT_WARN_UNUSED_RESULT;
/// 96014 | DENY Bedside - Clinical notes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_CLINICAL_NOTES;)
+ (NSString * _Nonnull)DENY_BEDSIDE_CLINICAL_NOTES SWIFT_WARN_UNUSED_RESULT;
/// 96017 | DENY Bedside - Sign forms
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_CONSENTS;)
+ (NSString * _Nonnull)DENY_BEDSIDE_CONSENTS SWIFT_WARN_UNUSED_RESULT;
/// 96020 | DENY MyChartNow - Problems List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_MYCHARTNOW_PROBLEM_LIST;)
+ (NSString * _Nonnull)DENY_MYCHARTNOW_PROBLEM_LIST SWIFT_WARN_UNUSED_RESULT;
/// 96021 | DENY MyChartNow - Medications
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_MYCHARTNOW_MEDICATIONS;)
+ (NSString * _Nonnull)DENY_MYCHARTNOW_MEDICATIONS SWIFT_WARN_UNUSED_RESULT;
/// 96025 | DENY Bedside - Continuing Care
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_CONTINUING_CARE;)
+ (NSString * _Nonnull)DENY_CONTINUING_CARE SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC6PECore17ServerDebugHeader")
@interface ServerDebugHeader : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull field;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ServerDebugProvider")
@interface ServerDebugProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ServerDebugProvider * _Nonnull shared;)
+ (ServerDebugProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Initialize with default runtime app state.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, strong) ServerDebugHeader * _Nullable webServiceHeader;
@end


/// Simple implementation of a cachable image
SWIFT_CLASS("_TtC6PECore29SimpleCachableImageDataSource")
@interface SimpleCachableImageDataSource : NSObject <CacheableImageDataSource>
@property (nonatomic, copy) NSString * _Nonnull imageURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// View for showing site wide theme override info
SWIFT_CLASS("_TtC6PECore35SiteWideThemeOverrideViewController")
@interface SiteWideThemeOverrideViewController : UIViewController
+ (SiteWideThemeOverrideViewController * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6PECore15SmartStyleModel")
@interface SmartStyleModel : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)colorBackground :(NSString * _Nonnull)colorError :(NSString * _Nonnull)colorHighlight :(NSString * _Nonnull)colorModalBackdrop :(NSString * _Nonnull)colorSuccess :(NSString * _Nonnull)colorText :(NSString * _Nonnull)dimBorderRadius :(NSString * _Nonnull)dimFontSize :(NSString * _Nonnull)dimSpacingSize :(NSString * _Nonnull)fontFamilyBody :(NSString * _Nonnull)fontFamilyHeading OBJC_DESIGNATED_INITIALIZER;
+ (SmartStyleModel * _Nonnull)getSmartStyleModelFromThemeWithTheme:(id <PEThemeProtocol> _Nonnull)theme SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Search Engine for searching through objects based on string comparisons using the Jaro Winkler formula
SWIFT_CLASS("_TtC6PECore18StringSearchEngine")
@interface StringSearchEngine : NSObject
- (nonnull instancetype)initWithSearchConfiguration:(SearchConfiguration * _Nonnull)searchConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets a function that will filter search results. If the function returns false then the searchable object will be skipped.
/// \param function the filter function to set. Null will clear the filter
///
- (void)setFilterFunctionWithFunction:(BOOL (^ _Nullable)(id <SearchableProtocol> _Nonnull))function;
/// Adds an object to the list of searchable objects
/// \param searchableObject the object to be added to the searchable object list
///
- (void)addSearchableObjectWithSearchableObject:(id <SearchableProtocol> _Nonnull)searchableObject;
/// Get search results for a given input string
/// \param searchString the user input search string to compare
///
- (NSArray<SearchResult *> * _Nonnull)getSearchResultsWithSearchString:(NSString * _Nonnull)searchString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore10StringUtil")
@interface StringUtil : NSObject
+ (BOOL)stringContainsOnlyAllowedCharacters:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, TextAlignment, open) {
  TextAlignmentRightToLeft = 0,
  TextAlignmentLeftToRight = 1,
};


SWIFT_PROTOCOL("_TtP6PECore17TextStyleProtocol_")
@protocol TextStyleProtocol <BaseStyleProtocol>
- (enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
- (float)fontSize SWIFT_WARN_UNUSED_RESULT;
- (enum FontWeight)fontWeight SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)fontColorWithForceUseStyleColor:(BOOL)forceUseStyleColor SWIFT_WARN_UNUSED_RESULT;
@end


enum ToastDuration : NSInteger;

SWIFT_CLASS("_TtC6PECore5Toast")
@interface Toast : UIView
/// Makes an error toast with the provided text and duration.
/// \param text the text to display in the toast
///
/// \param duration the duration to display the toast for
///
///
/// returns:
/// A toast with the provided text and duration.
+ (Toast * _Nullable)makeErrorWithText:(NSString * _Nonnull)text duration:(enum ToastDuration)duration SWIFT_WARN_UNUSED_RESULT;
/// Makes a toast with the provided text and duration.
/// \param text the text to display in the toast
///
/// \param duration the duration to display the toast for
///
///
/// returns:
/// A toast with the provided text and duration.
+ (Toast * _Nullable)makeWithText:(NSString * _Nonnull)text duration:(enum ToastDuration)duration SWIFT_WARN_UNUSED_RESULT;
/// Shows the toast in the application’s top-most window.  Note that when the keyboard is shown or hidden, the toast will automatically be moved to the “new” top-most window.
- (Toast * _Nonnull)show;
/// Executes the provided callback when VoiceOver has finished reading the current prompt. If VoiceOver is not currently running, the callback is executed immediately.
/// \param callback the callback to execute
///
- (void)onAnnouncementDidFinishNotification:(void (^ _Nonnull)(void))callback;
/// Hides the toast.
- (void)hide;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum representing the valid toast durations
typedef SWIFT_ENUM(NSInteger, ToastDuration, open) {
  ToastDurationShort = 0,
  ToastDurationLong = 1,
};


/// Stores the default tokens in use by the web service engine
SWIFT_CLASS("_TtC6PECore13TokenProvider")
@interface TokenProvider : NSObject
/// private initializer, only instance <em>instance</em> is available
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Types of authentication tokens that are used with Epic endpoints
typedef SWIFT_ENUM(NSInteger, TokenType, open) {
/// Use the token type specified at the category level
  TokenTypeDefault = 0,
/// The MyChart Bedside token type
  TokenTypeBedside = 1,
/// The MyChart Mobile token type
  TokenTypeMyChart = 2,
/// The OAuth2 token type (used by Bedside TV)
  TokenTypeOAuth2 = 3,
};


SWIFT_CLASS("_TtC6PECore14ToolTipManager")
@interface ToolTipManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (void)setUpToolTips:(UIViewController * _Nonnull)viewController;
@end



/// Helper class to determine settings for a 2FA setting
SWIFT_CLASS("_TtC6PECore27TwoFactorAccountSettingInfo")
@interface TwoFactorAccountSettingInfo : NSObject
@property (nonatomic, readonly) BOOL showOption;
@property (nonatomic, readonly) BOOL userEnabled;
@property (nonatomic, readonly) BOOL allowToggle;
- (nonnull instancetype)initWithShowOption:(BOOL)showOption userEnabled:(BOOL)userEnabled allowToggle:(BOOL)allowToggle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol representing user and system information regarding two-factor authentication.
SWIFT_PROTOCOL("_TtP6PECore28TwoFactorInformationProtocol_")
@protocol TwoFactorInformationProtocol
/// Indicates whether or not the user can opt in-to/out-of email or SMS based two-factor authentication, based on current configuration.
@property (nonatomic, readonly) BOOL allowOptIn;
/// Indicates whether or not the user is currently opted into email or SMS based two-factor authentication.
@property (nonatomic, readonly) BOOL isOptedIn;
/// Indicates whether or not the user can opt in-to/out-of TOTP based two-factor authentication, based on current configuration.
@property (nonatomic, readonly) BOOL allowOptInTOTP;
/// Indicates whether or not the user is currently opted into TOTP based two-factor authentication.
@property (nonatomic, readonly) BOOL isOptedInTOTP;
/// Indicates whether or not email is a delivery method configured in the system for two-factor codes.
@property (nonatomic, readonly) BOOL isEmailDeliveryConfigured;
/// Indicates whether or not SMS is a delivery method configured in the system for two-factor codes.
@property (nonatomic, readonly) BOOL isSMSDeliveryConfigured;
/// If Two Factor is required.  Meaning they can not disable 2FA if only 1 option is enabled.
@property (nonatomic, readonly) BOOL isTwoFactorRequired;
/// Information about the two factor sms/email account settings
@property (nonatomic, readonly, strong) TwoFactorAccountSettingInfo * _Nonnull smsEmailAccountSettingsInfo;
/// Information about the two factor totp account settings
@property (nonatomic, readonly, strong) TwoFactorAccountSettingInfo * _Nonnull totpAccountSettingsInfo;
@end


@interface UIAlertController (SWIFT_EXTENSION(PECore))
/// Adds a button with the provided title and handler to the alert.
/// \param title the title for the button
///
/// \param handler the handler to invoke when the button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds an “OK” button with the provided listener to the alert.
/// \param handler the handler to invoke when the button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addOKButtonWithHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds a “positive” button with the provided title and handler to the alert. A “positive” button should typically be paired with a “negative” button when presenting the user with a choice.
/// \param title the title for the positive button
///
/// \param handler the handler to invoke when the positive button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addPositiveButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds a “negative” button with the provided title and handler to the alert. A “negative” button should typically be paired with a “positive” button when presenting the user with a choice.
/// \param title the title for the negative button
///
/// \param handler the handler to invoke when the negative button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addNegativeButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
@end



@interface UIColor (SWIFT_EXTENSION(PECore))
/// Standard color for secondary text and subtitles. Matches WPColor-TextSubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull subtleTextColor;)
+ (UIColor * _Nonnull)subtleTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text that is slightly less important than the primary text. Matches WPColor-TextSlightlySubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull slightlySubtleTextColor;)
+ (UIColor * _Nonnull)slightlySubtleTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text indicating an error or other urgent information. Matches WPColor-TextError.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull errorTextColor;)
+ (UIColor * _Nonnull)errorTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for disabled buttons and other controls. Matches WPColor-ActionButtonDisabledBack.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabledButtonColor;)
+ (UIColor * _Nonnull)disabledButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for disabled buttons and other controls. Matches WPColor-ActionButtonDisabledFore.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabledButtonTextColor;)
+ (UIColor * _Nonnull)disabledButtonTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for badges.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull badgeColor;)
+ (UIColor * _Nonnull)badgeColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text used to indicate amounts of money. Matches WPColor-TextMoney.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull moneyTextColor;)
+ (UIColor * _Nonnull)moneyTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for dividers, which separate rows in a list or otherwise divide a view.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerColor;)
+ (UIColor * _Nonnull)dividerColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for banner borders. Matches WPColor-BorderVerySubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull bannerBorderColor;)
+ (UIColor * _Nonnull)bannerBorderColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for tab bar items that are not selected. Matches WPColor-TextSubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tabBarItemColor;)
+ (UIColor * _Nonnull)tabBarItemColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for tab bars.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nullable tabBarColor;)
+ (UIColor * _Nullable)tabBarColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the color (black or white) to use for text displayed on top of this color to meet WCAG guidelines for contrast.
- (UIColor * _Nonnull)getContrastingTextColor SWIFT_WARN_UNUSED_RESULT;
@end





@interface UIImage (SWIFT_EXTENSION(PECore))
/// Create a UIImage from the customer’s bundle if it exists, falling back on the default if not
/// \param brandedName the name for the resource in the customer or Epic’s bundle
///
/// \param defaultBundle the bundle to use if not found in the customer’s; defaults to main application bundle
///
+ (UIImage * _Nullable)brandedImageNamed:(NSString * _Nonnull)brandedName defaultBundle:(NSBundle * _Nonnull)defaultBundle SWIFT_WARN_UNUSED_RESULT;
/// Create a UIImage from the customer’s bundle if it exists, falling back on the default if not
/// \param brandedName the name for the resource in the customer or Epic’s bundle
///
/// \param defaultBundle the bundle to use if not found in the customer’s; defaults to main application bundle
///
- (nullable instancetype)initWithBrandedName:(NSString * _Nonnull)brandedName defaultBundle:(NSBundle * _Nonnull)defaultBundle;
@end







@interface UIView (SWIFT_EXTENSION(PECore))
@property (nonatomic, copy) IBInspectable NSString * _Nullable tutorialViewID;
/// Adds a subview and applies constraints such that the subview fills the entire view.
/// \param view the subview to add
///
- (void)addAndFillWithSubview:(UIView * _Nonnull)view;
/// Adds a subview and applies constraints such that the subview fills the entire view.
/// \param view the subview to add
///
/// \param shouldConstrainToKeyboard boolean for if webview should stay above mobile keyboard
///
/// \param shouldConstrainToSafeArea boolean for if webview should stay within safe areas
///
- (void)addAndFillWithSubview:(UIView * _Nonnull)view shouldConstrainToKeyboard:(BOOL)shouldConstrainToKeyboard shouldConstrainToSafeArea:(BOOL)shouldConstrainToSafeArea;
@end



@interface UIViewController (SWIFT_EXTENSION(PECore))
/// Computed property used to determine if this view controller is an instance of UIHostingController
@property (nonatomic, readonly) BOOL isUIHostingController;
@end


@interface UIViewController (SWIFT_EXTENSION(PECore))
/// Hide the navigation bar. This function is overridden in the homepage so that library customers can have control over whether Epic controls this behavior, or they do
/// \param shouldShow should it show or hide
///
- (void)showNavigationBar:(BOOL)shouldShow;
/// Dismiss this view controller all the way to the login screen
/// \param loginViewController the view controller that is the login view controller
///
- (void)dismissToLoginController:(UIViewController * _Nonnull)loginViewController;
/// Gets the login view controller among the various ways a library custom may have presented the homepage post-login
- (UIViewController * _Nullable)getLoginViewController SWIFT_WARN_UNUSED_RESULT;
/// Presents a view controller after asserting that another view controller isn’t already presented. Use this when you are not sure about the state of the current view controller (for example, when getting the top view controller)
- (void)presentSafely:(UIViewController * _Nonnull)vcToPresent animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSURLRequest;

/// This class acts as the delegate for the underlying URLsession.
/// It helps to configure and create the session with the correct <em>URLSessionConfiguration</em>,
/// delegate and queue on which the completion blcoks will be called.
/// The shared/singleton manager is also the delegate for the session and must
/// implement any methods of interest from *URLSessionDelegate, URLSessionTaskDelegate,
/// URLSessionDataDelegate, URLSessionDownloadDelegate etc.
SWIFT_CLASS("_TtC6PECore17URLSessionManager")
@interface URLSessionManager : NSObject <NSURLSessionTaskDelegate>
/// Private Initializer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This <em>URLSessionTaskDelegaste</em> method checks if the statusCode matches HTTP_MOVED_TEMP/PERM
/// status codes and only allows redirection if the original request was not to an https URL.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
@end

@class UIWindow;

SWIFT_CLASS("_TtC6PECore6UiUtil")
@interface UiUtil : NSObject
/// Returns the application’s key window
+ (UIWindow * _Nullable)keyWindow SWIFT_WARN_UNUSED_RESULT;
/// Gets the root view controller of the key window of the application
///
/// returns:
/// the root view controller of the key window of the application, or nil if there are no key windows
+ (UIViewController * _Nullable)getRootViewController SWIFT_WARN_UNUSED_RESULT;
/// Gets the root navigation controller of the application’s current keyWindow
/// This may not return a valid value in the context of a self-submitted app
/// seealso:
/// <code>UiUtil/keyWindow()</code>
///
/// returns:
/// the root navigation controller of the application’s current keyWindow, or nil if one was not found
+ (UINavigationController * _Nullable)getRootNavigationController SWIFT_WARN_UNUSED_RESULT;
/// Get the first navigation controller that is a descendant of the passed in view controller
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: the controller we are going down the hierarchy of
///   </li>
/// </ul>
///
/// returns:
/// the first navigation controller we find, or nil
+ (UINavigationController * _Nullable)getNavControllerChildOf:(UIViewController * _Nullable)viewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the orientation of the key window
+ (UIInterfaceOrientation)interfaceOrientation SWIFT_WARN_UNUSED_RESULT;
+ (CGRect)statusBarFrame SWIFT_WARN_UNUSED_RESULT;
/// Determines the right UIStatusBarStyle for a given color
/// \param color color to match, e.g. the navigation bar’s text color
///
///
/// returns:
/// corresponding UIStatusBarStyle enum value
+ (UIStatusBarStyle)statusBarStyleMatchingColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum UnreadIndicatorStyle : NSInteger;

/// View for displaying unread indicators, which provide a visual indication of whether or not an item has been read by the user.
SWIFT_CLASS("_TtC6PECore19UnreadIndicatorView")
@interface UnreadIndicatorView : UIView
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// IB initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets the style for this indicator.
/// \param style the style for the indicator
///
- (void)setStyle:(enum UnreadIndicatorStyle)style;
/// Sets whether or not this indicator is indicating an unread status.
/// \param isUnread set to true to indicate an unread status, false to indicate an read status
///
- (void)setUnread:(BOOL)isUnread;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, UnreadIndicatorStyle, open) {
  UnreadIndicatorStyleUnknown = 0,
  UnreadIndicatorStyleBillingStatement = 1,
  UnreadIndicatorStyleLabResult = 2,
  UnreadIndicatorStyleImagingResult = 3,
  UnreadIndicatorStyleOtherResult = 4,
  UnreadIndicatorStyleProcedureResult = 5,
  UnreadIndicatorStyleVisitAVS = 6,
  UnreadIndicatorStyleVisitNote = 7,
};

/// Types of servers that the web service framework can connect to
typedef SWIFT_ENUM(NSInteger, UrlType, open) {
/// An Epic Interconnect instance
  UrlTypeInterconnect = 0,
/// An Epic Web Blob Server
  UrlTypeWebBlob = 1,
/// A custom server
  UrlTypeNone = 2,
/// An OAuth2 authorization server
  UrlTypeOAuth2 = 3,
/// An instance of the mychart website
  UrlTypeMyChartWebsite = 4,
};


/// Provides the appropriate user agent string for the application calling a web service
SWIFT_CLASS("_TtC6PECore17UserAgentProvider")
@interface UserAgentProvider : NSObject
/// The static app version according to Epic’s release stream (does not change with any branded configuration)
@property (nonatomic, readonly, copy) NSString * _Nonnull epicVersion;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull epicVersion;)
+ (NSString * _Nonnull)epicVersion SWIFT_WARN_UNUSED_RESULT;
/// returns the single instance of the <em>UserAgentProvider</em>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UserAgentProvider * _Null_unspecified instance;)
+ (UserAgentProvider * _Null_unspecified)instance SWIFT_WARN_UNUSED_RESULT;
+ (void)setInstance:(UserAgentProvider * _Null_unspecified)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6PECore12ValidateUtil")
@interface ValidateUtil : NSObject
/// Check if an email address is valid or not. The email address now supports some non-English alphabet characters,
/// including ASCII 192-255 and Char 131, 138, 140, 142, 154, 156, 158, and 159 (ƒŠŒŽšœžŸ).
/// <p/>
/// This logic is consistent with PatientEngagement\Source\Shared\Web\Validation\ValidationHelpers.cs
/// although it's more complicated in server isValidEmailAddress^%ZeSMTP
/// @param email the email address to check
/// @return true if the email address is valid, false otherwise
+ (BOOL)isValidEmail:(NSString * _Nullable)email SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Card view for patient-facing “how to” videos
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore13VideoCardView")
@interface VideoCardView : SelfLoadingView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore22VideoResponseViewModel")
@interface VideoResponseViewModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Defines the properties of a category of web services corresponding to a bundle of endpoints
/// contained under a common path on a server
SWIFT_CLASS("_TtC6PECore18WebServiceCategory")
@interface WebServiceCategory : NSObject
/// The namespace, or sub directory that this category of service is located under
@property (nonatomic, copy, getter=namespace, setter=setNamespace:) NSString * _Nullable namespace_;
/// The format of the request parameters
@property (nonatomic) enum PERequestFormat requestFormat;
/// The format of the expected response body
@property (nonatomic) enum PEResponseFormat responseFormat;
/// The authentication token type to use with this service category
@property (nonatomic) enum TokenType tokenType;
/// The destination server URL type to use with this service category
@property (nonatomic) enum UrlType urlType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// PECore’s defined Error Types.
typedef SWIFT_ENUM(NSInteger, WebServiceErrorType, open) {
/// This type of <em>WebServiceFailedError</em> is used when there is something wrong with the URL
/// it’s components or it’s params.
  WebServiceErrorTypeURLComposition = 0,
/// This type of <em>WebServiceFailedError</em> is used when a urlTemplate needs the patient index
/// but it is not available from the Context in WebService. This happens when the
/// template has the {PatientIndex} in it but the index cannot be obtained.
  WebServiceErrorTypePatientIndexNotFound = 1,
/// This type of <em>WebServiceFailedError</em> is used whenever something goes wrong with encoding
/// or creating the request.
  WebServiceErrorTypeRequestParsing = 2,
/// This type of <em>WebServiceFailedError</em> is used whenever something goes wrong with parsing
/// or decoding the response.
  WebServiceErrorTypeResponseParsing = 3,
/// This type of <em>WebServiceFailedError</em> is used whenever a session task fails with an error
/// that suggests there was some error with the security layer. These may include
/// errors in the NSErrorCocoaDomain like : NSURLErrorSecureConnectionFailed,
/// NSURLErrorServerCertificateHasBadDate, NSURLErrorClientCertificateRequired etc.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebSecurity = 4,
/// This type of <em>WebServiceFailedError</em> is used when something goes wrong with the client.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClient = 5,
/// This type of <em>WebServiceFailedError</em> is used when a response code 401 Unauthorized is received
/// from the server or if errors like NSURLErrorUserAuthenticationRequired are received.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClientUnauthorized = 6,
/// This type of <em>WebServiceFailedError</em> is used when the response code is in the 4xx range
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClientConnection = 7,
/// This type of <em>WebServiceFailedError</em> is used when the response code is 400 Bad Request
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClientBadRequest = 8,
/// This type of <em>WebServiceFailedError</em> is used when the response code is in the 5xx range
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebServer = 9,
/// This type of <em>WebServiceFailedError</em> is used whenever the dataTask completes with the
/// error : NSURLErrorTimedOut
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeTimeout = 10,
/// This type of <em>WebServiceFailedError</em> is received whenever network is not available. Some common
/// underlying errors may be : NSURLErrorNotConnectedToInternet, NSURLErrorNetworkConnectionLost etc.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeNetworkNotAvailable = 11,
/// This type of <em>WebServiceFailedError</em> is received whenever the server returns a too many request http status code
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeTooManyRequestsError = 12,
/// This type of <em>WebServiceFailedError</em> is used when the error cannot be categorized as any of the above
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeUnknown = 13,
};


/// An class that implements Error to easily transfer Typed, meaningful errors encountered
/// while parsing the request or response, or to wrap received errors from the  NSURLErrorDomain,
/// these can be set as the error object easily whenever a WebService failureBlock needs to be called.
SWIFT_CLASS("_TtC6PECore21WebServiceFailedError")
@interface WebServiceFailedError : NSObject
- (NSString * _Nonnull)getMessage SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nullable)getSourceError SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore23WebSessionEventDelegate_")
@protocol WebSessionEventDelegate
/// Raised when the web session manager is ready for activity
/// warning:
/// This is not guaranteed to execute on the UI thread
/// \param success did the session set up properly, or abort
///
- (void)onWebSessionReadyWithSuccess:(BOOL)success;
@end


SWIFT_CLASS("_TtC6PECore17WebSessionManager")
@interface WebSessionManager : NSObject
/// Call this when the user logs in to set up the manager singleton
+ (void)onLoginStart;
/// Call this when the entirety of the login sequence is complete
+ (void)onLoginCompleteWithUserContext:(PEUserContext * _Nullable)userContext patientContext:(PEPatientContext * _Nullable)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext;
/// Call this to set up a new web session
+ (void)setUpSession:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext;
/// Call this when the user logs out to clean up the WebSession
+ (void)cleanUpSessionWithIsLogoutOfApp:(BOOL)isLogoutOfApp;
/// Call this when switching contexts
+ (void)onContextChanged:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext;
/// Call to get if a web session is set up
+ (BOOL)hasSessionSetUp SWIFT_WARN_UNUSED_RESULT;
/// Is the web session set up for the specified context so that we can skip jump token authentication?
+ (BOOL)canUseDirectUrl:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext :(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Encounter context for the session
+ (PEEncounterContext * _Nullable)getSessionEncounterContext SWIFT_WARN_UNUSED_RESULT;
/// Add a queue completion listener which will call back when the web session queue is empty
/// \param keepStrongReference Whether the queue should keep a weak or strong reference to the listener
///
/// \param listener listener called after the queue is empty (or has timed out)
///
+ (void)addWebSessionQueueCompleteListenerKeepingStrongReference:(BOOL)keepStrongReference :(id <WebSessionEventDelegate> _Nonnull)listener;
/// Call this to clear the manager’s state, informing it that the current user/patient context are no longer reliable, logging out of the website if currently logged in.
+ (void)clearCurrentSession;
/// Sets the current context in the manager without executing any context services with the web view
/// This is useful in the event that a web view has used a jump token to get the cookies and we want to reuse that context going forward.
+ (void)updateCurrentSession:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext;
/// Does the organization support the DirectUrl function of the WebSessionManager
+ (BOOL)isDirectUrlSupported:(PEOrganizationContext * _Nullable)organizationContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6PECore28WebSessionManagerToolTipView")
@interface WebSessionManagerToolTipView : ToolTipView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)pressedClearCookiesWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedClearManagerWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedFastKeepAliveWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedNoCacheURLSWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedClearLogoutRequestWithSender:(UIButton * _Null_unspecified)sender;
@end

@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC6PECore20WebViewConfigManager")
@interface WebViewConfigManager : NSObject
+ (WKWebViewConfiguration * _Nonnull)getSharedConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)clearCookiesForDomainOf:(NSURL * _Nullable)url callback:(void (^ _Nonnull)(void))callback;
/// Sets the cookie that tells us to load the mobile version of the webpage for the given URL
+ (void)setMobileOptimizedCookieFor:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
#ifndef PECORE_SWIFT_H
#define PECORE_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreLocation;
@import Foundation;
@import ObjectiveC;
@import UIKit;
@import WebKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="PECore",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSCoder;

/// This wrapper control enables better storyboard visibility than what would otherwise be required (a UIButton of class PKAddPassButton, which doesn’t work very well).
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore17AddToWalletButton")
@interface AddToWalletButton : UIControl
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
@end

@class PEOrganizationContext;
@class NSString;
@class UIAlertController;
@protocol PEThemeProtocol;
@class UIAlertAction;
@class NSURL;

/// Utility class for alerts (UIAlertController)
SWIFT_CLASS("_TtC6PECore10AlertUtils")
@interface AlertUtils : NSObject
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param context the current organization context
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithContext:(PEOrganizationContext * _Nullable)context title:(NSString * _Nullable)title message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param theme the current theme
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithTheme:(id <PEThemeProtocol> _Nullable)theme title:(NSString * _Nullable)title message:(NSString * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
/// Standard method for constructing an alert, implemented as an instance of UIAlertController. By default, the alert will not have any buttons.
/// \param theme the current theme
///
/// \param title the title for the alert controller
///
/// \param message the message for the alert controller
///
/// \param alwaysInLTR indicates the message is always In English so we want it to be displayed in LTR always
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeAlertControllerWithTheme:(id <PEThemeProtocol> _Nullable)theme title:(NSString * _Nullable)title message:(NSString * _Nonnull)message alwaysInLTR:(BOOL)alwaysInLTR SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController for special character validation errors.
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)makeSpecialCharacterAlertController SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController for generic web service errors.
/// \param handler completion handler to
///
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)defaultWebServiceErrorAlertControllerWithHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler SWIFT_WARN_UNUSED_RESULT;
/// Convenience method for constructing an instance of UIAlertController to display a warning to the user when a URL will be launched outside of the app, in the device browser.
/// These external URL launches occur when a web view loads a URL with a domain that is not listed as an “allowed host” by the organization.
///
/// returns:
/// An instance of UIAlertController.
+ (UIAlertController * _Nonnull)externalLaunchAlertControllerWithUrl:(NSURL * _Nonnull)url urlString:(NSString * _Nonnull)urlString SWIFT_WARN_UNUSED_RESULT;
/// Convenience method that generates an alert which will prompt the user to go to settings for the app, and also has a Don’t Allow button.
/// note:
/// This method exists as opposed to defining default value for declineButtonText so that we won’t have to provide nil for declineButtonText when calling this from objective C.
/// \param title title of the alert
///
/// \param message message of the alert
///
/// \param declineHandler additional actions that should be performed in case of user choosing to not go to settings
///
///
/// returns:
/// An instance of UIAlertController
+ (UIAlertController * _Nonnull)settingsAlertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nonnull)message declineHandler:(void (^ _Nullable)(void))declineHandler SWIFT_WARN_UNUSED_RESULT;
/// Convenience method that generates an alert which will prompt the user to go to settings for the app, and also has a Don’t Allow button.
/// \param title title of the alert
///
/// \param message message of the alert
///
/// \param declineButtonText text to use for the button that allows user to decline going to settings
///
/// \param declineHandler additional actions that should be performed in case of user choosing to not go to settings
///
///
/// returns:
/// An instance of UIAlertController
+ (UIAlertController * _Nonnull)settingsAlertControllerWithTitle:(NSString * _Nullable)title message:(NSString * _Nonnull)message declineButtonText:(NSString * _Nonnull)declineButtonText declineHandler:(void (^ _Nullable)(void))declineHandler SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSBundle;

SWIFT_CLASS("_TtC6PECore17AnimatedImageView")
@interface AnimatedImageView : UIView
/// This color will overwrite all fills and strokes in vector images
@property (nonatomic, copy) NSString * _Nullable tintColorHex;
/// Initialize with an image, bundle and optional tint color
- (nonnull instancetype)initWithImageNamed:(NSString * _Nonnull)resource in:(NSBundle * _Nonnull)bundle tintColor:(NSString * _Nullable)tint;
/// Initialize view; will need an image set later
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Initialize from IB
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the currently visible image.
/// \param resource name of animated resource, like image.svg, or static image name in xcasset
///
/// \param bundle the bundle in which to find the resource
///
- (void)setImageWithName:(NSString * _Nonnull)resource in:(NSBundle * _Nonnull)bundle;
/// Removes any visible image.
- (void)clearImage;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, ApplicationType, open) {
  ApplicationTypeMyChart = 0,
  ApplicationTypeBedisde = 1,
};

enum FeatureTrackingMetric : NSInteger;
@class SummaryLevelTargetAndCount;

/// APIs for various audit mechanisms
SWIFT_CLASS("_TtC6PECore9AuditUtil")
@interface AuditUtil : NSObject
/// Submits feature usage to the database
/// \param featureTrackingMetric Metric to log feature use to
///
/// \param summaryLevelsTargetsAndCounts optional list of more specific feature logging, like a specific summary level and count. If empty, 1 feature use is logged to the facility level
///
+ (void)logFeatureUse:(enum FeatureTrackingMetric)featureTrackingMetric summaryLevelsTargetsAndCounts:(NSArray<SummaryLevelTargetAndCount *> * _Nonnull)summaryLevelsTargetsAndCounts;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Metrics to log feature use to. Corresponds to IDN records
typedef SWIFT_ENUM(NSInteger, FeatureTrackingMetric, open) {
  FeatureTrackingMetricUnknown = -1,
/// Metric to track the number of times the user prints
  FeatureTrackingMetricMobilePrint = 320127,
/// Metric to track the number of times the user jumps to the sign up page
  FeatureTrackingMetricMobileGoToSignup = 320266,
/// Metric to track the number of times the user jumps to the login page
  FeatureTrackingMetricMobileGoToLoginPage = 320267,
/// Metric to track the number of times the user jumps to a remote org
  FeatureTrackingMetricMobileJumpToAccount = 320268,
/// Metric to track the number of basic Live Activities that are created for a user
  FeatureTrackingMetricBasicLiveActivityCreated = 320309,
/// Metric to track the number of times the user turns on “Show daily trends” for glucose graphs
  FeatureTrackingMetricShowGlucoseTrends = 81146,
/// Metric to track the number of times the user accesses the Epic Fun Facts actvitiy
  FeatureTrackingMetricEpicFunFacts = 324080,
};


SWIFT_PROTOCOL("_TtP6PECore17BaseStyleProtocol_")
@protocol BaseStyleProtocol
- (NSString * _Nonnull)getThemeStyleName SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)getAttributeNames SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getAttributeValueWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end

/// Enumeration of possible biometric authentication types
typedef SWIFT_ENUM(NSInteger, BiometricAuthenticationType, open) {
/// The biometric authentication type of the device is unknown
  BiometricAuthenticationTypeUnknown = 0,
/// The device does not support any biometric authentication type
  BiometricAuthenticationTypeNone = 1,
/// The device supports TouchID
  BiometricAuthenticationTypeTouchID = 2,
/// The device supports FaceID
  BiometricAuthenticationTypeFaceID = 3,
/// The device supports OpticID
  BiometricAuthenticationTypeOpticID = 4,
};


SWIFT_CLASS("_TtC6PECore13BiometricUtil")
@interface BiometricUtil : NSObject
/// The <code>BiometricAuthenticationType</code> supported by this device
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) enum BiometricAuthenticationType deviceBiometricAuthenticationType;)
+ (enum BiometricAuthenticationType)deviceBiometricAuthenticationType SWIFT_WARN_UNUSED_RESULT;
/// Indicates if the current device supports any biometric authentication methods (faceID, touchID)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL deviceSupportsBiometricAuthentication;)
+ (BOOL)deviceSupportsBiometricAuthentication SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore12BottomButton")
@interface BottomButton : UIButton
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

@class UIScrollView;

@interface BottomButton (SWIFT_EXTENSION(PECore)) <UIScrollViewDelegate>
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end

@class UIImage;

SWIFT_PROTOCOL("_TtP6PECore29BrandedAssetsProviderProtocol_")
@protocol BrandedAssetsProviderProtocol
/// @return websiteUrl the URL of the corresponding MyChart website (e.g. “https://server.com/MyChart/”)
- (NSString * _Nonnull)getWebsiteUrl SWIFT_WARN_UNUSED_RESULT;
/// @return The relative background image url (e.g. “en-US/images/background_mobile.png”)
- (NSString * _Nonnull)getRelativeHeaderBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// @return The relative base image directory (e.g. “en-US/images/”)
- (NSString * _Nonnull)getRelativeBaseImageDirectory SWIFT_WARN_UNUSED_RESULT;
/// @return If the environment has the Acordex License
- (BOOL)hasAcordexLicenseAsset SWIFT_WARN_UNUSED_RESULT;
/// Get the image from the local, no network calls
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// Get the image for the key, can use network calls
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
@end

enum PEBrandedColor : NSInteger;
@class UIColor;

SWIFT_PROTOCOL("_TtP6PECore28BrandedColorProviderProtocol_")
@protocol BrandedColorProviderProtocol
/// Gets a UIColor value for the specified PEBrandedColor.
/// \param color the PEBrandedColor to get a color value for
///
- (UIColor * _Nullable)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSBundle (SWIFT_EXTENSION(PECore))
/// Bundle for the PECore framework
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSBundle * _Nonnull PECore;)
+ (NSBundle * _Nonnull)PECore SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore27ButtonSandboxViewController")
@interface ButtonSandboxViewController : UIViewController
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface ButtonSandboxViewController (SWIFT_EXTENSION(PECore)) <UIScrollViewDelegate>
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


/// Source from which an image can be retrieved
SWIFT_PROTOCOL("_TtP6PECore15ImageDataSource_")
@protocol ImageDataSource
/// The URL from which the image can be loaded
@property (nonatomic, readonly, copy) NSString * _Nonnull imageURL;
@end


/// Source from which an image can be retrieved and cached. ImageLoader will automatically handle caching for objects of this type.
SWIFT_PROTOCOL("_TtP6PECore24CacheableImageDataSource_")
@protocol CacheableImageDataSource <ImageDataSource>
@end


SWIFT_PROTOCOL("_TtP6PECore17CardStyleProtocol_")
@protocol CardStyleProtocol <BaseStyleProtocol>
- (float)cornerRadius SWIFT_WARN_UNUSED_RESULT;
- (float)elevation SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)dropShadow SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)fillColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nullable)borderColor SWIFT_WARN_UNUSED_RESULT;
@end


IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore8CardView")
@interface CardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (void)layoutSubviews;
@end

typedef SWIFT_ENUM(NSInteger, CardType, open) {
  CardTypeNormal = 0,
  CardTypeTopHalf = 1,
};

typedef SWIFT_ENUM(NSInteger, CenteredMessageTextViewStyle, open) {
  CenteredMessageTextViewStyleClear = 0,
  CenteredMessageTextViewStyleGreyedOut = 1,
  CenteredMessageTextViewStyleGreyedOutLargeWhiteIndicator = 2,
};

@class UIImageView;
@class UILabel;
@protocol CommunityDataRefreshViewDelegate;
@class CommunityRefreshInfo;

IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore24CommunityDataRefreshView")
@interface CommunityDataRefreshView : UIView
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified iconView;
@property (nonatomic, weak) IBOutlet UIImageView * _Null_unspecified loadingIconView;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified titleLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified bodyLabel;
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified loadingLabel;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified updateButton;
@property (nonatomic, weak) IBOutlet UIButton * _Null_unspecified dismissButton;
@property (nonatomic) BOOL isSetup;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)prepareForInterfaceBuilder;
/// Initialize the view with title, delegate, and colors
/// \param delegate delegate to handle click event
///
- (void)setupBannerWithDelegate:(id <CommunityDataRefreshViewDelegate> _Nonnull)delegate;
/// Reset the banner in preparation of displaying new community connection information
- (void)resetBanner;
/// Update the text of the banner for the generic case
- (void)updateBannerText;
/// Update the text of the banner according to the community connections information
/// \param info the community connections information
///
- (void)updateBannerTextWithInfo:(CommunityRefreshInfo * _Nonnull)info;
@end

typedef SWIFT_ENUM(NSInteger, CommunityDataRefreshStatus, open) {
  CommunityDataRefreshStatusNORMAL = 0,
  CommunityDataRefreshStatusLOADING = 1,
  CommunityDataRefreshStatusERROR = 2,
};


SWIFT_CLASS("_TtCC6PECore24CommunityDataRefreshView20CommunityRefreshInfo")
@interface CommunityRefreshInfo : NSObject
- (nonnull instancetype)initWithSuccessOrgCount:(NSInteger)successOrgCount successOrgName:(NSString * _Nonnull)successOrgName errorOrgCount:(NSInteger)errorOrgCount errorOrgName:(NSString * _Nonnull)errorOrgName loadingOrgCount:(NSInteger)loadingOrgCount loadingOrgName:(NSString * _Nonnull)loadingOrgName canServerSupportWorkflowUpdate:(BOOL)canServerSupportWorkflowUpdate OBJC_DESIGNATED_INITIALIZER;
/// Get the community refresh status based on the connections info
///
/// returns:
/// community refresh status
- (enum CommunityDataRefreshStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore32CommunityDataRefreshViewDelegate_")
@protocol CommunityDataRefreshViewDelegate
- (void)launchRefreshView;
@end

typedef SWIFT_ENUM(NSInteger, CommunityUpdateContext, open) {
  CommunityUpdateContextALLERGIES = 0,
  CommunityUpdateContextHEALTHISSUES = 1,
  CommunityUpdateContextAPPOINTMENTS = 2,
  CommunityUpdateContextTESTRESULT = 3,
  CommunityUpdateContextMEDICATION = 4,
  CommunityUpdateContextMANAGEMYACCOUNT = 5,
};


SWIFT_CLASS("_TtC6PECore22CookieAllowListManager")
@interface CookieAllowListManager : NSObject
+ (CookieAllowListManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (void)addCookieToAllowListWithCookieName:(NSString * _Nonnull)cookieName;
- (void)removeCookieFromAllowListWithCookieName:(NSString * _Nonnull)cookieName;
- (void)clearAllCookiesFromAllowList;
- (NSSet<NSString *> * _Nonnull)getCookiesInAllowList SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class UIEvent;
@class UIGestureRecognizer;

/// This class provides an implementation of a native button that can be widely used. All buttons have a type, handle click events, and display text and/or an icon.
/// Types define most of the look-and-feel of a button. See the MyChart UX Guide for more details: https://uxguide/MyChart/components__buttons_mychart.php
/// Standard-type buttons are the most common type of button and their look-and-feel is primarily determined by their priority and tone.
/// Custom tones can be used to deviate from the standardized look-and-feel as necessary and support overrides for button color, text color, and icon color.
/// Floating-type buttons are similar to standard-type buttons, but they are intended to float at the bottom of the screen and automatically expand/collapse based on scroll events.
/// Link-type buttons are light-weight buttons with less visual emphasis. They are intended to be used for actions that are less important.
/// Shortcut-type buttons are specifically used by the shortcuts and quick-actions displayed on the MyChart home page.
SWIFT_CLASS("_TtC6PECore10CoreButton")
@interface CoreButton : UIView <UIGestureRecognizerDelegate>
/// Is the icon tinted
@property (nonatomic) IBInspectable BOOL shouldTintImage;
/// The text for the button
@property (nonatomic, copy) IBInspectable NSString * _Nonnull text;
/// Whether the button UI should be in a disabled state or not
@property (nonatomic) IBInspectable BOOL isDisabled;
/// Whether the icon should come before or after the text
@property (nonatomic) IBInspectable BOOL putIconAfterText;
/// Override for the button’s tone color
@property (nonatomic, strong) IBInspectable UIColor * _Nullable toneColorOverride;
/// Override for the button’s text color
@property (nonatomic, strong) IBInspectable UIColor * _Nullable textColorOverride;
/// Override for the button’s icon color
@property (nonatomic, strong) IBInspectable UIColor * _Nullable iconColorOverride;
/// An override for the accessibility label to be announced for the button. If not set the buttons text will be used.
@property (nonatomic, copy) NSString * _Nullable accessibilityLabel;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ScrollViewWillEndDraggingNotificationName;)
+ (NSString * _Nonnull)ScrollViewWillEndDraggingNotificationName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ScrollViewDidScrollNotificationName;)
+ (NSString * _Nonnull)ScrollViewDidScrollNotificationName SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ScrollViewKey;)
+ (NSString * _Nonnull)ScrollViewKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VelocityKey;)
+ (NSString * _Nonnull)VelocityKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TargetContentOffsetKey;)
+ (NSString * _Nonnull)TargetContentOffsetKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     imageView: An AnimatedImageView to set an animated icon
///   </li>
/// </ul>
- (void)setIconWithImageView:(AnimatedImageView * _Nonnull)imageView;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     uri: A URI to load an image from
///   </li>
///   <li>
///     shouldTintImage: Whether the image loaded from the URI should be tinted according to the buttons tone
///   </li>
/// </ul>
- (void)setIconWithUri:(NSString * _Nullable)uri shouldTintImage:(BOOL)shouldTintImage;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     iconKey: The key for an icon stored on the device
///   </li>
///   <li>
///     bundle: The bundle where the icon is located
///   </li>
/// </ul>
- (void)setIconWithIconKey:(NSString * _Nullable)iconKey bundle:(NSBundle * _Nonnull)bundle;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     image: A UIImage to set as the icon
///   </li>
/// </ul>
- (void)setIconWithImage:(UIImage * _Nullable)image;
/// Sets the icon for the button
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     image: A UIImage to set as the icon
///   </li>
/// </ul>
- (void)setIconWithImage:(UIImage * _Nullable)image shouldTintImage:(BOOL)shouldTintImage;
/// Sets an on click function for the button using a selector. Prefer the closure method and only use this if you notice memory leaks that can not be fixed within the closure.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     target: The target that the selector is owned by
///   </li>
///   <li>
///     selector: The selector to be called on click
///   </li>
/// </ul>
- (void)setOnClickWithTarget:(id _Nullable)target selector:(SEL _Nullable)selector;
/// Sets an on click function for the button using a closure. This is the preferred method over the selector method for platform parity reasons.
/// warning:
/// Selector recquires the use of weak self or will result in a memory leak
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     onClickSelector:the function to invoke when the button is clicked. This MUST use weak references if applicable to avoid retain cycles.
///   </li>
/// </ul>
- (void)setOnClick:(void (^ _Nullable)(void))onClickSelector;
/// Override touch target for button to confine to button subview
- (BOOL)pointInside:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
/// UIGestureRecognizerDelegate override to handle multiple gesture recognizer interactions
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// Helper to create userInfo object for scroll delegate of parent view controller
/// \param scrollView The scrollview from the delegate that is controlling the collapse/expand behavor of the button
///
/// \param velocity The velocity from the delegate
///
/// \param targetContentOffset The targetContentOffset from the delegate
///
///
/// returns:
/// A dictionary to be used as the UserInfo object in the notification to trigger a floating buttons collapse/expand behavior
+ (NSDictionary * _Nonnull)createUserInfoForScrollViewWillEndDraggingWithScrollView:(UIScrollView * _Nonnull)scrollView velocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset SWIFT_WARN_UNUSED_RESULT;
@end



/// This class represents a set of two buttons and coordinates the layout of those buttons based on their size and available space.
/// By default, buttons will be displayed along a horizontal axis. If there is insufficient space to display the buttons side-by-side,
/// the set will automatically switch to displaying the buttons along a vertical axis.
/// The default layout behavior of a button set can be changed through various properties, like forcing a vertical orientation.
SWIFT_CLASS("_TtC6PECore13CoreButtonSet")
@interface CoreButtonSet : UIStackView
/// Indicates whether or not the button set should be forced to vertical orientation.
/// If false (default), the button set will try to use a horizontal orientation if there is sufficient space.
@property (nonatomic) IBInspectable BOOL forceVerticalOrientation;
/// Whether the buttons in horizontal axis should be equal width
@property (nonatomic) IBInspectable BOOL equalWidth;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
/// UIView
- (void)didAddSubview:(UIView * _Nonnull)subview;
/// UIView
/// Be careful if adding any calls to layoutIfNeeded from here, as it can cause infinite loops. See DLG 2081270
- (void)layoutSubviews;
@end


/// Coordinator class for <code>CoreWebView</code> handles interactions from UIKit to SwiftUI, such as the various <code>WKNavigationDelegate</code> methods
SWIFT_CLASS("_TtC6PECore22CoreWebViewCoordinator")
@interface CoreWebViewCoordinator : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class WKWebView;
@class WKNavigationAction;
@class WKNavigation;

@interface CoreWebViewCoordinator (SWIFT_EXTENSION(PECore)) <WKNavigationDelegate>
- (void)webView:(WKWebView * _Nonnull)webView decidePolicyForNavigationAction:(WKNavigationAction * _Nonnull)navigationAction decisionHandler:(void (^ _Nonnull)(WKNavigationActionPolicy))completionHandler;
- (void)webView:(WKWebView * _Nonnull)webView didFinishNavigation:(WKNavigation * _Null_unspecified)navigation;
@end

@class WKDownload;
@class NSURLResponse;
@class NSData;

/// An implementation of <code>WKDownloadDelegate</code> for <code>CoreWebView</code> and other web views throughout the app.
/// The download manager can be assigned as the download delegate for <code>WKDownload</code> objects, and will invoke the provided callback in<code>CoreWebViewDownloadManager/init(onDownloadComplete:)</code> when the download completes.
SWIFT_CLASS("_TtC6PECore26CoreWebViewDownloadManager")
@interface CoreWebViewDownloadManager : NSObject <WKDownloadDelegate>
/// Invoked when the download needs a location to write the downloaded bytes.
/// note:
/// suggestedFilename will often be the same as response.suggestedFilename, but web content can specify the suggested download filename.  If the destination file URL is non-null, it must be a file that does not exist in a directory that does exist and can be written to.
/// \param download The download for which we need a file to which to write.
///
/// \param response The server response if this download was the result of an HTTP request, or a synthesized response for blob downloads.
///
/// \param suggestedFilename The suggested filename.
///
///
/// returns:
/// The URL pointing to a file where the download will write to, or nil if the download will be canceled
- (void)download:(WKDownload * _Nonnull)download decideDestinationUsingResponse:(NSURLResponse * _Nonnull)response suggestedFilename:(NSString * _Nonnull)suggestedFilename completionHandler:(void (^ _Nonnull)(NSURL * _Nullable))completionHandler;
/// Invoked when the download has failed.
/// \param download The download that has failed.
///
/// \param error The error indicating the failure reason.
///
/// \param resumeData This data can be passed to WKWebView resumeDownloadFromResumeData: to attempt to resume this download.
///
- (void)download:(WKDownload * _Nonnull)download didFailWithError:(NSError * _Nonnull)error resumeData:(NSData * _Nullable)resumeData;
/// Invoked when the download has finished successfully.
/// \param download The download that finished.
///
- (void)downloadDidFinish:(WKDownload * _Nonnull)download;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface NSDateFormatter (SWIFT_EXTENSION(PECore))
+ (NSDateFormatter * _Nonnull)EpicDateFormatter SWIFT_WARN_UNUSED_RESULT;
@end

@class NSDate;
enum DateFormatStyle : NSInteger;
@class NSTimeZone;
@class NSLocale;

SWIFT_CLASS("_TtC6PECore8DateUtil")
@interface DateUtil : NSObject
/// Override for getDateString() without the optional parameter, for Objective-C
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nullable)date dateStyle:(enum DateFormatStyle)style SWIFT_WARN_UNUSED_RESULT;
/// Create a displayable string from a given date and a defined format
/// <ul>
///   <li>
///     Bridges to the implementation of stringFromDate:withDateFormat: in WPUtil_Dates
///   </li>
/// </ul>
/// @param date: the date to use as the source
/// @param dateStyle: the DateFormatStyle to use for date formatting
/// @param timeZone: optional time zone override for the date formatter
/// @return the string representation of the date
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nullable)date dateStyle:(enum DateFormatStyle)style timeZone:(NSTimeZone * _Nullable)timeZone SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getDateStringFromDate:(NSDate * _Nonnull)date dateStyle:(enum DateFormatStyle)style timeZone:(NSTimeZone * _Nullable)timeZone locale:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Create a date given the defined string format
/// @param dateString: the date as a string
/// @param dateStyle: the DateFormatStyle to use for date formatting
/// @return the string representation of the date, or nil if not parse-able
+ (NSDate * _Nullable)getDateFromString:(NSString * _Nullable)dateString dateStyle:(enum DateFormatStyle)style SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Standard date formats for PE apps
typedef SWIFT_ENUM(NSInteger, DateFormatStyle, open) {
/// The hour of the day, with AM/PM if necessary
  DateFormatStyleShortHour = 0,
/// Standard time format, with AM/PM as necessary.
/// Corresponds to DateFormatter.Style.short time formatting
  DateFormatStyleShortHoursMinutes = 1,
/// Shorthand date format (like 10/25/2019)
  DateFormatStyleShortMonthDateYear = 2,
/// Shorthand date and time format (like 10/25/2019 2:45 AM)
/// Corresponds to DateFormatter.Style.short date and time formatting
  DateFormatStyleShortMonthDateYearHoursMinutes = 3,
/// Abbreviated month and date (like Oct 25)
  DateFormatStyleMediumMonthDate = 4,
/// Abbreviated month, with date and year (like Oct 25 2019)
/// Corresponds to DateFormatter.Style.medium date
  DateFormatStyleMediumMonthDateYear = 5,
/// Abbreviated month, with date, year and time (like Oct 25 2019 2:45 AM)
/// Corresponds to DateFormatter.Style.medium date and DateFormatter.Style.short time formatting
  DateFormatStyleMediumMonthDateYearHoursMinutes = 6,
/// Month and date (like October 25)
  DateFormatStyleLongMonthDate = 7,
/// Day of the week, month, and date (like Friday, October 25)
  DateFormatStyleLongDayMonthDate = 8,
/// Month, date, and year (like October 25, 2019)
/// Corresponds to DateFormatter.Style.long date
  DateFormatStyleLongMonthDateYear = 9,
/// Just the day of the week
  DateFormatStyleDay = 10,
/// Server date format. Not for human-readable text.
  DateFormatStyleServerDate = 11,
/// Server date format with time. Not for human-readable text.
  DateFormatStyleServerDateTime = 12,
/// Server date format with time and timezone. Not for human-readable text.
  DateFormatStyleServerDateTimeWithTimeZone = 13,
};

@class PEPatientContext;

SWIFT_CLASS("_TtC6PECore13DirectUrlArgs")
@interface DirectUrlArgs : NSObject
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts;
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts patientContext:(PEPatientContext * _Nullable)patientContext;
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts myChartHost:(NSString * _Nullable)myChartHost;
- (nonnull instancetype)initWithDirectUrl:(NSString * _Nonnull)directUrl allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts myChartHost:(NSString * _Nullable)myChartHost patientContext:(PEPatientContext * _Nullable)patientContext OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UITraitCollection;

/// View controller for embedded “how to” video
SWIFT_CLASS("_TtC6PECore27EmbeddedVideoViewController")
@interface EmbeddedVideoViewController : UIViewController
/// Set status bar style based on nav bar text color
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


/// Class designed to help serialize strings to base64 encrypted data
SWIFT_CLASS("_TtC6PECore14EncryptionUtil")
@interface EncryptionUtil : NSObject
/// Primary method for encrypting interconnect session tokens
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSData * _Nonnull derivedKeyMethod1;)
+ (NSData * _Nonnull)derivedKeyMethod1 SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore24ExtensibilityContextItem")
@interface ExtensibilityContextItem : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)type :(NSString * _Nonnull)name :(NSString * _Nonnull)value :(BOOL)isEncrypted OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class PEUserContext;
@class SmartStyleModel;
@class GetExtensibleLinkResponse;
@class WebServiceFailedError;

SWIFT_CLASS("_TtC6PECore32ExtensibilityLaunchWebServiceAPI")
@interface ExtensibilityLaunchWebServiceAPI : NSObject
/// Runs the extensibility web service for a patient context.  Adds additional parameters to the web service based on what is passed in.
/// \param context the current patient context
///
/// \param fdiID extensibility record
///
/// \param fdiIDEncrypted if the fdiID parameter is encrypted
///
/// \param documentID document ID
///
/// \param ltkID LTK ID
///
/// \param ltkInst LTK scheduled instant
///
/// \param ordID ORD ID
///
/// \param orgID organization ID
///
/// \param isOrgExternal Whether the organization is external
///
/// \param contextItems additional context items
///
/// \param nowEncounterCSN Now Encounter CSN
///
/// \param nowEncounterUCI Now Encounter UCI
///
/// \param smartStyle FHIR Smart Style
///
/// \param onSuccess call back when the extensibility link finshes running
///
/// \param onFailure call back if the web service fails
///
///
/// returns:
/// An instance of WebService.
+ (void)runExtensibleLinkWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext fdiID:(NSString * _Nonnull)fdiID fdiIDEncrypted:(BOOL)fdiIDEncrypted documentID:(NSString * _Nonnull)documentID ltkID:(NSString * _Nonnull)ltkID ltkInst:(NSString * _Nonnull)ltkInst ordID:(NSString * _Nonnull)ordID orgID:(NSString * _Nonnull)orgID isOrgExternal:(BOOL)isOrgExternal contextItems:(NSArray<ExtensibilityContextItem *> * _Nonnull)contextItems nowEncounterCSN:(NSString * _Nonnull)nowEncounterCSN nowEncounterUCI:(NSString * _Nonnull)nowEncounterUCI smartStyle:(SmartStyleModel * _Nullable)smartStyle onSuccess:(void (^ _Nonnull)(GetExtensibleLinkResponse * _Nullable))onSuccess onFailure:(void (^ _Nonnull)(WebServiceFailedError * _Nullable))onFailure;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, ExternalOrganizationLinkType, open) {
  ExternalOrganizationLinkTypeUndefined = 0,
  ExternalOrganizationLinkTypeMyChart = 1,
  ExternalOrganizationLinkTypeFhir = 2,
  ExternalOrganizationLinkTypeDxr = 3,
};

enum FeatureLoadStatus : NSInteger;
enum UrlType : NSInteger;
enum IDType : NSInteger;

/// This protocol helps bridge demographic information that a non-patient has, even if they don’t have a full patient record.
SWIFT_PROTOCOL("_TtP6PECore16PEPersonProtocol_")
@protocol PEPersonProtocol <NSObject>
/// Gets the FeatureLoadStatus for this patient
///
/// returns:
/// the FeatureLoadStatus of this patient
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s unique identifier (user or patient).
///
/// returns:
/// The unique identifier for this person.
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s unique encrypted identifier (user or patient).
///
/// returns:
/// The unique encrypted identifier for this person.
- (NSString * _Nonnull)getEncryptedIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Checks if a security point is present to access a given feature on behalf of the patient.
/// \param feature the feature to evaluate security for
///
///
/// returns:
/// True IFF the security point is present for the feature; False otherwise.
- (BOOL)hasSecurityPoint:(NSString * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s nickname. If a nickname hasn’t been explicitly chosen for this person, the person’s full name will be returned.
///
/// returns:
/// The nickname chosen for this person, or their full name as a fallback.
- (NSString * _Nullable)getNickname SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s nickname. If a nickname hasn’t been explicitly chosen for this person, the person’s full name will be returned.
/// \param preferRefusalName a boolean indicating whether or not a “refusal” name should be preferred
///
///
/// returns:
/// The nickname chosen for this person, or their full name as a fallback.
- (NSString * _Nullable)getNicknamePreferingRefusalName:(BOOL)preferRefusalName SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s full name.  This will either be the person’s full preferred name or, if a preferred name isn’t on file, the person’s full legal name.
///
/// returns:
/// The full name for this person.
- (NSString * _Nonnull)getFullname SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s color.  If a color hasn’t been explicitly chosen for this person, a default color will be returned.
///
/// returns:
/// The color chosen for this person, or a default color as a backup.
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s text color.  If a color hasn’t been explicitly chosen for this person, a default color will be returned.  This may be different than getColor because it will meet Accessibility standards
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
/// Gets the person’s photo.  If a photo hasn’t been explicitly set for this person and another photo isn’t already on file, conditionally, a fallback image of the person’s first initial will be returned.  The color of the fallback image will depend on the person’s color.
/// \param useFallback a boolean indicating whether or not a fallback image should be returned if the person doesn’t have a photo
///
/// \param onImageLoaded A callback for the loaded image
///
///
/// returns:
/// The photo that is loaded for this person, or, depending on parameters, a fallback image with this person’s first initial.  Show this to the user while the photo is returned via the callback
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
/// Gets the URL to use for web service requests that return data for the person. May return nil to indicate that the default URL for web service requests should be used.
/// \param urlType the type of URL that is being requested
///
///
/// returns:
/// The URL to use for web service requests that return data for the person, or nil to use a default URL.
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
/// Gets the account ID type for this person.
///
/// returns:
/// Account ID type corresponding to the IDType enum
- (enum IDType)getAccountIdType SWIFT_WARN_UNUSED_RESULT;
/// Updates the persons’s nickname.
/// \param nickname the new nickname for this person
///
- (void)updateNickname:(NSString * _Nullable)nickname;
/// Updates the index of the person’s color in the set of colors for people.
/// \param colorIndex the new index of a color for this person (1-7)
///
- (void)updateColorIndex:(NSInteger)colorIndex;
/// Updates the person’s photo.
/// \param photo the new photo for this person
///
- (void)updatePhoto:(UIImage * _Nullable)photo;
@end


SWIFT_CLASS("_TtC6PECore17FakeUIImagePerson")
@interface FakeUIImagePerson : NSObject <PEPersonProtocol>
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
- (enum IDType)getAccountIdType SWIFT_WARN_UNUSED_RESULT;
- (void)updateNickname:(NSString * _Nullable)nickname;
- (void)updateColorIndex:(NSInteger)colorIndex;
- (void)updatePhoto:(UIImage * _Nullable)photo;
- (enum FeatureLoadStatus)getFeatureLoadStatus SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEncryptedIdentifier SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasSecurityPoint:(NSString * _Nonnull)feature SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getNickname SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getNicknamePreferingRefusalName:(BOOL)preferRefusalName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getFullname SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getColor SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)getTextColor SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoOnImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (UIImage * _Nullable)getPhotoWithUseFallback:(BOOL)useFallback onImageLoaded:(void (^ _Nullable)(id <PEPersonProtocol> _Nonnull, UIImage * _Nullable))onImageLoaded SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// The FeatureLoadStatus of a patient is the loading status of features retrieved over H2G
typedef SWIFT_ENUM(NSInteger, FeatureLoadStatus, open) {
/// A FeatureLoadStatus was not received. Mainly handles version skew for servers that don’t support H2G-ized features. Essentially corresponds to FullyLoaded in those cases.
  FeatureLoadStatusUnknown = 0,
/// Features from at least one organization were retrieved for this patient, and H2G is no longer listening for more organizations.
  FeatureLoadStatusFullyLoaded = 1,
/// Features from at least one organization were retrieved for this patient, and H2G is still listening for more organizations.
  FeatureLoadStatusPartiallyLoaded = 2,
/// No features from external organizations were retrieved for this patient, but H2G is still listening for more organizations.
  FeatureLoadStatusLoading = 3,
/// No features from external organizations were retrieved for this patient, and H2G is no longer listening for more organizations.
  FeatureLoadStatusFailed = 4,
};

enum FileType : NSInteger;

SWIFT_CLASS("_TtC6PECore8FileUtil")
@interface FileUtil : NSObject
/// Prefix for URLs corresponding to a file saved in device storage
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FileURLPrefix;)
+ (NSString * _Nonnull)FileURLPrefix SWIFT_WARN_UNUSED_RESULT;
/// Get path for directory in String format
+ (NSString * _Nonnull)getPathForFileType:(enum FileType)fileType SWIFT_WARN_UNUSED_RESULT;
/// Clears the inbox directory & subdirectories of files.
/// Used to clean up files copied over when other apps share to MyChart.
+ (void)clearInboxDirectory;
/// Clears any immediate files inside the directory with the option to clear subdirectories.
+ (void)clearFilesInDirectoryWithDir:(NSString * _Nonnull)dir withSubDirectories:(BOOL)clearSubDirs;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, FileType, open) {
/// Permanent storage folder. Never wiped
/// Used for:
/// <ul>
///   <li>
///     Nothing so far
///   </li>
/// </ul>
  FileTypeDocumentDirectory = 0,
/// Inbox folder to receive files shared to the app. Subfolder of NSDocumentDirectory
/// Inbox is wiped after certain workflows and during logout
/// NOTE: Can read and delete files. Can not write or create new files.
/// Used for:
/// <ul>
///   <li>
///     Apple Health PDFs
///   </li>
/// </ul>
  FileTypeInboxDirectory = 1,
/// Permanent App-data folder to store app-related files never exposed to the user.
/// Subfolder of NSLibraryDirectory. Never wiped.
/// NOTE: This references the MyChart subfolder per Apple docs for app usage
/// Used for:
/// <ul>
///   <li>
///     Phonebook caching
///   </li>
/// </ul>
  FileTypeApplicationSupportDirectory = 2,
/// Temporary storage folder. Wiped after certain workflows, during login/logout, and by iOS
/// Used for:
/// <ul>
///   <li>
///     Loading Video documents / attachments
///   </li>
///   <li>
///     Sharing documents / attachments
///   </li>
///   <li>
///     Newly taken videos
///   </li>
/// </ul>
  FileTypeTemporaryDirectory = 3,
};

typedef SWIFT_ENUM(NSInteger, FontRamp, open) {
  FontRampDisplay = 0,
  FontRampH1 = 1,
  FontRampH2 = 2,
  FontRampH3 = 3,
  FontRampH4 = 4,
  FontRampBody = 5,
  FontRampSubtle = 6,
  FontRampLink = 7,
};

typedef SWIFT_ENUM(NSInteger, FontWeight, open) {
  FontWeightRegular = 0,
  FontWeightSemiBold = 1,
};

enum LaunchMode : NSInteger;

SWIFT_CLASS("_TtC6PECore25GetExtensibleLinkResponse")
@interface GetExtensibleLinkResponse : NSObject
@property (nonatomic, copy) NSString * _Nullable url;
@property (nonatomic) enum LaunchMode launchMode;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull allowedHosts;
@property (nonatomic, copy) NSString * _Nullable appStoreUrl;
@property (nonatomic, readonly) BOOL isWebRTC;
@end


SWIFT_CLASS("_TtC6PECore16GifAnimationView")
@interface GifAnimationView : UIView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class MyChartUILabel;

/// Standard banner class for H2G orgs that have failed to load for an activity
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore18H2GErrorBannerView")
@interface H2GErrorBannerView : UIView
/// Set this label to the banner text you want to appear next to the icon
@property (nonatomic, weak) IBOutlet MyChartUILabel * _Null_unspecified textLabel;
/// overriden to auto-shrink for vertical constaints and suppose accessibility
@property (nonatomic, getter=isHidden) BOOL hidden;
/// create in code
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
/// create from nib
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// render in IB
- (void)prepareForInterfaceBuilder;
@end


@interface H2GErrorBannerView (SWIFT_EXTENSION(PECore)) <UIGestureRecognizerDelegate>
/// Do not fire container view’s tap recognizer if delete is the tapped target.
- (BOOL)gestureRecognizerShouldBegin:(UIGestureRecognizer * _Nonnull)gestureRecognizer SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PEH2GOrgPopupComponentAPIProtocol;

/// Listener for taps to the H2G error banner
SWIFT_PROTOCOL("_TtP6PECore26H2GErrorBannerViewDelegate_")
@protocol H2GErrorBannerViewDelegate
/// Alerts the controller that the user has tapped the H2G banner
/// \param popupComponent the standard popupComponent that can show the details popup
///
- (void)didTapH2GBannerWithPopupComponent:(id <PEH2GOrgPopupComponentAPIProtocol> _Nonnull)popupComponent;
@optional
/// Callback to inform client that the user tapped the close button
- (void)didCloseH2GBanner;
@end

/// The type of overlay to initialize the homepage with
typedef SWIFT_ENUM(NSInteger, HomepageOverlayType, open) {
  HomepageOverlayTypeNone = 0,
  HomepageOverlayTypeUseDefaultLogic = 1,
  HomepageOverlayTypeProxySplashScreen = 2,
  HomepageOverlayTypeOnboardingScreen = 3,
};


SWIFT_CLASS("_TtC6PECore23HttpHeaderFieldsManager")
@interface HttpHeaderFieldsManager : NSObject
+ (HttpHeaderFieldsManager * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (BOOL)setHttpHeaderField:(NSString * _Nonnull)field withValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (void)removeHttpHeaderField:(NSString * _Nonnull)field;
- (void)removeAllHttpHeaderFields;
- (NSDictionary<NSString *, NSString *> * _Nonnull)getAllHttpHeaderFields SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isHttpHeaderFieldAllowed:(NSString * _Nonnull)field SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate for handling bottom button expansion/shrinkage animation
SWIFT_PROTOCOL("_TtP6PECore30IBottomButtonAnimationDelegate_")
@protocol IBottomButtonAnimationDelegate
/// Get the current width of the enclosing view - for expanded frame drawing
- (CGFloat)getEnclosingViewWidth SWIFT_WARN_UNUSED_RESULT;
/// Get the current leading constraint constant - for expanded frame drawing
- (CGFloat)getLeadingConstraintConstant SWIFT_WARN_UNUSED_RESULT;
/// Notify enclosing view that button height has been changed
- (void)buttonHeightChangedWithNewHeight:(CGFloat)newHeight;
/// Have enclosing view handle leading and width constraints when expanded
- (void)switchToExpandedConstraints;
/// Have enclosing view handle leading and width constraints when shrunk
- (void)switchToShrunkConstraints;
@end

/// Models IC’s PatientAccessService.IDType
typedef SWIFT_ENUM(NSInteger, IDType, open) {
/// IDType can’t be determined.
  IDTypeUnknown = 0,
/// ID is internal. EPT for patient ID and WPR ID for account ID.
  IDTypeInternalId = 1,
/// Community ID. Used for Intraconnect.
  IDTypeCID = 2,
/// No IDType.
  IDTypeNone = 3,
/// Relationship ID. Used by remote proxy subjects. Account ID is Rel ID, no patient ID exists.
  IDTypeRelId = 4,
};

@class PELocale;

/// Retrieves the user-preferred languages set on this device
SWIFT_CLASS("_TtC6PECore23IOSDeviceLocaleSettings")
@interface IOSDeviceLocaleSettings : NSObject
- (NSArray<PELocale *> * _Nonnull)readLocales SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore19IOnboardingDelegate_")
@protocol IOnboardingDelegate
/// Signal that onboarding has been dismissed
- (void)onboardingDismissedWithActionCompleted:(BOOL)onboardingActionCompleted;
@end


SWIFT_PROTOCOL("_TtP6PECore29IOnboardingNavigationDelegate_")
@protocol IOnboardingNavigationDelegate
/// Action button was tapped
- (void)actionTapped;
/// Back button was tapped
- (void)backTapped;
/// Next button was tapped
- (void)nextTapped;
/// Play button was tapped
- (void)playTapped;
@end


@protocol ImageLoaderDelegate;

/// Utility to load images with special handling for cacheable and provider images
SWIFT_CLASS("_TtC6PECore11ImageLoader")
@interface ImageLoader : NSObject
/// Checks that an image source is valid and that we have never failed to load it
/// \param source The image source to validate
///
///
/// returns:
/// True if the image source is valid
+ (BOOL)canLoadImageWithSource:(id <ImageDataSource> _Nullable)source SWIFT_WARN_UNUSED_RESULT;
/// Checks that an image source is valid and that we have never failed to load it
/// \param source The image source to validate
///
/// \param context Patient context is only required for provider blob photos
///
///
/// returns:
/// True if the image source is valid
+ (BOOL)canLoadImageWithSource:(id <ImageDataSource> _Nullable)source andPatientContext:(PEPatientContext * _Nullable)context SWIFT_WARN_UNUSED_RESULT;
/// Attempts to load an image from the specified image source
/// \param source The image source for which to load an image
///
/// \param delegate Delegate to be called when the load succeeds or fails
///
/// \param context Patient context is only required for provider blob photos
///
+ (void)loadImageWithSource:(id <ImageDataSource> _Nullable)source delegate:(id <ImageLoaderDelegate> _Nonnull)delegate;
/// Attempts to load an image from the specified image source
/// \param source The image source for which to load an image
///
/// \param delegate Delegate to be called when the load succeeds or fails
///
/// \param context Patient context is only required for provider blob photos
///
+ (void)loadImageWithSource:(id <ImageDataSource> _Nullable)source delegate:(id <ImageLoaderDelegate> _Nonnull)delegate andPatientContext:(PEPatientContext * _Nullable)context;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Delegate for handling image loading successes and failures
SWIFT_PROTOCOL("_TtP6PECore19ImageLoaderDelegate_")
@protocol ImageLoaderDelegate
/// Handler for when an image successfully loads
/// \param image The image that loaded
///
/// \param source The source for which this image loaded
///
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
/// Handler for when an image fails to load
/// \param source The source for which image loading failed
///
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end


/// Utilities related to images.
SWIFT_CLASS("_TtC6PECore9ImageUtil")
@interface ImageUtil : NSObject
/// Helper metehod to combine an organization’s brand logo with the “MyChart is Epic” image
/// \param brandLogoImage org logo
///
///
/// returns:
/// combined image, or the org logo if there were issues loading/combining the images
+ (UIImage * _Nonnull)combineEpicLogoWithBrandLogo:(UIImage * _Nonnull)brandLogoImage SWIFT_WARN_UNUSED_RESULT;
/// Helper method to set an org logo into an icon view, or fall back to a default org logo on failure
/// \param logoUrl the url of the organization logo
///
/// \param orgIconView the view to set the logo image into
///
+ (void)loadOrgLogoWithLogoUrl:(NSString * _Nonnull)logoUrl orgIconView:(UIView * _Nonnull)orgIconView;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSMutableArray;
enum InlineEducationType : NSInteger;
@protocol PEPatientProtocol;

SWIFT_CLASS("_TtC6PECore30InlineEducationContextProvider")
@interface InlineEducationContextProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (InlineEducationContextProvider * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
/// Populate util instance with an array of available education content contexts
/// \param contextIds NSMutableArray
///
- (void)setAvailableContextsFor:(NSMutableArray * _Nonnull)contextIds;
/// Check if a given Inline Education context is supported by the server (has FDI record configured)
/// \param educationType InlineEducationType
///
- (BOOL)isContextAvailableFor:(enum InlineEducationType)educationType SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)hasSecurityPointForContextWithEducationType:(enum InlineEducationType)educationType patient:(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// Remove all contexts between session
+ (void)resetContextState;
@end


SWIFT_PROTOCOL("_TtP6PECore29InlineEducationSourceProtocol_")
@protocol InlineEducationSourceProtocol
/// Indicates whether we’ve set up I WDF 96033 for the corresponding InlineEducationType (WDF 96031)
- (BOOL)hasInlineEducationSource SWIFT_WARN_UNUSED_RESULT;
/// Returns InlineEducationType (I WDF 96031)
- (enum InlineEducationType)getInlineEducationContext SWIFT_WARN_UNUSED_RESULT;
/// Generally returns the model record ID, used to resolve mnemonics in the FDI
- (NSString * _Nonnull)getInlineEducationContextID SWIFT_WARN_UNUSED_RESULT;
/// Return a search keyword - used for H2G records or fallback only
- (NSString * _Nonnull)getInlineEducationSearchTerm SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, InlineEducationType, open) {
  InlineEducationTypeDiagnoses = 1,
  InlineEducationTypeMedications = 2,
  InlineEducationTypeSurgicalProcedures = 3,
  InlineEducationTypeLabResults = 4,
  InlineEducationTypeAllergies = 5,
  InlineEducationTypeImmunizations = 6,
  InlineEducationTypeKeyword_Diagnoses = 7,
  InlineEducationTypeKeyword_LabResults = 8,
  InlineEducationTypeAppointmentProcedures = -1,
};

@protocol PEComponentHostProtocol;
@class PEEncounterContext;

/// Inline Education Infobutton
SWIFT_CLASS("_TtC6PECore19InlineEducationView")
@interface InlineEducationView : UIImageView
- (BOOL)setInlineEducationSourceWithSource:(id <InlineEducationSourceProtocol> _Null_unspecified)source componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost patientContext:(PEPatientContext * _Nullable)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext hostVC:(UIViewController * _Nullable)hostVC onShowLoadingIndicator:(void (^ _Nonnull)(void))onShowLoadingIndicator onHideLoadingIndicator:(void (^ _Nonnull)(void))onHideLoadingIndicator SWIFT_WARN_UNUSED_RESULT;
- (void)onInlineEducationViewClick;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)getAccessibilityString SWIFT_WARN_UNUSED_RESULT;
@end

enum TextAlignment : NSInteger;

SWIFT_CLASS("_TtC6PECore8Language")
@interface Language : NSObject
@property (nonatomic, copy) NSString * _Nonnull code;
@property (nonatomic) enum TextAlignment textAlignment;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, LaunchMode, open) {
  LaunchModeLaunchInternal = 1,
  LaunchModeLaunchExternal = 2,
  LaunchModeLaunchExternalTab = 3,
};

@class PELiveModel;

SWIFT_PROTOCOL("_TtP6PECore15LiveModelHolder_")
@protocol LiveModelHolder
- (PELiveModel * _Nullable)getLiveModel SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore20LoadingIndicatorView")
@interface LoadingIndicatorView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
+ (LoadingIndicatorView * _Nonnull)getNewLoadingIndicator:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
/// Create a full screen loading indicator
/// \param view The view to grab the topmost superview from
///
///
/// returns:
/// a full screen LoadingIndicator view
+ (LoadingIndicatorView * _Nonnull)getNewFullScreenLoadingIndicator:(UIView * _Nonnull)view SWIFT_WARN_UNUSED_RESULT;
- (void)didMoveToSuperview;
- (void)showMessage:(enum CenteredMessageTextViewStyle)style :(NSString * _Nullable)msg :(BOOL)isTxtMode;
/// Hide the loading text and only show the loading indicator when the view is visible.
- (void)removeLoadingText;
@end


/// Simple class that loads the locale settings from both the device settings and the Epic settings and chooses the locale to use for CurrentLocale.
SWIFT_CLASS("_TtC6PECore14LocaleSettings")
@interface LocaleSettings : NSObject
@property (nonatomic, strong) PELocale * _Nonnull currentLocale;
@property (nonatomic, strong) PELocale * _Nonnull defaultLocale;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIPanGestureRecognizer;

SWIFT_CLASS("_TtC6PECore11ToolTipView")
@interface ToolTipView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)handleTap:(UIPanGestureRecognizer * _Nonnull)sender;
@end


SWIFT_CLASS("_TtC6PECore18LocalesToolTipView")
@interface LocalesToolTipView : ToolTipView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, MidLoginOnboardingStep, open) {
  MidLoginOnboardingStepTwoFactorEnrollment = 0,
  MidLoginOnboardingStepRequiredPasswordReset = 1,
  MidLoginOnboardingStepOrgTermsAndConditions = 2,
  MidLoginOnboardingStepSecondaryLoginSetup = 3,
  MidLoginOnboardingStepHomePageWelcome = 4,
  MidLoginOnboardingStepSelfSubmittedPushNotificationsSetup = 5,
};


/// The standard UIKit view for a “card” that groups related content together.
SWIFT_CLASS("_TtC6PECore15MyChartCardView")
@interface MyChartCardView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartWebArgs;
@class MyChartWebViewControllerManager;
enum ButtonStyle : NSInteger;
@class NSNotification;

/// WebView Controller used to log into MyChart or open an external web view. Corresponds to MyChartWebViewFragment in java.
SWIFT_CLASS("_TtC6PECore24MyChartWebViewController")
@interface MyChartWebViewController : UIViewController
/// Show user in tiltle bar Key
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull kWPKeyShowUserInfoInTitleBar;)
+ (NSString * _Nonnull)kWPKeyShowUserInfoInTitleBar SWIFT_WARN_UNUSED_RESULT;
/// Skips manual session maintenance when the view deinits
@property (nonatomic) BOOL skipSessionMaintenance;
/// Get a new viewController from the storyboard and set up the web view. Defaults to no close button and showing the back button.
/// \param webViewArgs Args that you want the web view to use
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
/// \param shouldHideComponentHostEpicLogo Whether the componet host should hide Epic logo in the nav bar
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed shouldHideComponentHostEpicLogo:(BOOL)shouldHideComponentHostEpicLogo SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
/// \param shouldHideComponentHostEpicLogo Whether the componet host should hide Epic logo in the nav bar
///
/// \param shouldRefreshWebViews Whether any other webviews should be refreshed when this webview is closed
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed shouldHideComponentHostEpicLogo:(BOOL)shouldHideComponentHostEpicLogo shouldRefreshWebViews:(BOOL)shouldRefreshWebViews SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view.
/// \param webViewArgs Args for the web view to use while logging in.
///
/// \param manager Manager to controll what pages the client goes to and handles opening and closing.
///
/// \param title Title for the web view
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
/// \param shouldRefreshAlertsAndHomePageFeed Whether the cached alerts/HPR feed cards should be refreshed when this webview is closed
///
/// \param shouldHideComponentHostEpicLogo Whether the componet host should hide Epic logo in the nav bar
///
/// \param shouldRefreshWebViews Whether any other webviews should be refreshed when this webview is closed
///
/// \param shouldConstrainToKeyboard Determines where we are implementing native keyboard tracking features in this viewController
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithWebViewArgs:(MyChartWebArgs * _Nullable)webViewArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton queryParameters:(NSDictionary<NSString *, NSString *> * _Nullable)queryParameters shouldRefreshAlertsAndHomePageFeed:(BOOL)shouldRefreshAlertsAndHomePageFeed shouldHideComponentHostEpicLogo:(BOOL)shouldHideComponentHostEpicLogo shouldRefreshWebViews:(BOOL)shouldRefreshWebViews shouldConstrainToKeyboard:(BOOL)shouldConstrainToKeyboard SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view using a Url. (Use for opening allowed-host, non-MyChart links in this fragment)
/// \param directUrlArgs Args for initializing directly via a url instead a mode
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs SWIFT_WARN_UNUSED_RESULT;
/// Get a new viewController from the storyboard and set up the web view using a Url. (Use for opening allowed-host, non-MyChart links in this fragment)
/// \param directUrlArgs Args for initializing directly via a url instead a mode
///
/// \param buttonStyle Style of button to be used in the top right hand while the webview is open.
///
/// \param showBackButton Whether or not the back button should be shown while the webview is open.
///
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton SWIFT_WARN_UNUSED_RESULT;
+ (MyChartWebViewController * _Nonnull)newInstanceWithDirectUrlArgs:(DirectUrlArgs * _Nonnull)directUrlArgs manager:(MyChartWebViewControllerManager * _Nullable)manager title:(NSString * _Nullable)title buttonStyle:(enum ButtonStyle)buttonStyle showBackButton:(BOOL)showBackButton disableJavascriptCommunication:(BOOL)disableJavascriptCommunication SWIFT_WARN_UNUSED_RESULT;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
/// Sets if we should be listening for a refresh on the web page for any reason
- (void)setRefreshNotification;
/// Reload the web view.
- (void)reload;
/// The javascript function to execute before naivgate away from the current MO activity
- (void)onNavigateAway;
/// Pass incoming notification to manager for handling
/// \param notification notification
///
- (void)didReceiveNotifications:(NSNotification * _Nonnull)notification;
- (void)cancelAndClose;
/// Back button handler
- (void)didTapBackButton;
/// Close button handler
- (void)didTapCloseButton;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum for controlling the functionality of the close button
typedef SWIFT_ENUM(NSInteger, ButtonStyle, open) {
/// No close button shown to the user
  ButtonStyleNone = 0,
/// When attempting to close via close button, the web view will NOT try and save before closing
  ButtonStyleClose = 1,
/// When attempting to close via close button, the web view will try and save before closing
  ButtonStyleFinishLater = 2,
};

@class WKNavigationResponse;

/// Web view controller for the MyChart Central v1 Homepage
SWIFT_CLASS("_TtC6PECore39MyChartCentralHomepageWebViewController")
@interface MyChartCentralHomepageWebViewController : MyChartWebViewController
- (void)viewWillAppear:(BOOL)animated;
- (BOOL)shouldOverrideUrlResponseBehaviorFor:(WKNavigationResponse * _Nonnull)navigationResponse SWIFT_WARN_UNUSED_RESULT;
- (void)onPageStartedWithUrl:(NSURL * _Nonnull)url;
- (void)onPageFinishedWithUrl:(NSURL * _Nonnull)url;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// This manager handles events from the MyChartWebViewController. This manager is inteneded to be subclassed for a MO activity and have the necessary functions overriden to handle events important to the specific activity.
/// This manager super class is meant to serve general functionality for all or most of the MO activities. If functionality is needed that will be used by most other activities, it should be added here or in the MyChartWebViewController. However, functionality that is needed for a specific activity, it should be handled in a subclass of this manager that is specific to that activity.
/// Corresponds to MyChartWebViewFragmentManager in Java.
SWIFT_CLASS("_TtC6PECore31MyChartWebViewControllerManager")
@interface MyChartWebViewControllerManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Web view controller manager for the MyChart Central v1 Homepage
SWIFT_CLASS("_TtC6PECore46MyChartCentralHomepageWebViewControllerManager")
@interface MyChartCentralHomepageWebViewControllerManager : MyChartWebViewControllerManager
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore24MyChartJavascriptManager")
@interface MyChartJavascriptManager : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore25MyChartJavascriptProtocol_")
@protocol MyChartJavascriptProtocol
- (void)onJavascriptRequestsClose;
- (void)resetIdleTimer;
/// Called by javascript to hide or show the close button on a component popup web view
- (void)disableCloseButton;
- (void)reenableCloseButton;
/// Called by javascript to set the title for the webview. Used to change the title of the webview for multi-step MO workflows
/// \param title The title for the webview
///
- (void)setWebViewTitleWithNewTitle:(NSString * _Nonnull)newTitle;
- (void)locationHandler;
- (void)setWebViewStateChangedWithStateMessage:(NSString * _Nonnull)stateMessage;
- (void)setSearchBarInputValueWithQuery:(NSString * _Nonnull)query;
- (void)focusSearchBarInput;
- (void)onEpicPxMobileIntegrationReady;
@end


/// An IBDesignable UIView that loads from its own XIB
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore15SelfLoadingView")
@interface SelfLoadingView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class UITextField;

/// The standard UIKit view for entering/editing text in MyChart.
SWIFT_CLASS("_TtC6PECore20MyChartTextFieldView")
@interface MyChartTextFieldView : SelfLoadingView
@property (nonatomic, weak) IBOutlet UIView * _Null_unspecified backgroundView;
@property (nonatomic, weak) IBOutlet UITextField * _Null_unspecified textField;
- (nonnull instancetype)initWithHint:(NSString * _Nullable)hint startingValue:(NSString * _Nullable)startingValue OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

@class UITextView;
@class UIFont;

/// The standard UIKit view for displaying text in MyChart.
SWIFT_CLASS("_TtC6PECore14MyChartUILabel")
@interface MyChartUILabel : UILabel
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Set the font ramp for this MyChartUILabel.
- (void)setFontRampWithFontRamp:(enum FontRamp)fontRamp;
/// Helper method to apply the text style, based on the provided font ramp, to a UILabel.
+ (void)applyFontRampToLabelWithUiLabel:(UILabel * _Nonnull)uiLabel fontRamp:(enum FontRamp)fontRamp;
/// Helper method to apply the text style, based on the provided font ramp, to a UITextView.
+ (void)applyFontRampToTextViewWithUiTextView:(UITextView * _Nonnull)uiTextView fontRamp:(enum FontRamp)fontRamp;
/// Converts the provided font ramp to a UIFont.
+ (UIFont * _Nonnull)getCustomFontWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
@end

@protocol WKScriptMessageHandler;
@protocol WKScriptMessageHandlerWithReply;
@class WKContentWorld;

/// Use this for WKUserContentControllers to avoid memory leaks caused by script message handlers
/// See this stack overflow for more information:
/// https://stackoverflow.com/questions/26383031/wkwebview-causes-my-view-controller-to-leak
SWIFT_CLASS("_TtC6PECore28MyChartUserContentController")
@interface MyChartUserContentController : WKUserContentController
- (void)addScriptMessageHandler:(id <WKScriptMessageHandler> _Nonnull)scriptMessageHandler name:(NSString * _Nonnull)name;
- (void)addScriptMessageHandlerWithReply:(id <WKScriptMessageHandlerWithReply> _Nonnull)scriptMessageHandlerWithReply contentWorld:(WKContentWorld * _Nonnull)contentWorld name:(NSString * _Nonnull)name;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class MyChartWebParameter;
@protocol PEOrganizationInfoProtocol;

/// Contains a collection of parameters needed to generate a valid MO url link by the server
SWIFT_CLASS("_TtC6PECore14MyChartWebArgs")
@interface MyChartWebArgs : NSObject
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters;
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters organization:(id <PEOrganizationInfoProtocol> _Nullable)organization;
- (nonnull instancetype)initWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nullable)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext mode:(NSString * _Nonnull)mode parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters organization:(id <PEOrganizationInfoProtocol> _Nullable)organization OBJC_DESIGNATED_INITIALIZER;
/// \param baseArgs Args to copy all of the properties from, except parameters
///
/// \param parameters Parameters to use with the new args
/// Create a new object copying all of the parameters from baseArgs, except using the new parameters
///
- (nonnull instancetype)initWithBaseArgs:(MyChartWebArgs * _Nonnull)baseArgs parameters:(NSArray<MyChartWebParameter *> * _Nullable)parameters OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A web query parameter set  stored as a key value pair
SWIFT_CLASS("_TtC6PECore19MyChartWebParameter")
@interface MyChartWebParameter : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)name :(NSString * _Nonnull)value OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6PECore25MyChartWebQueryParameters")
@interface MyChartWebQueryParameters : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ActionKey;)
+ (NSString * _Nonnull)ActionKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AllowedReasonForVisitKey;)
+ (NSString * _Nonnull)AllowedReasonForVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ApptCountKey;)
+ (NSString * _Nonnull)ApptCountKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ApptReferenceIdKey;)
+ (NSString * _Nonnull)ApptReferenceIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CampaignIdKey;)
+ (NSString * _Nonnull)CampaignIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CanDirectScheduleKey;)
+ (NSString * _Nonnull)CanDirectScheduleKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ContextKey;)
+ (NSString * _Nonnull)ContextKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CsnKey;)
+ (NSString * _Nonnull)CsnKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CsnIsEncryptedKey;)
+ (NSString * _Nonnull)CsnIsEncryptedKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CustomModeKey;)
+ (NSString * _Nonnull)CustomModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DxoIdKey;)
+ (NSString * _Nonnull)DxoIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ECheckInConfirmKey;)
+ (NSString * _Nonnull)ECheckInConfirmKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ECsnKey;)
+ (NSString * _Nonnull)ECsnKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HideReasonForVisitStepKey;)
+ (NSString * _Nonnull)HideReasonForVisitStepKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HideTabsKey;)
+ (NSString * _Nonnull)HideTabsKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HMDontEncryptTopicKey;)
+ (NSString * _Nonnull)HMDontEncryptTopicKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HMTopicIDKey;)
+ (NSString * _Nonnull)HMTopicIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IdKey;)
+ (NSString * _Nonnull)IdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsEVisitKey;)
+ (NSString * _Nonnull)IsEVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IsXorgFeatureAvailableKey;)
+ (NSString * _Nonnull)IsXorgFeatureAvailableKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LtkIdKey;)
+ (NSString * _Nonnull)LtkIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LtkInstantKey;)
+ (NSString * _Nonnull)LtkInstantKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MedRefillModeKey;)
+ (NSString * _Nonnull)MedRefillModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MessageIdKey;)
+ (NSString * _Nonnull)MessageIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ModeKey;)
+ (NSString * _Nonnull)ModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOWorkflowKey;)
+ (NSString * _Nonnull)MOWorkflowKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NowEncounterCSN;)
+ (NSString * _Nonnull)NowEncounterCSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NowEncounterUCI;)
+ (NSString * _Nonnull)NowEncounterUCI SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PostLoginUrlKey;)
+ (NSString * _Nonnull)PostLoginUrlKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PrescriptionIDKey;)
+ (NSString * _Nonnull)PrescriptionIDKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ProviderBioKey;)
+ (NSString * _Nonnull)ProviderBioKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ProviderIdKey;)
+ (NSString * _Nonnull)ProviderIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ReasonForVisitKey;)
+ (NSString * _Nonnull)ReasonForVisitKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SchedulingTicketIdKey;)
+ (NSString * _Nonnull)SchedulingTicketIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SkipMobileLogoutKey;)
+ (NSString * _Nonnull)SkipMobileLogoutKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull StatusKey;)
+ (NSString * _Nonnull)StatusKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SourceRouteKey;)
+ (NSString * _Nonnull)SourceRouteKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SubModeKey;)
+ (NSString * _Nonnull)SubModeKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SuggestedTasksKey;)
+ (NSString * _Nonnull)SuggestedTasksKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SupportsMobileBannerLinksKey;)
+ (NSString * _Nonnull)SupportsMobileBannerLinksKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TaskIdKey;)
+ (NSString * _Nonnull)TaskIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TicketIdKey;)
+ (NSString * _Nonnull)TicketIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TokenKey;)
+ (NSString * _Nonnull)TokenKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TreeIdKey;)
+ (NSString * _Nonnull)TreeIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UrlKey;)
+ (NSString * _Nonnull)UrlKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WorkflowKey;)
+ (NSString * _Nonnull)WorkflowKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WorkflowCompleteKey;)
+ (NSString * _Nonnull)WorkflowCompleteKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull XOrgIdKey;)
+ (NSString * _Nonnull)XOrgIdKey SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TicklerMethod;)
+ (NSString * _Nonnull)TicklerMethod SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EOrgIdKey;)
+ (NSString * _Nonnull)EOrgIdKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class CLLocationManager;
@class CLLocation;

/// Custom CLLocationManagerDelegate to be used in WebViews so that we can handle location requests natively
SWIFT_CLASS("_TtC6PECore39MyChartWebViewCLLocationManagerDelegate")
@interface MyChartWebViewCLLocationManagerDelegate : NSObject <CLLocationManagerDelegate>
/// Location manager event when the location has changed.
/// \param manager Location manager object
///
/// \param locations Array of location objects containing lat / long
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didUpdateLocations:(NSArray<CLLocation *> * _Nonnull)locations;
/// Location manager event when the location couldn’t be retrieved, sending that response to the site.
/// \param manager Location manager object
///
/// \param error Error object / reason
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didFailWithError:(NSError * _Nonnull)error;
/// Location manager event when the app level location permission changes, setting the current location if previously denied.
/// \param manager Location manager object
///
/// \param status Previous authorization status
///
- (void)locationManager:(CLLocationManager * _Nonnull)manager didChangeAuthorizationStatus:(CLAuthorizationStatus)status;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// A ViewController can launch a deep link
SWIFT_PROTOCOL("_TtP6PECore28PEDeepLinkLaunchableProtocol_")
@protocol PEDeepLinkLaunchableProtocol
/// Set the deep link  parameters dictionary to the  ViewController
- (void)setDeepLinkLaunchParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)deepLinkLaunchParameters;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <PEDeepLinkLaunchableProtocol>
- (void)setDeepLinkLaunchParameters:(NSDictionary<NSString *, NSString *> * _Nonnull)deepLinkLaunchParameters;
@end

@class WKScriptMessage;

@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WKScriptMessageHandlerWithReply>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message replyHandler:(void (^ _Nonnull)(id _Nullable, NSString * _Nullable))completionHandler;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WKScriptMessageHandler>
- (void)userContentController:(WKUserContentController * _Nonnull)userContentController didReceiveScriptMessage:(WKScriptMessage * _Nonnull)message;
@end


SWIFT_PROTOCOL("_TtP6PECore19WebActivityListener_")
@protocol WebActivityListener
- (void)onActivity;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <WebActivityListener>
- (void)onActivity;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <UIScrollViewDelegate>
- (void)scrollViewWillBeginDragging:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
@end


@class UIBarButtonItem;

/// A ViewController specifically designed to be hosted in a PEComponentHost.
SWIFT_PROTOCOL("_TtP6PECore33PEHostableComponentViewController_")
@protocol PEHostableComponentViewController
/// Tells the hostable ViewController what its host is, so it can keep a weak reference.
/// REMEMBER TO ONLY KEEP A WEAK REFERENCE, so we don’t get retain cycles
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost;
@optional
/// Hosted view controllers can implement this function and return true to ask the host to show the user’s information in the navigation bar, as opposed to the current patient’s information.
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Hosted view controllers can implement this function and return true to ask the host hide the “MyChart is Epic” logo in the navigation bar.
- (BOOL)shouldHideComponentHostEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Hosted view controllers can implement this function and return true to ask the host hide the photo in the navigation bar. The photo should only be hidden if it’s displayed elsewhere in the activity.
- (BOOL)shouldHideComponentHostPhotoInNavBar SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a nullable UIBarButtonItem for the left UIBarButtonItem of the parent view controller
- (UIBarButtonItem * _Nullable)getLeftBarButtonItem SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a nullabe UIBarButtonItem for the right UIBarButtonItem of the parent view controller
- (UIBarButtonItem * _Nullable)getRightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
/// checks if the current view controller should warn the user before closing, and calls the appropriate callback
- (void)shouldWarnUserBeforeUnloadWithShowWarning:(void (^ _Nonnull)(void))showWarning continueWithoutWarning:(void (^ _Nonnull)(void))continueWithoutWarning;
- (void)shouldShowComponentHostBackButtonWithCallback:(void (^ _Nonnull)(BOOL))callback;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <PEHostableComponentViewController>
/// Set the component host to the new value
/// \param host New Component host to be used
///
- (void)setComponentHost:(id <PEComponentHostProtocol> _Nonnull)host;
- (void)shouldShowComponentHostBackButtonWithShowBackNavigation:(void (^ _Nonnull)(BOOL))showBackNavigation;
/// Create the back button, if it existss
- (UIBarButtonItem * _Nullable)getLeftBarButtonItem SWIFT_WARN_UNUSED_RESULT;
/// Create the close button, if it exists
- (UIBarButtonItem * _Nullable)getRightBarButtonItem SWIFT_WARN_UNUSED_RESULT;
- (void)shouldWarnUserBeforeUnloadWithShowWarning:(void (^ _Nonnull)(void))showWarning continueWithoutWarning:(void (^ _Nonnull)(void))continueWithoutWarning;
- (BOOL)shouldShowComponentHostUserInfoInNavBar SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldHideComponentHostEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore)) <MyChartJavascriptProtocol>
/// When the javascript requests to close, logout and close the web view.
- (void)onJavascriptRequestsClose;
- (void)resetIdleTimer;
- (void)setWebViewTitleWithNewTitle:(NSString * _Nonnull)newTitle;
- (void)disableCloseButton;
- (void)reenableCloseButton;
/// Javascript hook to handle a location request from the site.
- (void)locationHandler;
- (void)setWebViewStateChangedWithStateMessage:(NSString * _Nonnull)stateMessage;
- (void)setSearchBarInputValueWithQuery:(NSString * _Nonnull)query;
- (void)focusSearchBarInput;
- (void)onEpicPxMobileIntegrationReady;
@end


@interface MyChartWebViewController (SWIFT_EXTENSION(PECore))
/// Handle back navigation from the pressing the back button
- (void)handleBackNavigation;
- (BOOL)canClose SWIFT_WARN_UNUSED_RESULT;
/// If the navigation response behavior should be overridden. Serves a similar purpose to Android’s shouldOverrideHttpErrorWithStatusCode
- (BOOL)shouldOverrideUrlResponseBehaviorFor:(WKNavigationResponse * _Nonnull)navigationResponse SWIFT_WARN_UNUSED_RESULT;
/// Tell the manager that the page has started
- (void)onPageStartedWithUrl:(NSURL * _Nonnull)url;
/// Tell the manager that the page has finished loading
- (void)onPageFinishedWithUrl:(NSURL * _Nonnull)url;
+ (void)promptUserWithLaunchOutsideAlertWithRootVC:(UIViewController * _Nonnull)rootVC onLaunch:(void (^ _Nonnull)(void))onLaunch onClose:(void (^ _Nonnull)(void))onClose;
@end



@interface NSData (SWIFT_EXTENSION(PECore))
- (NSData * _Nonnull)toSHA1 SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSLocale (SWIFT_EXTENSION(PECore))
/// Static formatter locale to be used for XML operations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSLocale * _Nonnull xmlFormatterLocale;)
+ (NSLocale * _Nonnull)xmlFormatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Retrieves the current 12h/24h timeformat
/// Convenience extension to objc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull timeFormat;)
+ (NSString * _Nonnull)timeFormat SWIFT_WARN_UNUSED_RESULT;
/// Retrieves whether the device is displaying in 24h
/// Convenience extension to objc
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL isDevice24Hour;)
+ (BOOL)isDevice24Hour SWIFT_WARN_UNUSED_RESULT;
+ (PELocale * _Nonnull)commandLocale SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSNotification (SWIFT_EXTENSION(PECore))
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull refreshWebView;)
+ (NSString * _Nonnull)refreshWebView SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull refreshAccountSettings;)
+ (NSString * _Nonnull)refreshAccountSettings SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull refreshAccountSettingsDeviceList;)
+ (NSString * _Nonnull)refreshAccountSettingsDeviceList SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) NSString * _Nonnull reloadComponentPaneHostedViewController;)
+ (NSString * _Nonnull)reloadComponentPaneHostedViewController SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
- (NSString * _Nonnull)addQueryParamToUrlwithKey:(NSString * _Nonnull)key andValue:(NSString * _Nonnull)value withEncoding:(BOOL)shouldEncode SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
- (NSString * _Nonnull)fromAES128StringWithKey:(NSData * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)toAES128StringWithKey:(NSData * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSString (SWIFT_EXTENSION(PECore))
+ (BOOL)isNullOrWhiteSpace:(NSString * _Nullable)str SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nonnull)getBaseOrgId:(NSString * _Nullable)orgID SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)areAffiliates:(NSString * _Nullable)orgID1 and:(NSString * _Nullable)orgID2 SWIFT_WARN_UNUSED_RESULT;
@end


@interface NSURL (SWIFT_EXTENSION(PECore))
/// Indicates whether or not this URL is an “about” URL, like “about:blank”.
///
/// returns:
/// True IFF the URL is an “about” URL; false otherwise.
- (BOOL)isAboutUrl SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes navigation between view controllers in a way that emphasizes the workflow step, not the visual appearance of the transition.
typedef SWIFT_ENUM(NSInteger, NavigationType, open) {
/// The user is entering an entirely new workflow. This should be a large visual transition.
  NavigationTypeNewWorkflow = 0,
/// The user has selected something that will show them more detailed information about a part of the whole that they were looking at.
  NavigationTypeDrilldown = 1,
/// The user has progressed through a workflow to the point where they can no longer go back.
  NavigationTypeReplacement = 2,
/// Used to show contextual information about part of the screen, but it shouldn’t feel like the user is going anywhere new.
  NavigationTypeInformationPopover = 3,
/// Used to show important information as an alert on top of the current screen.
  NavigationTypeAlert = 4,
};


SWIFT_CLASS("_TtC6PECore22NotificationCenterUtil")
@interface NotificationCenterUtil : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


@interface NSNumberFormatter (SWIFT_EXTENSION(PECore))
+ (NSNumberFormatter * _Nonnull)EpicUSFormatter SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)EpicDefaultFormatter SWIFT_WARN_UNUSED_RESULT;
+ (NSNumberFormatter * _Nonnull)EpicCurrencyFormatter SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore29OnExtensibilityActionProtocol_")
@protocol OnExtensibilityActionProtocol
- (void)onLaunchFailure;
- (void)onExtensibilityWebServiceComplete;
- (void)onExtensibilityWebServiceStarted;
- (void)performInternalLaunchWithUrl:(NSString * _Nonnull)url allowedHosts:(NSArray<NSString *> * _Nonnull)allowedHosts;
@end

typedef SWIFT_ENUM(NSInteger, OnboardingType, open) {
  OnboardingTypePreLoginOnboarding = 0,
  OnboardingTypeMidLoginOnboarding = 1,
  OnboardingTypeHomePageOnboarding = 2,
  OnboardingTypeDetailedPushNotificationOnboarding = 3,
};


enum PEAlertType : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore15PEAlertProtocol_")
@protocol PEAlertProtocol
- (NSInteger)getCount SWIFT_WARN_UNUSED_RESULT;
- (enum PEAlertType)getType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEAlertType, open) {
  PEAlertTypeUnknown = 0,
  PEAlertTypeHealthReminders = 100,
  PEAlertTypeTasks = 2000,
  PEAlertTypeTaskChanges = 2001,
  PEAlertTypeNewInpatientLab = 62,
  PEAlertTypeNewOutpatientLab = 61,
};


SWIFT_PROTOCOL("_TtP6PECore16PEAppleWatchAPIs_")
@protocol PEAppleWatchAPIs
- (UIAlertController * _Nullable)getPrelaunchAlertControllerOnAccept:(void (^ _Nonnull)(void))onAccept onCancel:(void (^ _Nullable)(void))onCancel SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nonnull)getLinkingViewControllerOnLinkComplete:(void (^ _Nullable)(BOOL))onLinkComplete onLinkCanceled:(void (^ _Nullable)(void))onLinkCanceled SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEAppleWatchState, open) {
  PEAppleWatchStateNotLinkable = 0,
  PEAppleWatchStateUnlinked = 1,
  PEAppleWatchStateLinkedToThisOrg = 2,
  PEAppleWatchStateLinkedToAnotherOrg = 3,
};


/// Base IComponentAPI interface.  All component API interfaces must extend this.
SWIFT_PROTOCOL("_TtP6PECore22PEComponentAPIProtocol_")
@protocol PEComponentAPIProtocol
@end


/// Application Level apis - Methods in this interface should be application/build specific and not used when common utils will do.
SWIFT_PROTOCOL("_TtP6PECore33PEApplicationComponentAPIProtocol_")
@protocol PEApplicationComponentAPIProtocol <PEComponentAPIProtocol>
/// Log out of the application
- (void)logout;
@optional
/// Log out of the application and post the following deep link instead of the standard “epichttp://logout”
/// \param url The url that will post to deep link observers after the context has been wiped out.
///
- (void)logoutWithDeepLinkUrl:(NSString * _Nonnull)url;
@required
/// Tell the main application that the following person is selected
/// \param person the person to switch to
///
- (void)switchCurrentPerson:(id <PEPersonProtocol> _Nonnull)person;
@optional
/// Tell the main application to invalidate alerts for the current person
- (void)invalidateAlertsForPatient;
@required
/// Is the application an internal build
- (BOOL)isInternalBuild SWIFT_WARN_UNUSED_RESULT;
/// Is HealthKit available on this device
- (BOOL)isHealthKitDataAvailable SWIFT_WARN_UNUSED_RESULT;
@optional
/// Retrieves the current locale override for general operations if set
- (PELocale * _Nullable)getCurrentLocaleOverride SWIFT_WARN_UNUSED_RESULT;
@required
/// Is the application branded?
- (BOOL)isBrandedApp SWIFT_WARN_UNUSED_RESULT;
/// Returns if this is a self submitted application
- (BOOL)isSelfSubmittedApp SWIFT_WARN_UNUSED_RESULT;
/// Returns if this is an epic submitted application
- (BOOL)isEpicSubmittedApp SWIFT_WARN_UNUSED_RESULT;
/// Returns the epic submitted’s org id
- (NSString * _Nonnull)getBrandedAppOrgId SWIFT_WARN_UNUSED_RESULT;
/// Returns the epic submitted’s customer image
- (UIImage * _Nullable)getBrandedCustomerImage SWIFT_WARN_UNUSED_RESULT;
@optional
/// Should we enable logout button?
- (BOOL)shouldEnableLogoutButton SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns if the application is a test library that is expired.
- (BOOL)isTestLibraryExpired SWIFT_WARN_UNUSED_RESULT;
@optional
///
/// returns:
/// an object of server primary locale, will return nil if the server does not have a primary locale
- (PELocale * _Nullable)getServerPrimaryLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// an object with login-specific locale information
- (PELocale * _Nonnull)getCurrentLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the default locale to be used if no match can be made with user preferences
- (PELocale * _Nonnull)getDefaultLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the locale to be used for webservices
- (PELocale * _Nonnull)getCommandLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the locale to be used for formatting dates and numbers
- (PELocale * _Nonnull)getFormatterLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the locale to be used for formatting currency
- (PELocale * _Nonnull)getCurrencyFormatterLocale SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// an object with login-specific locale information for debugging use
- (NSString * _Nonnull)getLocaleSettingsDebugDescriptionWithDevice:(BOOL)withDevice SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Date Pattern string considering current locale
- (NSString * _Nullable)getDatePatternFrom:(NSString * _Nonnull)dateFormatTemplate SWIFT_WARN_UNUSED_RESULT;
@required
///
/// returns:
/// true if the user is authenticated
- (BOOL)isFullyAuthenticated SWIFT_WARN_UNUSED_RESULT;
@optional
- (enum PEAppleWatchState)getAppleWatchState SWIFT_WARN_UNUSED_RESULT;
/// Tell the main application to reset IdleTimer so we don’t log the patient out
- (void)resetIdleTimer;
@required
/// Tell the main application to start IdleTimer
- (void)startIdleTimer;
/// Tell the main application to stop IdleTimer
- (void)stopIdleTimer;
/// Returns the context for the logged-in user, if applicable
- (PEUserContext * _Nullable)getCurrentUserContext SWIFT_WARN_UNUSED_RESULT;
/// Returns the context for the current patient, if applicable
- (PEPatientContext * _Nullable)getCurrentPatientContext SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns the application id
- (NSString * _Nonnull)getApplicationId SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns the application type
- (enum ApplicationType)getApplicationType SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns the device id
- (NSString * _Nonnull)getDeviceUId SWIFT_WARN_UNUSED_RESULT;
@required
/// Gets the privacy policy url based on the type of app
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
@optional
/// Returns a boolean indicating whether the device has timed out
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether the application supports printing
- (BOOL)isPrintingSupported SWIFT_WARN_UNUSED_RESULT;
@required
/// Get the display name of the app, i.e. MyChart.
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
/// Gets MyChart’s default theme
- (id <PEThemeProtocol> _Nonnull)getDefaultTheme SWIFT_WARN_UNUSED_RESULT;
/// Clears the current login state
- (void)clearLoginState;
@optional
/// Returns the launch scheme of the app
- (NSString * _Nullable)getAppLaunchScheme SWIFT_WARN_UNUSED_RESULT;
@required
/// Returns true if app review mode is enabled
/// Used for Apple/Google reviewers to point the app to our Shared Testing Environment
- (BOOL)isAppReviewModeEnabled SWIFT_WARN_UNUSED_RESULT;
/// Gets the phonebook URL - only to be used in internal builds
- (NSString * _Nonnull)getPhonebookUrl SWIFT_WARN_UNUSED_RESULT;
/// Get if the MO Printing Onboarding should be hidden
- (BOOL)shouldSuppressMOPrintingOnboarding SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore21PEAppointmentProvider_")
@protocol PEAppointmentProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly) BOOL canDirectSchedule;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull getPEOrganization;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEAppointmentsComponentAPIProtocol_")
@protocol PEAppointmentsComponentAPIProtocol <PEComponentAPIProtocol>
/// \param csn The contact serial number of the appointment to launch into
///
///
/// returns:
/// A view controller for the e-checkin workflow
- (UIViewController * _Nullable)getECheckInViewControllerForCSN:(NSString * _Nonnull)csn SWIFT_WARN_UNUSED_RESULT;
/// \param csn The contact serial number of the appointment to launch into
///
///
/// returns:
/// A view controller displaying appointment details
- (UIViewController * _Nullable)getFutureAppointmentViewControllerForCSN:(NSString * _Nonnull)csn SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// if the currrent patient has access to this component
- (BOOL)hasAccessToWebScheduling SWIFT_WARN_UNUSED_RESULT;
/// triggers a call to ping for hello patient
- (void)initiateAppointmentArrivalMonitoring;
/// Creates Appointment Live Activities using appointments from a loader
/// note:
/// If calling this and initiateAppointmentArrivalMonitoring, call both back to back as they both will use the same request
/// \param loader the loader object that will provide the appointments to create Live Activities from
///
- (void)requestAppointmentLiveActivities;
@end

@protocol TwoFactorInformationProtocol;
enum RestrictedAccessTokenType : NSInteger;
@protocol RestrictedAccessTokenProtocol;
@protocol PEPhonebookEntryProtocol;

/// Authentication Component API
SWIFT_PROTOCOL("_TtP6PECore36PEAuthenticationComponentAPIProtocol_")
@protocol PEAuthenticationComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns a view controller for the two-factor authentication workflow during login.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
///
/// returns:
/// A view controller for the two-factor authentication workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorAuthenticationWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for the two-factor enrollment workflow during login.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
/// \param completionHandler the completion handler to invoke at the end of the workflow
///
///
/// returns:
/// A view controller for the two-factor enrollment workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorEnrollmentWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether or not the back-end supports any of the two-factor opt-in/out workflows.
/// \param userContext the current user context
///
///
/// returns:
/// True if the server supports any of the two-factor opt-in/out workflows; False otherwise.
- (BOOL)supportsTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
/// Executes a web service to load user and system information regarding two-factor authentication.
/// \param userContext the current user context
///
/// \param completionHandler the handler to invoke on completion of the web service
///
/// \param errorHandler the handler to invoke if an error occurs
///
- (void)loadTwoFactorInformationWithContext:(PEUserContext * _Nonnull)userContext completionHandler:(void (^ _Nonnull)(id <TwoFactorInformationProtocol> _Nullable))completionHandler errorHandler:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))errorHandler;
/// Returns a view controller for the email or SMS two-factor opt-in/out workflow.
/// \param userContext the current user context
///
/// \param twoFactorInformation user and system information regarding two-factor authentication
///
///
/// returns:
/// A view controller for the email or SMS two-factor opt-in/out workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nonnull)twoFactorInformation completionHandler:(void (^ _Nullable)(BOOL, BOOL, BOOL))completionHandler SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for the TOTP two-factor opt-in/out workflow.
/// \param userContext the current user context
///
/// \param deepLink the deep link used to launch the workflow
///
///
/// returns:
/// A view controller for the TOTP two-factor opt-in/out workflow.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOptInWithContext:(PEUserContext * _Nonnull)userContext deepLink:(NSString * _Nonnull)deepLink SWIFT_WARN_UNUSED_RESULT;
/// Returns a view controller for two-factor onboarding.
/// \param userContext the current user context
///
///
/// returns:
/// A view controller for two-factor onboarding.
- (UIViewController * _Nullable)getViewControllerForTwoFactorOnboardingWithContext:(PEUserContext * _Nonnull)userContext twoFactorInformation:(id <TwoFactorInformationProtocol> _Nullable)twoFactorInformation SWIFT_WARN_UNUSED_RESULT;
/// Checks whether a RestrictedAccessToken exists on the device, and is for a given organization
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param orgID optional org to check
///
///
/// returns:
/// true if a token exists, false otherwise
- (BOOL)hasRestrictedAccessTokenWithTokenType:(enum RestrictedAccessTokenType)tokenType forOrgId:(NSString * _Nullable)orgId SWIFT_WARN_UNUSED_RESULT;
/// Returns a RestrictedAccessTokenProtocol of a given type, if one exists
/// \param tokenType RestrictedAccessTokenType to check
///
///
/// returns:
/// token object
- (id <RestrictedAccessTokenProtocol> _Nullable)getRestrictedAccessTokenWithTokenType:(enum RestrictedAccessTokenType)tokenType SWIFT_WARN_UNUSED_RESULT;
/// Log in with the restricted access of a given type, if one exists
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param phonebookEntry object representing the organization being logged into
///
/// \param defaultTheme default theme to set for the created restricted access session
///
/// \param completionHandler handler for success, returning the setup patientContext
///
/// \param errorHandler handler for errors, returning a string error
///
- (void)loginWithRestrictedAccessTokenWithTokenType:(enum RestrictedAccessTokenType)tokenType phonebookEntry:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry defaultTheme:(id <PEThemeProtocol> _Nonnull)defaultTheme completionHandler:(void (^ _Nonnull)(PEPatientContext * _Nonnull))completionHandler errorHandler:(void (^ _Nonnull)(NSString * _Nonnull))errorHandler;
/// Creates a RestrictedAccessToken of a given type, and stores it on the device
/// \param userContext the current user context
///
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param username the username for whom this token is being created
///
/// \param completionHandler handler for completion, returning a boolean about whether creation was successful
///
- (void)createRestrictedAccessTokenWithUserContext:(PEUserContext * _Nonnull)userContext tokenType:(enum RestrictedAccessTokenType)tokenType username:(NSString * _Nonnull)username completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Removes the stored RestrictedAccessToken of a given type on this device, but not on the server
/// \param tokenType RestrictedAccessTokenType to check
///
- (void)removeRestrictedAccessTokenFromDeviceWithTokenType:(enum RestrictedAccessTokenType)tokenType;
/// Removes the stored RestrictedAccessToken of a given type on this device and on the server
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param userContext The current user context
///
- (void)removeRestrictedAccessTokenFromDeviceAndServerWithTokenType:(enum RestrictedAccessTokenType)tokenType userContext:(PEUserContext * _Nonnull)userContext;
/// Recreates a RestrictedAccessToken of a given type, and stores it on the device, if one already exists
/// \param userContext the current user context
///
/// \param tokenType RestrictedAccessTokenType to check
///
/// \param username the username for whom this token is being created
///
/// \param completionHandler handler for completion, returning a boolean about whether creation was successful
///
- (void)recreateRestrictedAccessTokenIfNeededWithUserContext:(PEUserContext * _Nonnull)userContext tokenType:(enum RestrictedAccessTokenType)tokenType username:(NSString * _Nonnull)username completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Returns a new instance of LoginViewController
- (UIViewController * _Nonnull)getLoginViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the user has a current restricted access session
- (BOOL)hasCurrentRestrictedAccessSession SWIFT_WARN_UNUSED_RESULT;
/// Clears the current restricted access session, if one exists
- (void)clearCurrentRestrictedAccessSession;
/// Retrieves the current SAML session token, if one exists
- (NSString * _Nullable)getSamlToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of the favorited orgs
/// @return
- (NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull)getFavoritedOrgs SWIFT_WARN_UNUSED_RESULT;
/// Returns a list of the favorited orgs
/// @return
- (void)setFavoritedOrgsWithOrgs:(NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull)orgs;
/// Executes an org select deep link with the provided org ID
/// *
- (void)executeOrgSelectDeeplinkWithOrgId:(NSString * _Nonnull)orgId;
@optional
/// Updates the patient access list with feature access information from H2G organizations we have already heard back from
- (void)getCurrentFeatureAccessInformation;
/// Waits for all H2G organizations to respond and updates the patient access list with feature access information from those orgs
- (void)getFullFeatureAccessInformationWithCompletion:(void (^ _Nullable)(BOOL))completion;
/// Get the feature load status from the patient access list for a given account ID
- (enum FeatureLoadStatus)getFeatureLoadStatusForPatientWithAccountID:(NSString * _Nonnull)accountID SWIFT_WARN_UNUSED_RESULT;
@required
/// The current pre-login theme, if one is available
@property (nonatomic, readonly, strong) id <PEThemeProtocol> _Nullable currentPreLoginTheme;
/// Launches a standard login workflow that will select the organization with the provided orgId and trigger automatic login if available
- (void)launchLoginWorkflowWithOrgId:(NSString * _Nonnull)orgId;
/// Checks if the LoginViewController has a login workflow that is pending due to onboarding not yet being completed.
/// Checks if the org selection step of Onboarding should be skipped
@property (nonatomic, readonly) BOOL shouldSkipOnboardingOrgSelectionStep;
@end

enum PEComponentAccessResult : NSInteger;
enum PEBillingMode : NSInteger;
enum PEEstimatesMode : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore29PEBillingComponentAPIProtocol_")
@protocol PEBillingComponentAPIProtocol <PEComponentAPIProtocol>
/// Determine if the user or selected patient has access to Billing activity
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     patientContext: patient context of the patient whose billing information is being accessed. Nil if accessing a NPP billing
///     page in a HPR environment
///   </li>
/// </ul>
- (enum PEComponentAccessResult)hasAccessForBillingWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Return MO Billing view controller that displays billing summary view
/// \param mode Billing mode to launch
///
/// \param param collection of web parameters
///
- (UIViewController * _Nullable)getBillingViewControllerForMode:(enum PEBillingMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
/// Determines if the user or selected patient has access to Estimates activity
/// \param patientContext patient context of the patient whose Estimates information is being accessed. Nil if accessing Estimates page as NPP in a non-HPR environment
///
///
/// returns:
/// Access Result
- (enum PEComponentAccessResult)hasAccessForEstimatesWithPatient:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Return MO Estimates view controller that displays the Estimates view
/// \param mode Estimates mode to launch
///
/// \param param collection of web parameters
///
- (UIViewController * _Nullable)getEstimatesViewControllerForMode:(enum PEEstimatesMode)mode withParams:(NSDictionary<NSString *, id> * _Nullable)params SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEBillingMode, open) {
  PEBillingModeBillingSummary = 0,
  PEBillingModeBillingDetails = 1,
  PEBillingModeBillingPayment = 2,
  PEBillingModeBillingAutopay = 3,
};

typedef SWIFT_ENUM(NSInteger, PEBrandedColor, open) {
  PEBrandedColorUnknown = 0,
/// Person colors, which are used to distinguish between people that the user can access
  PEBrandedColorPersonColor1 = 1,
  PEBrandedColorPersonColor2 = 2,
  PEBrandedColorPersonColor3 = 3,
  PEBrandedColorPersonColor4 = 4,
  PEBrandedColorPersonColor5 = 5,
  PEBrandedColorPersonColor6 = 6,
  PEBrandedColorPersonColor7 = 7,
  PEBrandedColorPersonTextColor1 = 8,
  PEBrandedColorPersonTextColor2 = 9,
  PEBrandedColorPersonTextColor3 = 10,
  PEBrandedColorPersonTextColor4 = 11,
  PEBrandedColorPersonTextColor5 = 12,
  PEBrandedColorPersonTextColor6 = 13,
  PEBrandedColorPersonTextColor7 = 14,
/// The color used as the background for mobile activities.
  PEBrandedColorBackgroundColor = 15,
/// The color for buttons on the nav bar.
  PEBrandedColorBarButtonColor = 16,
/// The color of the nav bar.
  PEBrandedColorBarTintColor = 17,
/// The color for text on the nav bar.
  PEBrandedColorBarTextColor = 18,
/// The color used as the background for the home page header and other headers across the app.
/// Before having a mobile-specific color, this was populated with the body background color.
/// The legacy branded color is used to grab the body background color in case the client is connecting to a server without the mobile-specific color.
  PEBrandedColorHeaderBackgroundColor = 19,
  PEBrandedColorLegacyHeaderBackgroundColor = 20,
/// The color used for header text.
  PEBrandedColorHeaderTextColor = 21,
/// The color for the “I have questions” button in the Education activity.
  PEBrandedColorInconclusiveButtonColor = 22,
/// The color used as the background for informational banners and other views with “informational” content.
  PEBrandedColorInformationalBackgroundColor = 23,
/// The color for links.
  PEBrandedColorLinkColor = 24,
/// The  color of the login button on the login screen.
  PEBrandedColorLoginButtonColor = 25,
/// The color of the text on the login button on the login screen.
  PEBrandedColorLoginButtonTextColor = 26,
/// The color used as the background for critical banners and other views with “negative” content.
  PEBrandedColorNegativeBackgroundColor = 27,
/// The color of buttons that perform a “negative” or “destructive” action.
  PEBrandedColorNegativeButtonColor = 28,
/// The color of the text on buttons that perform a “negative” or “destructive” action.
  PEBrandedColorNegativeButtonTextColor = 29,
/// The color for “negative” or “destructive” text.  Also used for link-style buttons.
  PEBrandedColorNegativeTextColor = 30,
/// The color of buttons that perform an action that is neither “positive” or “negative”.
  PEBrandedColorNeutralButtonColor = 31,
/// The color of the text on buttons that perform an action that is neither “positive” or “negative”.
  PEBrandedColorNeutralButtonTextColor = 32,
/// The color used as the background for success banners and other views with “positive” content.
  PEBrandedColorPositiveBackgroundColor = 33,
/// The color of buttons that perform a “positive” or “progressive” action.
  PEBrandedColorPositiveButtonColor = 34,
/// The color of the text on buttons that perform a “positive” or “advancing” action.
  PEBrandedColorPositiveButtonTextColor = 35,
/// Standard color for Success Banner Header. Matches WPColor-PositiveDim
  PEBrandedColorPositiveTextColor = 36,
/// The  color of the sign up button on the login screen.
  PEBrandedColorSignupButtonColor = 37,
/// The color of the text on the sign up button on the login screen.
  PEBrandedColorSignupButtonTextColor = 38,
/// The color used for the item that is currently selected on a tab bar.
  PEBrandedColorTabBarSelectedItemColor = 39,
/// The color used to tint icons, controls, and other elements across the app.
  PEBrandedColorTintColor = 40,
/// The color used for the “unread” state of the unread indicator.
  PEBrandedColorUnreadIndicatorColor = 41,
/// The color of the dot used for the “unread” state of the unread indicator.
  PEBrandedColorUnreadIndicatorDotColor = 42,
/// The color used as the background for warning banners and other views with “cautionary” content.
  PEBrandedColorWarningBackgroundColor = 43,
/// A positive color that is used for semantic purposes.  Typically Green.
  PEBrandedColorPositiveSemanticColor = 44,
/// A negative color that is used for semantic purposes.  Typically Red.
  PEBrandedColorNegativeSemanticColor = 45,
};


/// A view that can load either local image resources or remote images and then cache them
SWIFT_CLASS("_TtC6PECore20PECacheableImageView")
@interface PECacheableImageView : UIImageView
/// Is the icon tinted
@property (nonatomic) IBInspectable BOOL shouldTintImage;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PECareTeamComponentDelegate;

SWIFT_PROTOCOL("_TtP6PECore30PECareTeamComponentAPIProtocol_")
@protocol PECareTeamComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the care team activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForCareTeam:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the care team view controller
/// \param patientContext The patient context with which to launch the care team
///
/// \param isPrimaryStandalone Whether the view is  standalone
///
/// \param delegate Delegate to use to retrieve the view controller
///
///
/// returns:
/// The care team view controller
- (void)getCareTeamViewController:(PEPatientContext * _Nonnull)patientContext isPrimaryStandalone:(BOOL)isPrimaryStandalone withDelegate:(id <PECareTeamComponentDelegate> _Nullable)delegate;
/// Determines whether the treatment team activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForTreatmentTeam:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the treatment team view controller
/// \param encounterContext The encounter context with which to launch the treatment team
///
/// \param componentHost The host for this component
///
/// \param viewControllerTitle The title for the treatment team list view controller that should be displayed in the app bar (will be passed to it, but not displayed in this widgette)
///
///
/// returns:
/// The treatment team view controller
- (UIViewController * _Nullable)getTreatmentTeamViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the treatment team list view controller (either a table view or collection view showing all members, as opposed to the widget style view)
/// \param encounterContext The encounter context with which to launch the treatment team
///
/// \param componentHost The host for this component
///
/// \param viewControllerTitle The title for the treatment team list view controller that should be displayed in the app bar
///
///
/// returns:
/// The treatment team list view controller
- (UIViewController * _Nullable)getTreatmentTeamListViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the outpatient-only care team activity
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     patientContext: patient whose care team to get
///   </li>
///   <li>
///     viewControllerTitle: The title for the care team list view controller that should be displayed in the app bar
///   </li>
/// </ul>
///
/// returns:
/// full-screen care team view controller
- (UIViewController * _Nullable)getFullscreenCareTeamViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the provider bio activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForProviderBio:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the provider biography view controller
/// \param encounterContext The encounter context with which to launch the provider bio
///
/// \param providerID The ID of the provider for whom to load a bio
///
/// \param providerName The name of the provider for whom to load a bio
///
///
/// returns:
/// The provider bio view controller
- (UIViewController * _Nullable)getProviderBioViewController:(PEEncounterContext * _Nonnull)encounterContext providerID:(NSString * _Nonnull)providerID providerName:(NSString * _Nonnull)providerName SWIFT_WARN_UNUSED_RESULT;
@end

@class NSError;

SWIFT_PROTOCOL("_TtP6PECore27PECareTeamComponentDelegate_")
@protocol PECareTeamComponentDelegate
/// Callback for when the care team controller was successfully generated and loaded
/// <ul>
///   <li>
///     Parameter
///     <ul>
///       <li>
///         careTeamViewController: The care team view controller
///       </li>
///       <li>
///         failedOrgs: List of external organizations that incurred a failure
///       </li>
///     </ul>
///   </li>
/// </ul>
- (void)didGetCareTeamViewController:(UIViewController * _Nonnull)careTeamViewController withFailedOrgs:(NSArray<id <PEOrganizationInfoProtocol>> * _Nullable)failedOrgs;
/// Callback for when the care team controller could not be generated. This could be because the patient does not have access, the web-service failed, or because the patient does not have anyone in thier care team.
/// \param error The error that occured
///
- (void)didFailToGetCareTeamViewControllerWithError:(NSError * _Nonnull)error;
@end


SWIFT_PROTOCOL("_TtP6PECore31PEChecklistComponentAPIProtocol_")
@protocol PEChecklistComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to the Checklist activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForChecklist:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Bedside Checklist activity for a given encounter context
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
/// \param buttonStyle 
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getChecklistViewController:(PEEncounterContext * _Nonnull)encounterContext buttonStyle:(enum ButtonStyle)buttonStyle viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end

/// Enum for component API interfaces. Used as a unique identifier for the component APIs.
typedef SWIFT_ENUM(NSInteger, PEComponentAPIKey, open) {
  PEComponentAPIKeyShareEverywhere = 0,
  PEComponentAPIKeyToDo = 1,
  PEComponentAPIKeyAppointments = 2,
  PEComponentAPIKeyQuestionnaires = 3,
  PEComponentAPIKeyTrackMyHealth = 4,
  PEComponentAPIKeyToDoBridging = 5,
  PEComponentAPIKeyMyChartNow = 6,
  PEComponentAPIKeyCareTeam = 7,
  PEComponentAPIKeyEducation = 8,
  PEComponentAPIKeyProblemList = 9,
  PEComponentAPIKeyProblemListBridging = 10,
  PEComponentAPIKeyHappeningSoon = 11,
  PEComponentAPIKeyRequests = 12,
  PEComponentAPIKeyMedications = 13,
  PEComponentAPIKeyMedicationsBridging = 14,
  PEComponentAPIKeyTestResults = 15,
  PEComponentAPIKeyTestResultDetail = 16,
  PEComponentAPIKeyH2GOrgPopup = 17,
  PEComponentAPIKeyDateUtilBridging = 18,
  PEComponentAPIKeyHomePage = 19,
  PEComponentAPIKeyApplication = 20,
  PEComponentAPIKeyDeepLinkManager = 21,
  PEComponentAPIKeyAuthentication = 22,
  PEComponentAPIKeyManageMyAccount = 23,
  PEComponentAPIKeyPreventiveCare = 24,
  PEComponentAPIKeyMyDocuments = 25,
  PEComponentAPIKeyMyChartRef = 26,
  PEComponentAPIKeyMessages = 27,
  PEComponentAPIKeyNativeMessages = 28,
  PEComponentAPIKeyUpcomingOrders = 29,
  PEComponentAPIKeyScheduling = 30,
  PEComponentAPIKeyInfectionControl = 31,
  PEComponentAPIKeyContinuingCare = 32,
  PEComponentAPIKeyBilling = 33,
  PEComponentAPIKeyOnboarding = 34,
  PEComponentAPIKeyUtilMisc = 35,
  PEComponentAPIKeyVisits = 36,
  PEComponentAPIKeyWorkflowStep = 37,
  PEComponentAPIKeyChecklist = 38,
  PEComponentAPIKeyFriendsAndFamilyUpdates = 39,
};



/// Component API Provider
/// This class allows components to communicate with other components.  See this wiki for how to create new components: http://wiki.epic.com/main/MyChart/Mobile/Components
/// In order to create a new component:
/// <ol>
///   <li>
///     Define your IComponentAPI, create an interface in com.epic.patientengagementcore.component that extends
///     IComponentAPI and define methods other components need to communicate to the new component.
///   </li>
///   <li>
///     Create your ComponentAPI in your component module
///   </li>
///   <li>
///     Add a new enum value to PEComponentAPIKey for your new ComponentAPI
///   </li>
///   <li>
///     Register the component using registerComponentAPI (Most likely in the same spot as all the other components)
///   </li>
/// </ol>
/// In order to call into another component, get the IComponentAPI using getComponentAPI.
SWIFT_CLASS("_TtC6PECore22PEComponentAPIProvider")
@interface PEComponentAPIProvider : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// The component API provider instance
+ (PEComponentAPIProvider * _Nonnull)getComponentAPIProvider SWIFT_WARN_UNUSED_RESULT;
/// Register a new IComponentAPI.
/// \param componentKey The class type of IComponentAPI
///
/// \param component The component api instance
///
///
/// throws:
/// Can not be null or already registered.
- (BOOL)register:(enum PEComponentAPIKey)componentKey :(id <PEComponentAPIProtocol> _Nonnull)component error:(NSError * _Nullable * _Nullable)error;
/// Get a registered component for type
/// \param componentType The class type of IComponentAPI
///
///
/// returns:
/// The component, if registered.
- (id <PEComponentAPIProtocol> _Nullable)get:(enum PEComponentAPIKey)componentType SWIFT_WARN_UNUSED_RESULT;
/// Get a registered component for type
/// \param componentType The class type of IComponentAPI
///
///
/// returns:
/// The component, if registered.
+ (id <PEComponentAPIProtocol> _Nullable)getApi:(enum PEComponentAPIKey)componentType SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEComponentAccessResult, open) {
  PEComponentAccessResultAccessAllowed = 1,
  PEComponentAccessResultNotAuthenticated = 2,
  PEComponentAccessResultMissingServerUpdate = 3,
  PEComponentAccessResultMissingSecurity = 4,
  PEComponentAccessResultMissingAppPermissions = 5,
  PEComponentAccessResultUserDisabledSetting = 6,
  PEComponentAccessResultDeprecated = 7,
  PEComponentAccessResultUnknownError = 8,
  PEComponentAccessResultSecurityNotLoaded = 11,
};


/// A delegate that allows the parent view controller of a component host to receive updates from the component host
SWIFT_PROTOCOL("_TtP6PECore29PEComponentHostParentDelegate_")
@protocol PEComponentHostParentDelegate
- (void)showMenuInNavBarUpdated:(BOOL)show;
- (void)navBarMenuActionsUpdatedWithActions:(NSArray<UIAlertAction *> * _Nonnull)actions;
@end

@protocol PEComponentHostSharedAnimationElementProtocol;

/// Component Host protocol.  Most/Some component fragments look for this in order to handle errors,
/// navigation, and other UI functions that the containing view controller should control.
SWIFT_PROTOCOL("_TtP6PECore23PEComponentHostProtocol_")
@protocol PEComponentHostProtocol
/// Title of the componentHost.
/// References the UIViewController title property.
@property (nonatomic, readonly, copy) NSString * _Nonnull title;
/// Handle a generic web service failure
/// -returns: If something was presented to the user
- (BOOL)handleWebServiceTaskFailed SWIFT_WARN_UNUSED_RESULT;
/// Handle a generic web service failure and close the viewcontroller in the end
/// -returns: If something was presented to the user
- (BOOL)handleWebServiceTaskFailedAndClose SWIFT_WARN_UNUSED_RESULT;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// This version includes an origin view in case the host wants to launch the view as a popover
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType from:(UIView * _Nonnull)originView;
/// Launches a new view controller with a semantic reason for doing so
/// The host will decide what it does for each transition type, and the component doesn’t have to worry about it
/// This version includes shared elements for use in shared element transition animations
/// -returns: Whether the view controller was successfully launched.
- (BOOL)launchViewController:(UIViewController * _Nonnull)viewController as:(enum NavigationType)navigationType withSharedElements:(NSArray<id <PEComponentHostSharedAnimationElementProtocol>> * _Nonnull)sharedElements andBoundingElement:(id <PEComponentHostSharedAnimationElementProtocol> _Nullable)boundingElement;
/// Wrap a given viewcontroller in a WPViewController
/// Needed for showing navigationbar title view
/// -returns: WPViewController wrapping the parameter view controller
- (UIViewController * _Nonnull)wrapViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// Wrap a given viewcontroller in a WPViewController
/// Needed for showing navigationbar title view
/// -returns: WPViewController wrapping the parameter view controller
- (UIViewController * _Nonnull)wrapViewController:(UIViewController * _Nonnull)viewController inNavigationController:(BOOL)inNavigationController SWIFT_WARN_UNUSED_RESULT;
/// Dismiss a given viewcontroller
/// Needed so that Bedside and MyChart can dismiss view controllers differently
- (void)dismissViewController:(UIViewController * _Nonnull)viewController onCompletion:(void (^ _Nullable)(void))onCompletion;
/// Manually expand or collapse the large navigation bar
/// \param expanded if expanding or collapsing the tool bar
///
- (void)setLargeNavBarExpanded:(BOOL)expanded;
@optional
/// Show or hide the dots menu next to the navigation bar title
/// \param show whether to hide/show the menu
///
- (void)shouldShowMenuInNavBar:(BOOL)show;
/// Set the possible actions for the dots menu next to the navigation bar title
/// \param show whether to hide/show the menu
///
- (void)setNavBarMenuActions:(NSArray<UIAlertAction *> * _Nonnull)actions;
/// Hide and show the navigation bar
- (void)changeNavBarVisibility:(BOOL)isVisible;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEComponentHostPopupProtocol_")
@protocol PEComponentHostPopupProtocol <PEComponentHostProtocol>
/// Hide the close button in a component host popup
- (void)disableCloseButton;
/// Show the close button in a component host popup after it’s been hidden
- (void)reenableCloseButton;
@end



/// A shared element to use for animations when launching a new view controller
SWIFT_PROTOCOL("_TtP6PECore45PEComponentHostSharedAnimationElementProtocol_")
@protocol PEComponentHostSharedAnimationElementProtocol
/// The view in the launching view controller
@property (nonatomic, readonly, strong) UIView * _Nonnull fromView;
/// A unique integer tag matching a view in the view controller being launched
@property (nonatomic, readonly) NSInteger toViewTag;
@end

/// Enum Error codes returned when requesting access to activities asynchronously (see WPAPIGoals, WPAPICareTeam, and WPAPICampaigns)
typedef SWIFT_ENUM(NSInteger, PEComponentRequestControllerErrorCode, open) {
/// unknown The request for a controller failed for an unknown reason.
  PEComponentRequestControllerErrorCodeUnknown = -1,
/// noAccess The user does not have access to the activity.
  PEComponentRequestControllerErrorCodeNoAccess = 1,
/// noData There is no data to display for the requested activity.
  PEComponentRequestControllerErrorCodeNoData = 2,
};

@protocol PEOrganizationProtocol;
@protocol PEUserProtocol;
@protocol PEEncounterProtocol;

/// Context Provider
/// This singleton is responsible for providing user context.
/// In order to get a context, call one of the getContext methods.
/// In order to set up the context (or update) call the update methods.
SWIFT_CLASS("_TtC6PECore17PEContextProvider")
@interface PEContextProvider : NSObject
/// Initialization
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
///
/// returns:
/// Returns the context provider for the app
+ (PEContextProvider * _Nonnull)get SWIFT_WARN_UNUSED_RESULT;
+ (id <PEThemeProtocol> _Nullable)getThemeForCurrentOrganization SWIFT_WARN_UNUSED_RESULT;
/// -returns: the base context which is the PEOrganizationContext if one exists
- (PEOrganizationContext * _Nullable)getContext SWIFT_WARN_UNUSED_RESULT;
/// \param organization The organization for the UserContext
///
///
/// returns:
/// the user contexts for the org
- (NSArray<PEUserContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// \param organization The organization for the UserContext
///
/// \param user The user for the UserContext
///
///
/// returns:
/// the user context if one is set up.
- (PEUserContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user SWIFT_WARN_UNUSED_RESULT;
/// \param organization The org for the PatientContext
///
/// \param user The user for the PatientContext
///
/// \param patient The patient for the PatientContext
///
///
/// returns:
/// a PatientContext for a specific patient
- (PEPatientContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the PatientContexts
///
/// \param user user for the PatientContexts
///
///
/// returns:
/// a list of all the PatientContexts available, null if no patients or user
- (NSArray<PEPatientContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the encounter context
///
/// \param user user for the encounter context
///
/// \param patient patient for the encounter context
///
/// \param encounter encounter for the encounter context
///
///
/// returns:
/// EncounterContext if one is set up for a patient and encounter
- (PEEncounterContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient :(id <PEEncounterProtocol> _Nullable)encounter SWIFT_WARN_UNUSED_RESULT;
- (PEEncounterContext * _Nullable)getContext:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient encounterIdentifier:(NSString * _Nullable)encounterIdentifier SWIFT_WARN_UNUSED_RESULT;
/// \param organization Org for the encounter context
///
/// \param user user for the encounter context
///
/// \param patient patient for the encounter context
///
///
/// returns:
/// Encounter contexts if one is set up for a patient and encounters
- (NSArray<PEEncounterContext *> * _Nullable)getContexts:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient SWIFT_WARN_UNUSED_RESULT;
/// Update the organization in the context, this overwrites the current organization
/// \param organization The new org
///
- (void)updateOrganization:(id <PEOrganizationProtocol> _Nullable)organization;
/// Update the user in the context, This overwrites the current user.
/// \param organization Update users for this org 
///
/// \param users The new users for org 
///
- (void)updateUser:(id <PEOrganizationProtocol> _Nullable)organization :(NSArray<id <PEUserProtocol>> * _Nullable)users;
/// Update the list of patients in the context, this overwrites the current patients.
/// \param organization Update for this org
///
/// \param user Update for this user
///
/// \param patients Update with these patients
///
- (void)updatePatients:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(NSArray<id <PEPatientProtocol>> * _Nullable)patients;
/// Update the list of encounters in the context, this overwrites the current encounters.
/// \param organization Update for this org
///
/// \param user Update for this user
///
/// \param patient Update for this patient
///
/// \param encounters Update with these encounters
///
- (void)updateEncounters:(id <PEOrganizationProtocol> _Nullable)organization :(id <PEUserProtocol> _Nullable)user :(id <PEPatientProtocol> _Nullable)patient :(NSArray<id <PEEncounterProtocol>> * _Nullable)encounters;
/// Clear the Context Provider (use for logout)
- (void)clearContext;
/// Package private helper for Context objects to get the real encounter data.
/// \param organizationIdentifer The org’s identifier
///
/// \param userIdentifier The user’s identifier
///
/// \param patientIdentifier The patient’s identifier
///
/// \param encounterIdentifier The encounter’s identifier
///
///
/// returns:
/// the real encounter object
- (id <PEEncounterProtocol> _Nullable)getEncounter:(NSString * _Nullable)organizationIdentifer :(NSString * _Nullable)userIdentifier :(NSString * _Nullable)patientIdentifier :(NSString * _Nullable)encounterIdentifier SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEContinuingCareComponentAPIProtocol_")
@protocol PEContinuingCareComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to the continuing care activity
/// \param encounterContext The encounter context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForContinuingCare:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO continuing care  activity for a given encounter context
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle the title for the view controller
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getContinuingCareViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO continuing care list activity for a given encounter context and deep link
/// \param encounterContext The encounter context to display
///
/// \param epicHttpLink the url for the list that we’re opening
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getOpenListViewController:(PEEncounterContext * _Nonnull)encounterContext epicHttpLink:(NSString * _Nonnull)epicHttpLink SWIFT_WARN_UNUSED_RESULT;
@end


/// List of string constants for commonly used deep link query parameters
SWIFT_CLASS("_TtC6PECore26PEDeepLinkLaunchParameters")
@interface PEDeepLinkLaunchParameters : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCOUNT;)
+ (NSString * _Nonnull)ACCOUNT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCOUNT_ID;)
+ (NSString * _Nonnull)ACCOUNT_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ADDRESS;)
+ (NSString * _Nonnull)ADDRESS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AUTH_TOKEN;)
+ (NSString * _Nonnull)AUTH_TOKEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AVS_DAT;)
+ (NSString * _Nonnull)AVS_DAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_ID;)
+ (NSString * _Nonnull)BILLING_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_BLOBKEY;)
+ (NSString * _Nonnull)BILLING_BLOBKEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_DOC_TYPE;)
+ (NSString * _Nonnull)BILLING_DOC_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_SYSTEM;)
+ (NSString * _Nonnull)BILLING_SYSTEM SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_DAT;)
+ (NSString * _Nonnull)CHANGE_DAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_ID;)
+ (NSString * _Nonnull)CHANGE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONTEXT;)
+ (NSString * _Nonnull)CONTEXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CONTEXT_TYPE;)
+ (NSString * _Nonnull)CONTEXT_TYPE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CSN;)
+ (NSString * _Nonnull)CSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CVG_ID;)
+ (NSString * _Nonnull)CVG_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DAT;)
+ (NSString * _Nonnull)DAT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DCS_EXT;)
+ (NSString * _Nonnull)DCS_EXT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DCS_ID;)
+ (NSString * _Nonnull)DCS_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EAR_ID;)
+ (NSString * _Nonnull)EAR_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ECSN;)
+ (NSString * _Nonnull)ECSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EMID;)
+ (NSString * _Nonnull)EMID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EPISODE_ID;)
+ (NSString * _Nonnull)EPISODE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EPP_URL;)
+ (NSString * _Nonnull)EPP_URL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEATURE;)
+ (NSString * _Nonnull)FEATURE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEDERATED_LOGOUT;)
+ (NSString * _Nonnull)FEDERATED_LOGOUT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FILE_NAME;)
+ (NSString * _Nonnull)FILE_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FILE_PATH;)
+ (NSString * _Nonnull)FILE_PATH SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull H2G_ORG_ID;)
+ (NSString * _Nonnull)H2G_ORG_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ID;)
+ (NSString * _Nonnull)ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IED_ID;)
+ (NSString * _Nonnull)IED_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_CSN_ENCRYPTED;)
+ (NSString * _Nonnull)IS_CSN_ENCRYPTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_EVISIT;)
+ (NSString * _Nonnull)IS_EVISIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_ID_ENCRYPTED;)
+ (NSString * _Nonnull)IS_ID_ENCRYPTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_INPATIENT;)
+ (NSString * _Nonnull)IS_INPATIENT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_ORDER_ID_ENCRYPTED;)
+ (NSString * _Nonnull)IS_ORDER_ID_ENCRYPTED SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IS_PAYVIDER_PAYER;)
+ (NSString * _Nonnull)IS_PAYVIDER_PAYER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LAB_NAME;)
+ (NSString * _Nonnull)LAB_NAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LATITUDE;)
+ (NSString * _Nonnull)LATITUDE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LONGITUDE;)
+ (NSString * _Nonnull)LONGITUDE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LTK_ID;)
+ (NSString * _Nonnull)LTK_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LTK_INSTANT;)
+ (NSString * _Nonnull)LTK_INSTANT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDICATION;)
+ (NSString * _Nonnull)MEDICATION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGE_INFO;)
+ (NSString * _Nonnull)MESSAGE_INFO SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MID;)
+ (NSString * _Nonnull)MID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MODE;)
+ (NSString * _Nonnull)MODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOW_ENCOUNTER_CSN;)
+ (NSString * _Nonnull)NOW_ENCOUNTER_CSN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OAUTH_TOKEN;)
+ (NSString * _Nonnull)OAUTH_TOKEN SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORDER_ID;)
+ (NSString * _Nonnull)ORDER_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORG;)
+ (NSString * _Nonnull)ORG SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORG_ID;)
+ (NSString * _Nonnull)ORG_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull OVERDUE;)
+ (NSString * _Nonnull)OVERDUE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_INDEX;)
+ (NSString * _Nonnull)PATIENT_INDEX SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PES_ID;)
+ (NSString * _Nonnull)PES_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PROVIDER;)
+ (NSString * _Nonnull)PROVIDER SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull REPORT_MNEMONIC;)
+ (NSString * _Nonnull)REPORT_MNEMONIC SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RFV_ID;)
+ (NSString * _Nonnull)RFV_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SCHED_TICKET_ID;)
+ (NSString * _Nonnull)SCHED_TICKET_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SEL_RFV_ID;)
+ (NSString * _Nonnull)SEL_RFV_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull START_VIDEO_VISIT;)
+ (NSString * _Nonnull)START_VIDEO_VISIT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SUB_MODE;)
+ (NSString * _Nonnull)SUB_MODE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SUBJECT;)
+ (NSString * _Nonnull)SUBJECT SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TAB;)
+ (NSString * _Nonnull)TAB SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TASK_TITLE;)
+ (NSString * _Nonnull)TASK_TITLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TITLE;)
+ (NSString * _Nonnull)TITLE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TITLE_ID;)
+ (NSString * _Nonnull)TITLE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USERNAME;)
+ (NSString * _Nonnull)USERNAME SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ENCRYPTED_TREE_ID;)
+ (NSString * _Nonnull)ENCRYPTED_TREE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TREE_ID;)
+ (NSString * _Nonnull)TREE_ID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TREE_CID;)
+ (NSString * _Nonnull)TREE_CID SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TREE_UNIVERSAL_KEY;)
+ (NSString * _Nonnull)TREE_UNIVERSAL_KEY SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull URL;)
+ (NSString * _Nonnull)URL SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USE_SOURCE_ENCRYPTION;)
+ (NSString * _Nonnull)USE_SOURCE_ENCRYPTION SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WORKFLOW;)
+ (NSString * _Nonnull)WORKFLOW SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull WPR_ID;)
+ (NSString * _Nonnull)WPR_ID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Style of button shown by the website.
typedef SWIFT_ENUM(NSInteger, PEEducationButtonStyle, open) {
/// Show no buttons to the user.
  PEEducationButtonStyleNone = 0,
/// Show buttons that can only be clicked once, and their result is saved. Subsequent clicks of the same button have no effect.
  PEEducationButtonStyleCompletion = 1,
/// Show buttons that save the result when clicked, but clicking the button again will remove the result.
  PEEducationButtonStyleToggle = 2,
};

@protocol PEEducationPointCompletionDelegate;
@class NSNumber;

/// The Interface for the Education component
SWIFT_PROTOCOL("_TtP6PECore31PEEducationComponentAPIProtocol_")
@protocol PEEducationComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForOutpatientEducation:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForInpatientEducation:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext An encounter context or a patient context
///
///
/// returns:
/// The component access result for Education for the given context
- (enum PEComponentAccessResult)hasAccessForEducationPoint:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This method provides the first view controller for the Education component, in the in patient case,
/// the list of all the assigned education titles in a current encounterContext
/// \param encounterContext An encounter context
///
/// \param viewControllerTitle The title for the education titles  view controller that should be displayed in the app bar
///
///
/// returns:
/// The Home screen of the Education activity, the list of all education titles assigned to the patient
- (UIViewController * _Nullable)getInpatientEducationTitlesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// This method provides the first view controller for the Education component, in the out patient case,
/// the list of all the assigned education titles in a current patientContenxt
/// \param patientContext An encounter context
///
/// \param viewControllerTitle The title for the education titles  view controller that should be displayed in the app bar
///
///
/// returns:
/// The Home screen of the Education activity, the list of all education titles assigned to the patient
- (UIViewController * _Nullable)getOutpatientEducationTitlesViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param userContext The context for the user
///
/// \param patientContext The context for the patient
///
/// \param pointID The education point ID
///
/// \param educationTitle The title of the education point being displayed
///
/// \param completionDelegate An optional delegate to handle completion of the education point
///
/// \param shouldLauncMedicalAdviceMessageComposer Whether or not the web view should open the medical composer view when I have questions is clicked by the user. A popup is shown directing the user to contact their organization directly.
///
/// \param buttonStyle Style of button to be shown by the web view. This is sent as part of the request and is handled by web.
///
/// \param educationKey The education key of the education point to display (“titleID^topicID^pointID”)
///
/// \param componentHost The host for this component
///
/// \param taskID The task ID associated with the education point
///
/// \param taskInstant The scheduled instant of the task
///
///
/// returns:
/// A view controller for this component. It’s the caller’s responsibility to put it in a host ViewController.
- (MyChartWebViewController * _Nullable)getEducationPointViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext pointID:(NSString * _Nonnull)pointID educationTitle:(NSString * _Nonnull)educationTitle completionDelegate:(id <PEEducationPointCompletionDelegate> _Nullable)completionDelegate shouldLaunchMedicalAdviceMessageComposer:(BOOL)shouldLaunchMedicalAdviceMessageComposer buttonStyle:(enum PEEducationButtonStyle)buttonStyle pointStatus:(NSNumber * _Nullable)pointStatus educationKey:(NSString * _Nonnull)educationKey componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost taskID:(NSString * _Nullable)taskID taskInstant:(NSString * _Nullable)taskInstant SWIFT_WARN_UNUSED_RESULT;
/// \param userContext The context for the user
///
/// \param patientContext The context for the patient
///
/// \param titleID The education title ID
///
/// \param activityTitle The name of the activity
///
///
/// returns:
/// A view controller for this component. It’s the caller’s responsibility to put it in a host ViewController.
- (MyChartWebViewController * _Nullable)getEducationTOCViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext titleId:(NSString * _Nonnull)titleId activityTitle:(NSString * _Nonnull)activityTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The context for the patient
///
/// \param activity The name of the activity
///
///
/// returns:
/// A view controller for this component. It’s the caller’s responsibility to put it in a host ViewController.
- (UIViewController * _Nullable)getEducationWebViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext activityTitle:(NSString * _Nonnull)activityTitle SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEEducationPointCompletedStatus, open) {
  PEEducationPointCompletedStatusUnread = 0,
  PEEducationPointCompletedStatusRead = 1,
  PEEducationPointCompletedStatusDone = 2,
  PEEducationPointCompletedStatusHidden = 3,
  PEEducationPointCompletedStatusQuestion = 4,
};


/// Interface for the callbacks for the EducationWebViewManager to its parent view.
SWIFT_PROTOCOL("_TtP6PECore34PEEducationPointCompletionDelegate_")
@protocol PEEducationPointCompletionDelegate
/// \param status The completion status of the education point
/// Delegate callbacks Used by ToDo & Education for reporting the completion status of a point
///
- (void)educationPointCompletedWithStatus:(enum PEEducationPointCompletedStatus)status;
@optional
/// Callback for when the user navigates away from an educaiton point
- (void)userDidNavigateAwayFromPoint;
/// Callback for when the user navigates back to an education point
- (void)userDidNavigateBackToPoint;
@end


SWIFT_PROTOCOL("_TtP6PECore24PEEncounterAlertProtocol_")
@protocol PEEncounterAlertProtocol <PEAlertProtocol>
- (NSInteger)getEncounterAlertCount SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)getEncounterCsn SWIFT_WARN_UNUSED_RESULT;
@end


/// Context for a specific org
SWIFT_CLASS("_TtC6PECore21PEOrganizationContext")
@interface PEOrganizationContext : NSObject
///
/// returns:
/// the user data for a PEOrganizationContext
- (NSArray<id <PEUserProtocol>> * _Nullable)getUsers SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The organization data for a PEOrganizationContext
- (id <PEOrganizationProtocol> _Nullable)getOrganization SWIFT_WARN_UNUSED_RESULT;
/// \param object Check against
///
///
/// returns:
/// true, only if it is a OrganizationContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Context for a user
SWIFT_CLASS("_TtC6PECore13PEUserContext")
@interface PEUserContext : PEOrganizationContext
///
/// returns:
/// the user data for a UserContext
- (id <PEUserProtocol> _Nullable)getUser SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of patients for a UserContext
- (NSArray<id <PEPatientProtocol>> * _Nullable)getPatients SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The npp-inclusive list of patients. this[0] is either a user or patient
- (NSArray<id <PEPersonProtocol>> * _Nonnull)getPersonList SWIFT_WARN_UNUSED_RESULT;
/// Is the user a proxy (and has proxy subjects)
- (BOOL)hasProxySubjects SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     returns true, only if it is a UserContext (Not subclass, and identifiers are identical)
///   </li>
/// </ul>
/// \param object compare too
///
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, and user ids regardless of class hierarchy
- (BOOL)isSameUserAs:(PEUserContext * _Nullable)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Context for a specific patient.
SWIFT_CLASS("_TtC6PECore16PEPatientContext")
@interface PEPatientContext : PEUserContext
/// Package private constructor for the ContextProvider
- (nonnull instancetype)init:(NSString * _Nonnull)orgIdentifier :(NSString * _Nonnull)userIdentifier :(NSString * _Nonnull)patientIdentifier OBJC_DESIGNATED_INITIALIZER;
///
/// returns:
/// The patient data for a PatientContext
- (id <PEPatientProtocol> _Nullable)getPatient SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The encounter list data for a PatientContext
- (NSArray<id <PEEncounterProtocol>> * _Nullable)getEncounters SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// If the Patient/User combo is a proxy context
- (BOOL)isPatientProxy SWIFT_WARN_UNUSED_RESULT;
/// \param object compare too
///
///
/// returns:
/// true, only if it is a UserContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, user, and patient ids regardless of class hierarchy
- (BOOL)isSamePatientAs:(PEPatientContext * _Nullable)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
@end


/// Encounter context
SWIFT_CLASS("_TtC6PECore18PEEncounterContext")
@interface PEEncounterContext : PEPatientContext
///
/// returns:
/// The encounter data for a EncounterContext
- (id <PEEncounterProtocol> _Nullable)getEncounter SWIFT_WARN_UNUSED_RESULT;
/// \param object compare too
///
///
/// returns:
/// true, only if it is a EncounterContext (Not subclass, and identifiers are identical)
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// true if the context has the same org, user, patient, and encounter ids regardless of class hierarchy
- (BOOL)isSameEncounterAs:(PEEncounterContext * _Nullable)other SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Hash of the identifiers
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init:(NSString * _Nonnull)orgIdentifier :(NSString * _Nonnull)userIdentifier :(NSString * _Nonnull)patientIdentifier SWIFT_UNAVAILABLE;
@end


SWIFT_PROTOCOL("_TtP6PECore19PEEncounterProtocol_")
@protocol PEEncounterProtocol
///
/// returns:
/// Unique identifier for encounter
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The Now context for the encounter
- (NSString * _Nonnull)getNowContext SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The destination location for this encounter
- (NSString * _Nonnull)getWebServiceUrl:(enum UrlType)urlType SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The universal contact identifier (UCI) for this encounter
- (NSString * _Nonnull)getUniversalIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the encounter’s current alerts
- (NSArray<id <PEEncounterAlertProtocol>> * _Nonnull)getAlertsWithPatient:(id <PEPatientProtocol> _Nonnull)patient SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, PEEstimatesMode, open) {
  PEEstimatesModeEstimates = 0,
  PEEstimatesModeEstimateDetails = 1,
};


/// Protocol for the Friends And Family Updates component
SWIFT_PROTOCOL("_TtP6PECore45PEFriendsAndFamilyUpdatesComponentAPIProtocol_")
@protocol PEFriendsAndFamilyUpdatesComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to the Friends And Family Updates activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForFriendsAndFamilyUpdates:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Friends And Family Updates activity for a given encounter context
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
/// \param buttonStyle Button style to use for this view controller
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getFriendsAndFamilyUpdatesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle buttonStyle:(enum ButtonStyle)buttonStyle SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for getting the view controller for organization refresh
SWIFT_PROTOCOL("_TtP6PECore31PEH2GManageMyAccountAPIProtocol_")
@protocol PEH2GManageMyAccountAPIProtocol <PEComponentAPIProtocol>
/// return the view controller for organization refresh
/// If connecting to an Nov 2019 or later environment, this will return a viewcontroller for a
/// standalone Update My Account activity. Otherwise, it will return a viewcontroller for the Link My Account
/// activity instead.
///
/// returns:
/// UIViewController
- (UIViewController * _Nullable)getManageMyAccountViewControllerWithContext:(enum CommunityUpdateContext)context SWIFT_WARN_UNUSED_RESULT;
/// set the feature we’re displaying the banner
- (void)setFeatureIsCurrentlyCheckingStatusWithFeatureBit:(NSString * _Nonnull)featureBit;
/// launch community loading status request
- (void)launchCommunityLoadingStatusRequest;
/// check if MO link my accounts is available to the user
- (BOOL)isMOManageMyAccountAvailable SWIFT_WARN_UNUSED_RESULT;
/// check if the version support asyn loading
- (BOOL)canAsynLoadingExternalData SWIFT_WARN_UNUSED_RESULT;
/// check if the version supports the H2GPP workflow update
- (BOOL)canSupportH2GPPWorkflowUpdate SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for creating view controller for showing external organization information
SWIFT_PROTOCOL("_TtP6PECore33PEH2GOrgPopupComponentAPIProtocol_")
@protocol PEH2GOrgPopupComponentAPIProtocol <PEComponentAPIProtocol>
/// Get a popup view controller showing a list of H2G organizations with failed connections
/// \param failedOrgsList list of H2G organizations that we failed to connect to
///
/// \param title title of the popup
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GErrorPopupViewControllerForPEH2GFailedOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)failedOrgsList withTitle:(NSString * _Nonnull)title SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of H2G organizations with failed connections
/// \param orgList list of H2G organizations that we failed to connect to
///
/// \param title title of the popup
///
/// \param shouldShowOrgErrorText false if just the org names should be shown, true if error strings should be used for additional context
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GErrorPopupViewControllerForPEH2GFailedOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)failedOrgsList withTitle:(NSString * _Nonnull)title shouldShowOrgErrorText:(BOOL)shouldShowOrgErrorText SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of H2G organizations
/// \param orgList list of H2G organizations to be shown
///
/// \param title title of the popup
///
/// \param shouldShowUpToDateString Whether to show the refresh date along with the organization’s name
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getH2GOrgPopupViewControllerForPEH2GOrgsList:(NSArray<id <PEOrganizationInfoProtocol>> * _Nonnull)orgList withTitle:(NSString * _Nonnull)title shouldShowUpToDateString:(BOOL)shouldShowUpToDateString SWIFT_WARN_UNUSED_RESULT;
/// Get a popup view controller showing a list of who has data at an org
/// \param orgList list of H2G organizations to be shown
///
/// \param title title of the popup
///
/// \param shouldShowUpToDateString Whether to show the refresh date along with the organization’s name
///
///
/// returns:
/// UIViewController
- (UIViewController * _Nonnull)getShowSubjectsForH2GOrgViewControllerForSubjects:(NSArray<NSString *> * _Nonnull)subjects forOrg:(id <PEOrganizationInfoProtocol> _Nonnull)org SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for the Happening Soon component
SWIFT_PROTOCOL("_TtP6PECore35PEHappeningSoonComponentAPIProtocol_")
@protocol PEHappeningSoonComponentAPIProtocol <PEComponentAPIProtocol>
/// Finds out whether the user has access to the Happening Soon feature for the given encounter.
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHappeningSoon:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the Happening Soon timeline widgette.
/// \param encounterContext The encounter
///
/// \param componentHost Optionally, the host for this component
///
///
/// returns:
/// the view controller for the widgette
- (UIViewController * _Nullable)getHappeningSoonTimelineWidgetteViewController:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEHealthAdvisoryCompletionDelegate_")
@protocol PEHealthAdvisoryCompletionDelegate
- (void)healthAdvisoryMarkedCompleteWithCompletionDate:(NSDate * _Nonnull)completionDate;
@end


SWIFT_PROTOCOL("_TtP6PECore30PEHomePageComponentAPIProtocol_")
@protocol PEHomePageComponentAPIProtocol <PEComponentAPIProtocol>
/// Get the main homepage view controller
/// \param context The logged-in user’s context
/// <ul>
///   <li>
///     overlay: which screen should appear on top of the homepage
///   </li>
///   <li>
///     selectedPerson: is there a pre-selected person whose context we should launch?
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller displaying the home page
- (UIViewController * _Nonnull)getHomePageFor:(PEUserContext * _Nonnull)context with:(enum HomepageOverlayType)overlay presetPerson:(id <PEPersonProtocol> _Nullable)selectedPerson SWIFT_WARN_UNUSED_RESULT;
/// Get the main MyChart Central v1 homepage view controller
/// \param context The logged-in user’s context
/// <ul>
///   <li>
///     selectedPerson: is there a pre-selected person whose context we should launch?
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller displaying the MyChart Central v1 home page
- (UIViewController * _Nonnull)getMyChartCentralHomePageFor:(PEUserContext * _Nonnull)context presetPerson:(id <PEPersonProtocol> _Nullable)selectedPerson SWIFT_WARN_UNUSED_RESULT;
/// Prevents the homepage from redisplaying its menu when navigating back to it.
/// <ul>
///   <li>
///     Remark This is designed with workflows in mind wherein the consumer wishes to immediately present/push other content on the homepage
///   </li>
/// </ul>
- (void)preventMenuFromReopeningUponReturn;
/// Called by library
///
/// returns:
/// A view controller displaying the feed.
- (UIViewController * _Nonnull)getHomePageFeedFor:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Called by library. Sets the provided item feed controller to “select” the provided context for a wpr identifier.  This primarily reorders the feed so that the selected person is sorted to the top.
- (void)setHealthFeedContext:(UIViewController * _Nonnull)feed person:(id <PEPersonProtocol> _Nonnull)person;
/// Returns if the patient context has access to this component
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHomePage:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Returns if we should audit user actions on the Home Page Menu
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForHomePageMenuAudit:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// force the feed to refresh
- (void)invalidateFeed;
/// Get the mobile-optimized personalize shortcuts view controller
/// \param userContext The logged-in user’s context
/// <ul>
///   <li>
///     patientContext: the current patient context
///   </li>
/// </ul>
///
///
/// returns:
/// A view controller for mobile-optimized personalize shortcuts
- (UIViewController * _Nonnull)getPersonalizeShortcutsViewControllerForUserContext:(PEUserContext * _Nonnull)userContext andPatientContext:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns if the user context has access to mobile-optimized personalize shortcuts
/// \param context The logged-in user’s context
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForPersonalizeShortcuts:(PEUserContext * _Nonnull)context SWIFT_WARN_UNUSED_RESULT;
/// Returns the title of the mobile-optimized personalize shortcuts view controller
/// \param userContext The logged-in user’s context
/// <ul>
///   <li>
///     patientContext: the current patient context
///   </li>
/// </ul>
///
///
/// returns:
/// the title
- (NSString * _Nonnull)getPersonalizeShortcutsActivityTitle:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// reload menu and shortcuts from database
- (void)notifyReloadMenu;
/// Sets the Apple Watch status for the current user/org to linked
/// \param userContext The logged-in user’s context
///
/// \param isDismissed Whether or not the Apple Watch card has been dismissed
///
- (void)setAppleWatchCardDismissmal:(PEUserContext * _Nonnull)userContext :(BOOL)isDismissed;
/// Load the menu into memory and indicate whether it was successful
/// \param completion Successful completion
///
- (void)preloadMenuWithCompletion:(void (^ _Nonnull)(BOOL, WebServiceFailedError * _Nonnull))completion;
/// Does the provided view controller represent the homepage menu?
/// \param viewController controller to check
///
- (BOOL)isMenuViewController:(UIViewController * _Nullable)viewController SWIFT_WARN_UNUSED_RESULT;
/// Helper function for determining if Home Page onboarding is complete
/// \param userContext the active user
///
- (BOOL)getOnboardingCompleteStatus:(PEUserContext * _Nonnull)userContext SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_PROTOCOL("_TtP6PECore38PEInfectionControlComponentAPIProtocol_")
@protocol PEInfectionControlComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to covid status
- (enum PEComponentAccessResult)hasAccessForCovidStatus:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to prelogin covid status
- (enum PEComponentAccessResult)hasAccessForPreloginCovidStatus:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show
- (UIViewController * _Nullable)getCovidStatusController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// An NSObject of the Covid Status data
- (NSObject * _Nullable)getCovidStatusViewModel:(PEPatientContext * _Nonnull)patientContext successHandler:(void (^ _Nonnull)(NSObject * _Nonnull))successHandler failureHandler:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))failureHandler SWIFT_WARN_UNUSED_RESULT;
/// \param phonebookEntry Object that represents the settings for the organization being logged into
///
/// \param defaultTheme theme to display, unless the organization’s theme can be otherwise retrieved
///
/// \param presentingViewControler the viewController from which to present expanded details
///
/// \param existingLiveModel an existing live model to use for the data displayed in the widget. if null, a new live model is created
///
///
/// returns:
/// A views for this component to show
- (UIView * _Nullable)getPreloginCovidStatusWidget:(id <PEPhonebookEntryProtocol> _Nonnull)phonebookEntry defaultTheme:(id <PEThemeProtocol> _Nonnull)defaultTheme presentingViewController:(UIViewController * _Nullable)presentingViewController existingLiveModel:(PELiveModel * _Nullable)existingLiveModel SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param onboardingDelegate The delegate to handle actions taken in the onboarding view
///
///
/// returns:
/// A view controller that shows onboarding for prelogin covid status
- (UIViewController * _Nullable)getCovidPreloginOnboardingController:(PEPatientContext * _Nonnull)patientContext :(id <IOnboardingDelegate> _Nonnull)onboardingDelegate SWIFT_WARN_UNUSED_RESULT;
@end


/// Interface for the callbacks for the LinkTaskWebView to its parent view.
SWIFT_PROTOCOL("_TtP6PECore28PELinkTaskCompletionDelegate_")
@protocol PELinkTaskCompletionDelegate
/// Delegate callbacks Used by ToDo for reporting the complete status of a link task
- (void)linkTaskCompleted;
/// Delegate callbacks Used by ToDo for reporting the skip status of a link task
- (void)linkTaskSkipped;
@end


SWIFT_CLASS("_TtC6PECore11PELiveModel")
@interface PELiveModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class Region;
@class Script;

SWIFT_CLASS("_TtC6PECore8PELocale")
@interface PELocale : NSObject
@property (nonatomic, strong) Language * _Nonnull language;
@property (nonatomic, strong) Region * _Nonnull region;
@property (nonatomic, strong) Script * _Nonnull script;
- (nonnull instancetype)init:(Language * _Nonnull)language :(Region * _Nonnull)region :(Script * _Nonnull)script OBJC_DESIGNATED_INITIALIZER;
/// The string representation of this as a locale code for general usage
/// Takes the format: lang-script-region
@property (nonatomic, copy) NSString * _Nonnull code;
/// The string representation of this as a locale code for Epic server-side usage.
/// Takes the format: lang-region-script
@property (nonatomic, copy) NSString * _Nonnull commandCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@property (nonatomic, readonly) BOOL isArabicLang;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
/// Construct a PELocale from a string locale code
/// Handles both lang-script-region and lang-region-script formats
+ (PELocale * _Nonnull)fromString:(NSString * _Nonnull)rawValue SWIFT_WARN_UNUSED_RESULT;
/// Construct a PELocale from a string locale code
+ (PELocale * _Nullable)fromLocale:(NSLocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Convert to a Foundations locale object
- (NSLocale * _Nonnull)toLocale SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull EnglishUS;)
+ (PELocale * _Nonnull)EnglishUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull EnglishGB;)
+ (PELocale * _Nonnull)EnglishGB SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull ArabicSA;)
+ (PELocale * _Nonnull)ArabicSA SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull ArabicAE;)
+ (PELocale * _Nonnull)ArabicAE SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Spanish;)
+ (PELocale * _Nonnull)Spanish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Swedish;)
+ (PELocale * _Nonnull)Swedish SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull SimplifiedChineseUS;)
+ (PELocale * _Nonnull)SimplifiedChineseUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Russian;)
+ (PELocale * _Nonnull)Russian SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull MongolianUS;)
+ (PELocale * _Nonnull)MongolianUS SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PELocale * _Nonnull Gibberish;)
+ (PELocale * _Nonnull)Gibberish SWIFT_WARN_UNUSED_RESULT;
/// Text alignment for this Locale. Ex: RTL, LTR
- (enum TextAlignment)getTextAlignment SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6PECore18PELocalizedStrings")
@interface PELocalizedStrings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
+ (void)initStrings:(PELocale * _Nonnull)locale SWIFT_METHOD_FAMILY(none);
/// The locale for the user changed
+ (void)handleLocaleChange:(PELocale * _Nonnull)locale;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.  With parameters in the string
/// \param key The key for the string
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale.  With parameters in the string
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle.  With parameters in the string
/// \param key The key for the string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getString:(NSString * _Nonnull)key locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
/// \param count the count for the plural string
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key.  Uses the current Locale.
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key and locale
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
/// Get the string based on a key, locale, and bundle
/// \param key The key for the string
///
/// \param count the count for the plural string
///
/// \param locale The locale for the string, defaults to english if localzation isn’t found
///
/// \param bundle Uses only strings defined in this bundle
///
/// \param paramArray The parameters for the String
///
///
/// returns:
/// The string for the key else an empty string
+ (NSString * _Nonnull)getPluralString:(NSString * _Nonnull)key :(NSInteger)count locale:(PELocale * _Nonnull)locale bundle:(NSBundle * _Nullable)bundle paramArray:(NSArray<NSString *> * _Nonnull)paramArray SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEMedicationsComponentAPIProtocol_")
@protocol PEMedicationsComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the outpatient medications activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForOutpatientMedications:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the encounter-specific medications activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForEncounterSpecificMedications:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the MyChart Now medications view controller
/// \param encounterContext The encounter context with which to launch the problem list
///
/// \param viewControllerTitle The title for the MyChart Now medications view controller that should be displayed in the app bar
///
///
/// returns:
/// MyChart Now Medications view controller
- (UIViewController * _Nullable)getMyChartNowMedicationsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore41PEMedicationsComponentBridgingAPIProtocol_")
@protocol PEMedicationsComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (UIViewController * _Nullable)getMedicationsViewControllerWithRxID:(NSString * _Nullable)rxID eorgID:(NSString * _Nullable)eorgID SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getMedicationsViewControllerForMCNOutPatientWithParentDelegate:(id <PEComponentHostParentDelegate> _Nullable)parentDelegate SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nullable)getMedicationsViewControllerForRefillWithRxID:(NSString * _Nullable)rxID SWIFT_WARN_UNUSED_RESULT;
- (BOOL)shouldDisableOutpatientMeds SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore17PEMessageProvider_")
@protocol PEMessageProvider
@property (nonatomic, readonly, copy) NSString * _Nonnull ID;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
@property (nonatomic, readonly) BOOL isPCP;
@property (nonatomic, readonly, copy) NSString * _Nonnull photoURL;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@property (nonatomic, readonly) BOOL isProviderIdEncrypted;
@end


SWIFT_PROTOCOL("_TtP6PECore31PEMessagingComponentAPIProtocol_")
@protocol PEMessagingComponentAPIProtocol <PEComponentAPIProtocol>
/// Checks whether the patient has access to send a medical advice message
/// \param patientContext The patient context to check
///
///
/// returns:
/// Whether the patient has access to send a medical advice message
- (enum PEComponentAccessResult)hasAccessForSendingMedicalAdviceMessage:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Checks whether the patient has access to MO Messages
/// \param patientContext The patient context to check
///
///
/// returns:
/// whether the patient has access to MO Messages
- (enum PEComponentAccessResult)hasAccessForMOMessages:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Checks whether the patient has access to inpatient conversations
/// \param encounterContext The encounter context to check
///
///
/// returns:
/// whether the patient has access to inpatient conversations
- (enum PEComponentAccessResult)hasAccessForInpatientMessages:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch into the messages list activity
/// \param patientContext The patient context  for the patient accessing messages
///
/// \param params query params to pass through to the MO messaging activity
///
///
/// returns:
/// A view controller to launch the messages list activity
- (UIViewController * _Nullable)getMessageListViewController:(PEPatientContext * _Nonnull)patientContext params:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch into the Inpatient conversation activity
/// \param encounterContext The patient context  for the patient accessing messages
///
/// \param viewControllerTitle The title for the inpatient messaging view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller to launch the inpatient conversation activity
- (UIViewController * _Nullable)getInpatientMessageListViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets the view controller to launch message detail for a single message
/// \param patientContext The patient context for the patient accessing the message detail
///
/// \param messageID The encrypted messageID of the message to launch details for
///
/// \param myChartWebMessageIDKey The key that is used to place the messageId in the MyChartWebArgs as a parameter
///
/// \param isEncrypted Boolean indicating whether the message ID is encrypted
///
/// \param orgID Organization ID of the external organization for Happy Together messages
///
///
/// returns:
/// A view controller to launch into message details for the passed in message ID
- (UIViewController * _Nullable)getMessageDetailViewController:(PEPatientContext * _Nonnull)patientContext forMessage:(NSString * _Nonnull)messageID myChartWebMessageIDKey:(NSString * _Nonnull)myChartWebMessageIDKey andIsEncrypted:(BOOL)isEncrypted forOrganization:(NSString * _Nonnull)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message
/// \param patientContext The patient context for the patient composing the message
///
///
/// returns:
/// A view controller to launch into a message compose activity
- (UIViewController * _Nullable)getComposeViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message
/// \param patientContext The patient context for the patient composing the message
///
///
/// returns:
/// A view controller to launch into a medical advice message compose activity
- (UIViewController * _Nullable)getComposeMedicalAdviceViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a customer service message
/// \param patientContext The patient context for the patient composing the message
///
/// \param isExternal Whether or not this message should be launched in an external H2G context
///
///
/// returns:
/// A view controller to launch into a customer service message compose activity
- (UIViewController * _Nullable)getComposeCustomerServiceViewController:(PEPatientContext * _Nonnull)patientContext isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a billing  customer service message
/// \param patientContext The patient context for the patient composing the message
///
/// \param encryptedAccountID The encrypted billing account ID
///
/// \param encryptedBilligContext The billing type - 1 (PB), 2 (HB), or 3 (SBO)
///
/// \param isExternal Whether or not this message should be launched in an external H2G context
///
///
/// returns:
/// A view controller to launch into a customer service message compose activity for a billing-related question
- (UIViewController * _Nullable)getComposeBillingCustomerServiceViewController:(PEPatientContext * _Nonnull)patientContext forAccount:(NSString * _Nonnull)encryptedAccountID withType:(NSString * _Nonnull)encryptedBilligContext isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message to a  provider
/// \param patientContext The patient context for the patient composing the message
///
/// \param provider The provider that will be the recipient of the message
///
///
/// returns:
/// A view controller to launch into a message compose activity for a provider
- (UIViewController * _Nullable)getProviderMessageViewController:(PEPatientContext * _Nonnull)patientContext forProvider:(id <PEMessageProvider> _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message with a predefined subject or org
/// \param patientContext The patient context for the patient composing the message
///
/// \param subject The subject of the message to send. Note that there is a limit of 2048 characters on the entire URL. So, the subject should not be long enough that the length of the URL exceeds that limit. It is important to factor in the fact that I18N and encryption can cause the length of the subject to increase while populating the subject.
///
/// \param orgID Organization ID of the external organization for Happy Together message compose
///
///
/// returns:
/// A view controller to launch into a message compose activity with the subject
- (UIViewController * _Nullable)getComposeMedicalAdviceWithSubjectOrOrgViewController:(PEPatientContext * _Nonnull)patientContext withSubject:(NSString * _Nonnull)subject forOrganization:(NSString * _Nonnull)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a medical advice message with an attachment passed in via a DCS ID
/// \param patientContext The patient context for the patient composing the message
///
/// \param dcsID The DCS ID of the attachment that will be attached
///
- (UIViewController * _Nullable)getComposeMedicalAdviceWithDCSIDViewController:(PEPatientContext * _Nonnull)patientContext withDCSID:(NSString * _Nonnull)dcsID SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose an education question message with an encrypted LTK ID
/// \param patientContext The patient context for the patient composing the message
///
/// \param ltkID The related education task ID
///
/// \param isExternal Whether or not this message should be launched in an external H2G context
///
- (UIViewController * _Nullable)getComposeEduQuestionWithLTKIDViewController:(PEPatientContext * _Nonnull)patientContext withLTKID:(NSString * _Nonnull)ltkID isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller to compose a message about a prescription medication
/// \param patientContext The patient context for the patient composing the message
///
/// \param medication The encrypted ID of the medication that will be attached
///
- (UIViewController * _Nullable)getComposePrescriptionMessageViewController:(PEPatientContext * _Nonnull)patientContext withMedication:(NSString * _Nonnull)medication SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore31PEMyChartNowAutoRefreshWidgette_")
@protocol PEMyChartNowAutoRefreshWidgette
- (void)performAutoRefresh;
@end

@protocol PEMyChartNowComponentDelegate;
@protocol PEMyChartNowSwitcherDelegate;
@protocol PEMyChartNowSwitcherProtocol;
@protocol PEMyChartNowItemFeedThemeProtocol;

SWIFT_PROTOCOL("_TtP6PECore32PEMyChartNowComponentAPIProtocol_")
@protocol PEMyChartNowComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
/// \param delegate The delegate to inform when the activities are loaded
///
- (void)getMyChartNowActivitiesForPatientContext:(PEPatientContext * _Nonnull)patientContext delegate:(id <PEMyChartNowComponentDelegate> _Null_unspecified)delegate;
/// Notifies the MyChart Now component that the patient context has changed
- (void)onPatientContextChanged;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient has access to this component
- (enum PEComponentAccessResult)hasAccessForMyChartNow:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign
- (UIViewController * _Nullable)getMyChartNowFullscreenViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param secondaryDeepLinkUrl A deep link url that we want to launch after MCNHome launches
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign
- (UIViewController * _Nullable)getMyChartNowFullscreenViewController:(PEPatientContext * _Nonnull)patientContext secondaryDeepLinkUrl:(NSString * _Nonnull)secondaryDeepLinkUrl SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component to show as of the home page redesign, for use in the MyChart library
- (UIViewController * _Nullable)getMyChartNowWidgetViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param componentHost The component’s host. Nullable for library support, but the view controller expects this to be set before it’s displayed.
///
///
/// returns:
/// A view controller for this component to show in the classic springboard
- (UIViewController * _Nullable)getMyChartNowClassicViewController:(PEPatientContext * _Nonnull)patientContext componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost SWIFT_WARN_UNUSED_RESULT;
/// Try to get a redirect view controller from an epicmychart deep link
/// \param userInfo The dictionary of userInfo from the deep link
///
///
/// returns:
/// A view controller for the deep link
- (UIViewController * _Nullable)getMyChartNowDeepLinkController:(NSDictionary<NSString *, NSString *> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// Try to get a secondary deep link url from a mychartnowhome deep link
/// \param userInfo The dictionary of userInfo from the deep link
///
///
/// returns:
/// A deep link url
- (NSString * _Nullable)getMyChartNowDeepLinkUrl:(NSDictionary<NSString *, NSString *> * _Nullable)userInfo SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The current encounter context for this widget
///
/// \param activityDescriptor The activity descriptor corresponding to the MyChartNow Feature
///
/// \param delegate The delegate to inform when the context has been switched
///
///
/// returns:
/// A view controller containing the switcher widget
- (UIView <PEMyChartNowSwitcherProtocol> * _Nonnull)getMyChartNowSwitcherView:(PEEncounterContext * _Nonnull)encounterContext :(NSString * _Nonnull)activityDescriptor :(id <PEMyChartNowSwitcherDelegate> _Nonnull)delegate SWIFT_WARN_UNUSED_RESULT;
/// \param myChartnowContextId The string MyChart Now context ID
///
///
/// returns:
/// The UIImage of the icon to use for this context
- (UIImage * _Nonnull)getMyChartNowIcon:(NSString * _Nonnull)myChartnowContextId SWIFT_WARN_UNUSED_RESULT;
/// \param myChartnowContextId The string MyChart Now context ID
///
///
/// returns:
/// A short string used as part of an accessibility label for the patient tab informing the VoiceOver user about the current now context
- (NSString * _Nonnull)getMyChartNowPatientTabAccessibilityLabel:(NSString * _Nonnull)myChartnowContextId SWIFT_WARN_UNUSED_RESULT;
/// \param myChartnowContextId The string MyChart Now context ID
///
///
/// returns:
/// A string that can be used to describe the non-MyChart Now activity section on the springboard. This string should be used as the heading for any activities meant to be used outside of the MyChart Now encounter.
- (NSString * _Nonnull)getMyChartNowOtherActivityListTitle:(NSString * _Nonnull)myChartnowContextId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Whether or not MyChart Now has automatically launched for the patient whose chart is being viewed. Reset when the user logs out or switches subjects through the proxy switcher
- (BOOL)getMyChartNowHasShownForCurrPatient SWIFT_WARN_UNUSED_RESULT;
/// \param hasShown True when MCN auto launches, false when current patient changes
///
- (void)setMyChartNowHasShownForCurrPatient:(BOOL)hasShown;
/// \param url The URL returned by the video response when loading up the MCN Onboarding video from server
///
- (void)setMyChartNowOnboardingURLWithUrl:(NSString * _Nonnull)url;
///
/// returns:
/// The URL that the embedded video controller will be passed
- (NSString * _Nonnull)getMyChartNowOnboardingURL SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The current encounter context for this instance of MyChart Now
///
/// \param activityDescriptor The string used as the MyChartNowFeatureType descriptor for the activity
///
///
/// returns:
/// The name of the activity to be used as the title text in the header menu banner
- (void)getTitleForMyChartNowActivity:(PEPatientContext * _Nonnull)patientContext :(NSString * _Nonnull)activityDescriptor onTitleValueRetrieved:(void (^ _Nonnull)(NSString * _Nullable))onTitleValueRetrieved;
/// \param patientContext The patient context object
///
///
/// returns:
/// Indirectly (via closures) either the encounter context object or an error event
- (void)getMyChartContextWithPatientContext:(PEPatientContext * _Nonnull)patientContext onComplete:(void (^ _Nonnull)(id <PEEncounterProtocol> _Nullable))onComplete onError:(void (^ _Nonnull)(void))onError;
/// \param myChartnowContextId the string MyChart Now context ID
///
///
/// returns:
/// an object containing theming information for a specific context in the HomePage item feed
- (id <PEMyChartNowItemFeedThemeProtocol> _Nullable)getMyChartNowFeedThemeWithMyChartNowContextId:(NSString * _Nonnull)myChartNowContextId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the list of MyChart Now context ID strings supported by this version of the component
- (NSArray<NSString *> * _Nonnull)getMyChartNowAvailableContexts SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The current encounter context for this instance of MyChart Now
///
///
/// returns:
/// String array with the list of problems loaded into MyChart Now
- (NSArray<NSString *> * _Nonnull)getListOfProblemsWithEncounterContext:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Invalidates the “unread” badge associated with a feature
/// \param encounterContext the Encounter context
///
/// \param featureID the String feature ID
///
- (void)invalidateFeatureBadgeWithEncounterContext:(PEEncounterContext * _Nonnull)encounterContext featureID:(NSString * _Nonnull)featureID;
@end


SWIFT_PROTOCOL("_TtP6PECore29PEMyChartNowComponentDelegate_")
@protocol PEMyChartNowComponentDelegate
/// Called when the list of MyChartNow activity descriptors has been loaded
/// \param availableFeatures The list of MyChartNow activity descriptors that will be displayed in the MyChart Now widget
///
- (void)didGetMyChartNowActivities:(NSArray<NSString *> * _Nullable)availableFeatures;
/// Called when there was a problem loading the list of activity descriptors
/// \param errorMessage The error message that was encountered during the activity load
///
- (void)didGetMyChartNowActivitiesError:(NSString * _Nullable)errorMessage;
@end


/// Describes the theming and formatting of the home page card
SWIFT_PROTOCOL("_TtP6PECore33PEMyChartNowItemFeedThemeProtocol_")
@protocol PEMyChartNowItemFeedThemeProtocol
///
/// returns:
/// a background image that is displayed at the start (left) of
/// the card header
- (UIImage * _Nullable)getStartBackgroundImage SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a background image that is displayed at the end (right) of
/// the card header
- (UIImage * _Nullable)getEndBackgroundImage SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header background
- (UIColor * _Nonnull)getHeaderBackgroundColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header foreground triangle
- (UIColor * _Nonnull)getHeaderForegroundColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a color value for the header text color
- (UIColor * _Nonnull)getHeaderTextColor SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the start date if it exists
- (UIImage * _Nullable)getStartDateIcon SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the location if it exists
- (UIImage * _Nullable)getLocationIcon SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the icon that should be displayed next to the end date if it exists: String
- (UIImage * _Nullable)getEndDateIcon SWIFT_WARN_UNUSED_RESULT;
@end

/// Describes tags for views within the MyChart Now activity that can be used in shared element transition animations
typedef SWIFT_ENUM(NSInteger, PEMyChartNowSharedAnimationElementViewTag, open) {
  PEMyChartNowSharedAnimationElementViewTagActivityBackground = 96000,
  PEMyChartNowSharedAnimationElementViewTagNavigationBar = 96001,
  PEMyChartNowSharedAnimationElementViewTagHeaderBackground = 96002,
  PEMyChartNowSharedAnimationElementViewTagHeaderStartImage = 96003,
  PEMyChartNowSharedAnimationElementViewTagHeaderEndImage = 96004,
};

/// Describes the context that has been selected with the MyChartNow switcher widget
typedef SWIFT_ENUM(NSInteger, PEMyChartNowSwitcherContext, open) {
  PEMyChartNowSwitcherContextPatient = 1,
  PEMyChartNowSwitcherContextEncounter = 2,
};


SWIFT_PROTOCOL("_TtP6PECore28PEMyChartNowSwitcherDelegate_")
@protocol PEMyChartNowSwitcherDelegate
/// Called when the switcher widget has changed contexts
/// Will be called once when the widget initially loads with the default context
/// \param context The current active context (eg. Encounter)
///
- (void)didSwitchContext:(enum PEMyChartNowSwitcherContext)context;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEMyChartNowSwitcherProtocol_")
@protocol PEMyChartNowSwitcherProtocol
/// The currently selected switcher context
@property (nonatomic, readonly) enum PEMyChartNowSwitcherContext currentContext;
@end


SWIFT_PROTOCOL("_TtP6PECore20PEMyChartNowWidgette_")
@protocol PEMyChartNowWidgette
/// Called when the user taps the header of a MyChart Now widgette
- (void)didTapHeader;
@end

@class UINavigationController;
@protocol TextStyleProtocol;

SWIFT_PROTOCOL("_TtP6PECore32PEMyChartRefComponentAPIProtocol_")
@protocol PEMyChartRefComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// The application key for menu filtering [MYCHART, MYCHART IOS]
- (NSArray<NSString *> * _Nonnull)getApplicationKeys SWIFT_WARN_UNUSED_RESULT;
/// Sets the default selected person to bypass the splash screen
/// \param userId the user who is logging in
///
/// \param newDefaultWprId the default selected person’s WPR
///
- (void)setDefaultPersonWprIdFor:(NSString * _Nonnull)userId newDefaultWprId:(NSString * _Nullable)newDefaultWprId;
/// Gets the default selected person when bypassing the splash screen
/// \param userId the user who is logging in
///
///
/// returns:
/// the default selected person’s WPR
- (NSString * _Nullable)getDefaultPersonWprIdFor:(NSString * _Nonnull)userId forHomepageLaunch:(BOOL)forHomepageLaunch SWIFT_WARN_UNUSED_RESULT;
/// Checks for secondary login methods to set up
/// \param phonebook a PEPhonebookEntry that gets converted to a WPServer. If nil, uses the current server
///
///
/// returns:
/// The raw value of PESecondaryLoginMethod
- (NSInteger)getAvailableSecondaryLoginMethodsToSetUpRawValue:(id <PEPhonebookEntryProtocol> _Nullable)phonebook SWIFT_WARN_UNUSED_RESULT;
/// Do not show the feed item for secondary login, even if not set
- (void)setPreventSecondaryLoginAlert:(BOOL)preventAlert;
/// Has the user requested not to see the alert for secondary login?
- (BOOL)getPreventSecondaryLoginAlert SWIFT_WARN_UNUSED_RESULT;
/// Get the currently monitored CSN
///
/// returns:
/// returns the CSN, empty string if no monitored appt
- (NSString * _Nonnull)getMonitoredAppointmentCSN SWIFT_WARN_UNUSED_RESULT;
/// Increments the number of logins completed by the user for this device and installation
- (void)incrementLoginCounter;
/// Sets flag that the app review card has been dismissed
- (void)setAppReviewCardDismissWithDismissed:(BOOL)dismissed;
/// Determines if the app review card should be requested from the server
- (BOOL)shouldDisplayAppReviewCard SWIFT_WARN_UNUSED_RESULT;
/// Sets flag that the background app refresh card has been dismissed
- (void)setBackgroundAppRefreshCardDismissalFlag:(BOOL)isDismissed;
/// Checks if the background app refresh card has been dismissed before
- (BOOL)getBackgroundAppRefreshCardDismissalFlag SWIFT_WARN_UNUSED_RESULT;
/// Check internal storage to see if we have viewed secondary login onboarding
/// <ul>
///   <li>
///     Returns True if the user has viewed the secondary login
///   </li>
/// </ul>
- (BOOL)hasUserViewedSecondaryLogin SWIFT_WARN_UNUSED_RESULT;
/// Adds the current user/org pair to storage for secondary login onboarding
- (void)setSecondaryLoginViewed;
/// Saves the given email and phone to the users notification preferences
- (void)saveNotificationPreferencesWithEmail:(NSString * _Nonnull)email phone:(NSString * _Nonnull)phone;
/// Container  for apple watch APIs
@property (nonatomic, readonly, strong) id <PEAppleWatchAPIs> _Nonnull appleWatch;
/// Returns whether the current deep link is coming from a hand off
- (BOOL)isDeepLinkComingFromHandOff SWIFT_WARN_UNUSED_RESULT;
/// Returns whether the current deep link is an internal prelogin deep link
- (BOOL)isDeepLinkComingFromPushNotification SWIFT_WARN_UNUSED_RESULT;
/// Returns whether secondary login is enabled at the current organization for a user other than the one currently logged in
- (BOOL)isSecondaryLoginEnabledForOtherUser SWIFT_WARN_UNUSED_RESULT;
/// Removes the login token used for all secondary login methods (Passcode, Touch ID, Face ID) for the organization with the given orgId
/// remark:
/// This method is async to ensure that code can be executed only after the secondary login has been removed
/// \param orgId the org ID of the organization for which the secondary login token is being removed
///
///
/// returns:
/// true if the secondary login token was found and successfully removed, false otherwise
- (void)removeSecondaryLoginWithOrgId:(NSString * _Nullable)orgId completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
/// Returns a boolean indicating whether the current user has a RAT for prelogin Covid Status
- (BOOL)hasPreloginCovidStatusToken SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether this is a self-submitted build using the homepage
- (BOOL)isSelfSubmittedCustomerUsingHomepage SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether or not a self-submitted customer has disabled the nav bar logo
- (BOOL)shouldHideEpicLogoInNavBar SWIFT_WARN_UNUSED_RESULT;
/// Returns the top view controller
- (UIViewController * _Nullable)getTopViewController SWIFT_WARN_UNUSED_RESULT;
/// Get the phonebook entries
- (void)loadPhonebookEntriesWithSuccess:(void (^ _Nonnull)(NSArray<id <PEPhonebookEntryProtocol>> * _Nonnull, BOOL))success failure:(void (^ _Nonnull)(WebServiceFailedError * _Nonnull))failure;
/// Get the cached phonebook entries
- (NSArray<id <PEPhonebookEntryProtocol>> * _Nullable)getCachedPhonebookEntries SWIFT_WARN_UNUSED_RESULT;
/// Clears all files from the MyChart cache
/// <ul>
///   <li>
///     Returns true if successful, false otherwise
///   </li>
/// </ul>
- (BOOL)clearCachedFiles;
/// Asks whether signup is allowed for the phonebook entry
- (BOOL)canLaunchSignUpWorkflowWithServer:(id <PEPhonebookEntryProtocol> _Nonnull)server SWIFT_WARN_UNUSED_RESULT;
/// Retrieves expiry message for a test library build
- (NSString * _Nullable)getTestLibraryExpiryMessage SWIFT_WARN_UNUSED_RESULT;
/// Gets the EULA as a utf8-encoded encoded string from the EULA file
/// <ul>
///   <li>
///     Returns the EULA string for displaying the EULA
///   </li>
/// </ul>
- (NSString * _Nullable)getEulaString SWIFT_WARN_UNUSED_RESULT;
/// Gets the privacy policy URL for onboarding
/// <ul>
///   <li>
///     Returns the URL string for the privacy policy
///   </li>
/// </ul>
- (NSString * _Nullable)getPrivacyPolicyURL SWIFT_WARN_UNUSED_RESULT;
/// Gets the status of the EULA
/// <ul>
///   <li>
///     Returns True if the EULA has been accepted by the user/device
///   </li>
/// </ul>
- (BOOL)isEULAAccepted SWIFT_WARN_UNUSED_RESULT;
/// Sets the EULA as accepted after onboarding
- (void)setEulaAccepted;
/// Gets the notifications status for onboarding
/// <ul>
///   <li>
///     Returns true if the notifications screen has been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedNotificationsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Sets the notifications screen as viewed after onboarding
- (void)setNotificationsOnboardingViewed;
/// Gets the location status for onboarding
/// <ul>
///   <li>
///     Returns true if the location screen has been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedLocationOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Gets the notifications status for onboarding
/// <ul>
///   <li>
///     Returns true if the notifications screen has been viewed or is unavailable
///   </li>
/// </ul>
- (void)setLocationOnboardingViewed;
/// Gets the status for all three pre-login onboarding steps
/// <ul>
///   <li>
///     Returns true if all three steps (EULA, notifications, location) have been viewed
///   </li>
/// </ul>
- (BOOL)hasUserViewedPreLoginOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Makes a location always auth request
- (void)makeLocationAuthorizationRequest;
/// Make a location while using auth request
- (void)makeLocationWhileUsingAuthorizationRequest;
/// Gets the authorization status of location
/// <ul>
///   <li>
///     Returns the current CLAuthorizationStatus
///   </li>
/// </ul>
- (CLAuthorizationStatus)getLocationAuthorizationStatus SWIFT_WARN_UNUSED_RESULT;
/// Gets branded app settings for push notifications
/// <ul>
///   <li>
///     Returns true if supportsBrandedAppPushNotifications is true
///   </li>
/// </ul>
- (BOOL)supportsPushNotifications SWIFT_WARN_UNUSED_RESULT;
/// Gets the string for the UserInfo entry for a biometrics workflow notification during onboarding, fired after storing biometrics
/// <ul>
///   <li>
///     Returns true if storing biometrics was successful
///   </li>
/// </ul>
- (NSString * _Nonnull)getUserInfoStringForBiometricsOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Set user declined org’s terms, conditions, proxy statement
- (void)setUserDeclinedOrgTermsConditions;
/// Get create passcode workflow for onboarding
- (UIViewController * _Nullable)getPasscodeWorkflow SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether biometrics for current user and org were enabled
- (void)setBiometrics;
/// Returns a boolean indicating whether biometrics is currently enabled for a user
- (BOOL)getBiometrics SWIFT_WARN_UNUSED_RESULT;
/// Returns a boolean indicating whether to disable the animated background on the welcome page
- (BOOL)isAnimatedBackgroundDisabled SWIFT_WARN_UNUSED_RESULT;
/// Returns a display name for the application.
- (NSString * _Nonnull)getAppDisplayName SWIFT_WARN_UNUSED_RESULT;
/// Returns the navigation controller for org selection
- (UINavigationController * _Nonnull)getOrgSelectionViewController SWIFT_WARN_UNUSED_RESULT;
/// Opens the camera to scan an orgselect QR code
- (void)scanOrgSelectQRCodeWithViewController:(UIViewController * _Nonnull)viewController;
/// Sets the root nav controller to always use dark status bar icons
- (void)setNavControllerOnboardingOverride:(BOOL)status;
/// Removes a web server from the preferred list
- (void)removeWebServerFromPreferredWithOrgId:(NSString * _Nonnull)orgId;
/// Returns whether the language picker is available
- (BOOL)isLanguagePickerAvailable SWIFT_WARN_UNUSED_RESULT;
/// Jumps out into the settings-app language picker, with potentially a popup beforehand
/// \param vc vc from which to launch the informational popup
///
/// \param orgName the current organization name
///
- (void)launchSettingsLanguagePickerWithVc:(UIViewController * _Nonnull)vc orgName:(NSString * _Nonnull)orgName;
/// Displays the share dialog and will handle sharing the file pass into the items array.
- (void)displayShareDialogWithItemsWithItems:(NSArray * _Nonnull)items presenter:(UIViewController * _Nonnull)presenter fromBarButtonItem:(UIBarButtonItem * _Nonnull)fromBarButtonItem didShow:(void (^ _Nonnull)(void))didShow didCancel:(void (^ _Nullable)(void))didCancel;
/// Check if the app supports updates to the patient access list
- (BOOL)hasDynamicPatientAccessList SWIFT_WARN_UNUSED_RESULT;
/// Get the color key for a PEBrandedColor
- (NSArray<NSString *> * _Nullable)getWebCSSColorKeysWithColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
- (id <PEThemeProtocol> _Nonnull)getMyChartThemeWithLanguage:(NSString * _Nonnull)language colorProvider:(id <BrandedColorProviderProtocol> _Nonnull)colorProvider assetsProvider:(id <BrandedAssetsProviderProtocol> _Nonnull)assetsProvider cardStyle:(id <CardStyleProtocol> _Nonnull)cardStyle interactiveCardStyle:(id <CardStyleProtocol> _Nonnull)interactiveCardStyle textStyles:(NSArray<id <TextStyleProtocol>> * _Nonnull)textStyles SWIFT_WARN_UNUSED_RESULT;
/// Determines if the warning displayed when the user attempts to share content outside of the app should be displayed.
/// If the user indicates that they should not be asked again, you can call <code>disableShareWarning()</code> to make this function return false going forward.
///
/// returns:
/// true if the warning should be shown, false otherwise
- (BOOL)shouldShowShareWarning SWIFT_WARN_UNUSED_RESULT;
/// Disables the share warning that is displayed to users when they attempt to share content outside of the app
- (void)disableShareWarning;
@property (nonatomic, readonly) BOOL isUserAuthenticationStatusNotAuthenticated;
/// Determines if the application is configured to hide the EULA checkbox in the Onboarding and EULA agreement recollection workflows
/// Returns <code>true</code> if the EULA checkbox should be hidden, <code>false</code> otherwise
@property (nonatomic, readonly) BOOL shouldHideEulaCheckbox;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEMyDocumentsComponentAPIProtocol_")
@protocol PEMyDocumentsComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to patient-level  my documents
/// \param patientContext the patient context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForMyDocuments:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO my documents  activity for a given patient context
/// \param patientContext the patient context to display
///
///
/// returns:
/// A view controller displaying the my documents
- (MyChartWebViewController * _Nullable)getMyDocumentsViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO my documents activity for an admission
/// \param encounterContext the encounter context for the admission
///
/// \param viewControllertitle The title for the inpatient my documents  view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller displaying the my documents
- (MyChartWebViewController * _Nullable)getInpatientMyDocumentsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle isBedsideMode:(BOOL)isBedsideMode SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore36PENativeMessagesComponentAPIProtocol_")
@protocol PENativeMessagesComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// the native view controller to launch into message compose for a provider
- (UIViewController * _Nullable)getNativeProviderMessageViewControllerWithProvider:(id <PEMessageProvider> _Nonnull)provider SWIFT_WARN_UNUSED_RESULT;
@end


/// Onboarding Component API
SWIFT_PROTOCOL("_TtP6PECore32PEOnboardingComponentAPIProtocol_")
@protocol PEOnboardingComponentAPIProtocol <PEComponentAPIProtocol>
/// Gets the optional two factor enrollment view
/// <ul>
///   <li>
///     Returns a UIViewController instance of OnboardingWorkflowStepView for 2FA
///   </li>
/// </ul>
/// \param linkAction Action callback for the “Learn More” link
///
/// \param positiveAction Action callback for the accept button
///
/// \param negativeAction Action callback for the decline button
///
/// \param debugText Text for non-prod users to bypass 2FA
///
/// \param debugLinkAction Action for non-prod users to bypass 2FA
///
- (UIViewController * _Nonnull)getTwoFactorEnrollmentOptionalViewControllerWithLinkAction:(void (^ _Nonnull)(void))linkAction positiveAction:(void (^ _Nonnull)(void))positiveAction negativeAction:(void (^ _Nonnull)(void))negativeAction debugText:(NSString * _Nullable)debugText debugLinkAction:(void (^ _Nullable)(void))debugLinkAction SWIFT_WARN_UNUSED_RESULT;
/// Gets the required two factor enrollment view
/// <ul>
///   <li>
///     Returns a UIViewController instance of OnboardingWorkflowStepView for 2FA
///   </li>
/// </ul>
/// \param linkAction Action callback for the “Learn More” link
///
/// \param positiveAction Action callback for the accept button
///
/// \param negativeAction Action callback for the decline button
///
/// \param debugText Text for non-prod users to bypass 2FA
///
/// \param debugLinkAction Action for non-prod users to bypass 2FA
///
- (UIViewController * _Nonnull)getTwoFactorEnrollmentRequiredViewControllerWithLinkAction:(void (^ _Nonnull)(void))linkAction positiveAction:(void (^ _Nonnull)(void))positiveAction negativeAction:(void (^ _Nonnull)(void))negativeAction debugText:(NSString * _Nullable)debugText debugLinkAction:(void (^ _Nullable)(void))debugLinkAction SWIFT_WARN_UNUSED_RESULT;
/// Gets the org’s terms and conditions view controller
/// \param phonebook Phonebook for the org we are viewing the Terms and Conditions of.
///
/// \param onCompletion Action taken when the view is dismissed, either by accepting (true) or declining (false) the Terms and Conditions.
///
///
/// returns:
/// A UIViewController with a root view of OrgTermsConditionsView
- (UIViewController * _Nullable)getOrgTermsConditionsViewController:(id <PEPhonebookEntryProtocol> _Nonnull)phonebook :(id <PEPatientProtocol> _Nullable)userPatient :(NSArray<id <PEPatientProtocol>> * _Nullable)patientList :(void (^ _Nonnull)(BOOL))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Gets the secondary login setup view controller
/// \param onCompletion Action taken when the view is dismissed, either by accepting (true) or declining (false) secondary login.
///
///
/// returns:
/// A UIViewController with a root view of OnboardingWorkflowStepView for secondary login
- (UIViewController * _Nullable)getSecondaryLoginSetupViewControllerOnCompletion:(void (^ _Nonnull)(BOOL, BOOL))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Gets the push notification setup view controller
/// \param onCompletion Action taken when the view is dismissed
///
///
/// returns:
/// A UIViewController with a root view of OnboardingWorkflowStepView for push notification
- (UIViewController * _Nullable)getPushNotificationSetupViewControllerOnCompletion:(void (^ _Nonnull)(void))onCompletion SWIFT_WARN_UNUSED_RESULT;
/// Get the pre-login view controller (welcome, notifications, location)
/// <ul>
///   <li>
///     Returns the UIViewController that contains the pre-login onboarding steps
///   </li>
/// </ul>
- (UIViewController * _Nonnull)getPreLoginViewController SWIFT_WARN_UNUSED_RESULT;
- (UIViewController * _Nonnull)getHomePageOnboardingViewControllerWithContext:(PEUserContext * _Nonnull)context onboardingDelegate:(id <IOnboardingDelegate> _Nonnull)onboardingDelegate SWIFT_WARN_UNUSED_RESULT;
/// Adds step to singleton containing list of a user’s mid-login onboarding steps, and creates the singleton if it doesn’t exist.
/// \param step A member of the OnboardingSteps enum.
///
- (void)addStepToMidLoginOnboardingWorkflowWithStep:(enum MidLoginOnboardingStep)step;
/// Clears the singleton containing list of a user’s mid-login onboarding steps.
- (void)clearStepsInMidLoginOnboardingWorkflow;
/// Because Objective-C apparently can’t handle arrays of enums, even though we don’t want to use this in an Objective-C context,
/// we have to do something absurd to get the progress dots into Home Page onboarding.
- (NSArray<NSNumber *> * _Nonnull)getMidLoginOnboardingWorkflow SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore22PEOnboardingHeaderView")
@interface PEOnboardingHeaderView : SelfLoadingView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// Page view controller that holds the onboarding views
SWIFT_CLASS("_TtC6PECore30PEOnboardingHostViewController")
@interface PEOnboardingHostViewController : UIViewController
@property (nonatomic, weak) IBOutlet PEOnboardingHeaderView * _Null_unspecified headerView;
/// Set status bar style based on nav bar text color
@property (nonatomic, readonly) UIStatusBarStyle preferredStatusBarStyle;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)loadView;
/// Sets up main view elements and pager
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end

@class UIPageViewController;

@interface PEOnboardingHostViewController (SWIFT_EXTENSION(PECore)) <UIPageViewControllerDataSource>
/// gets the onboarding page before the given page
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerBeforeViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// gets the onboarding page after the given page
- (UIViewController * _Nullable)pageViewController:(UIPageViewController * _Nonnull)pageViewController viewControllerAfterViewController:(UIViewController * _Nonnull)viewController SWIFT_WARN_UNUSED_RESULT;
/// gets the number of onboarding pages
- (NSInteger)presentationCountForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
/// gets the index of the current onboarding page
- (NSInteger)presentationIndexForPageViewController:(UIPageViewController * _Nonnull)pageViewController SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore29PEOnboardingNavigationControl")
@interface PEOnboardingNavigationControl : SelfLoadingView
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified actionButton;
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified backButton;
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified nextButton;
@property (nonatomic, weak) IBOutlet CoreButton * _Null_unspecified playButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class PEOnboardingTextContentView;

/// The main view controller all onboarding screen subclass
SWIFT_CLASS("_TtC6PECore30PEOnboardingPageViewController")
@interface PEOnboardingPageViewController : UIViewController
@property (nonatomic, weak) IBOutlet PEOnboardingTextContentView * _Null_unspecified textContentView;
@property (nonatomic, weak) IBOutlet UIImageView * _Nullable imageView;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)viewDidLoad;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


@interface PEOnboardingPageViewController (SWIFT_EXTENSION(PECore)) <IOnboardingNavigationDelegate>
- (void)actionTapped;
- (void)backTapped;
- (void)nextTapped;
- (void)playTapped;
@end


SWIFT_CLASS("_TtC6PECore27PEOnboardingTextContentView")
@interface PEOnboardingTextContentView : SelfLoadingView
@property (nonatomic, weak) IBOutlet MyChartUILabel * _Null_unspecified titleLabel;
@property (nonatomic, weak) IBOutlet MyChartUILabel * _Null_unspecified bodyLabel;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, PEOrganizationCustomString, open) {
  PEOrganizationCustomStringShareEverywhereAdditionalText = 1,
  PEOrganizationCustomStringListSeparatorPrimary = 2,
  PEOrganizationCustomStringTestResultsPreText = 3,
  PEOrganizationCustomStringTestResultsPostText = 4,
  PEOrganizationCustomStringDoctorsCommentHeader = 5,
  PEOrganizationCustomStringMedicationsHospitalAdmissionBannerText = 6,
  PEOrganizationCustomStringMedicationsHospitalAdmissionBannerProxyText = 7,
  PEOrganizationCustomStringTestResults = 8,
  PEOrganizationCustomStringShareEverywhere = 9,
  PEOrganizationCustomStringToDo = 10,
  PEOrganizationCustomStringMedications = 11,
  PEOrganizationCustomStringQuestionnaires = 12,
  PEOrganizationCustomStringEVisitName = 13,
  PEOrganizationCustomStringMessages = 14,
  PEOrganizationCustomStringECheckIn = 15,
  PEOrganizationCustomStringMyDocuments = 16,
  PEOrganizationCustomStringSwitchPatients = 17,
  PEOrganizationCustomStringSelectPatientToView = 18,
  PEOrganizationCustomStringSelectPatientToViewAccessibility = 19,
  PEOrganizationCustomStringEmergencyPhoneNumber = 20,
  PEOrganizationCustomStringCovidScreeningStatusLowRisk = 21,
  PEOrganizationCustomStringCovidScreeningStatusMediumRisk = 22,
  PEOrganizationCustomStringCovidScreeningStatusHighRisk = 23,
  PEOrganizationCustomStringCovidPastScreeningStatusLowRisk = 24,
  PEOrganizationCustomStringCovidPastScreeningStatusMediumRisk = 25,
  PEOrganizationCustomStringCovidPastScreeningStatusHighRisk = 26,
  PEOrganizationCustomStringCovidStateRegistryName = 27,
  PEOrganizationCustomStringShareMyRecord = 28,
  PEOrganizationCustomStringRequests = 29,
  PEOrganizationCustomStringCovidActivityTitle = 30,
  PEOrganizationCustomStringPreventiveCare = 31,
};


/// This has been deprecated in favor of a concrete implementation.  See PEOrganizationInfo
SWIFT_PROTOCOL("_TtP6PECore26PEOrganizationInfoProtocol_")
@protocol PEOrganizationInfoProtocol
@property (nonatomic, readonly, copy) NSString * _Nonnull organizationId;
@property (nonatomic, readonly) BOOL isExternal;
@property (nonatomic, readonly, copy) NSString * _Nonnull logoUrl;
@property (nonatomic, readonly, copy) NSString * _Nonnull organizationName;
@property (nonatomic, readonly) NSInteger linkStatus;
@property (nonatomic, readonly) enum ExternalOrganizationLinkType organizationLinkType;
@property (nonatomic, readonly, copy) NSDate * _Nullable lastRefreshDate;
- (UIImage * _Nullable)getPayerLogo SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPayerName SWIFT_WARN_UNUSED_RESULT;
@end


/// Information for an organization
SWIFT_CLASS("_TtC6PECore18PEOrganizationInfo")
@interface PEOrganizationInfo : NSObject <ImageDataSource, PEOrganizationInfoProtocol>
@property (nonatomic, copy) NSString * _Nonnull organizationId;
@property (nonatomic) BOOL isExternal;
@property (nonatomic, copy) NSString * _Nonnull logoUrl;
@property (nonatomic, copy) NSString * _Nonnull organizationName;
@property (nonatomic) NSInteger linkStatus;
@property (nonatomic) enum ExternalOrganizationLinkType organizationLinkType;
@property (nonatomic, copy) NSDate * _Nullable lastRefreshDate;
@property (nonatomic, copy) NSString * _Nonnull imageURL;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (UIImage * _Nullable)getPayerLogo SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPayerName SWIFT_WARN_UNUSED_RESULT;
@end


enum PESupportedFeature : NSInteger;

SWIFT_PROTOCOL("_TtP6PECore22PEOrganizationProtocol_")
@protocol PEOrganizationProtocol
///
/// returns:
/// the name for the organization
- (NSString * _Nonnull)getOrganizationName SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A unique identifier for this org
- (NSString * _Nonnull)getIdentifier SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the MyChart Brand Name for the organization
- (NSString * _Nonnull)getMyChartBrandName SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// the name of this organization’s website from the phone book
- (NSString * _Nonnull)getWebsiteName SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     useDarkLogo: Determines if the dark variant of the default ogo should be used
///   </li>
///   <li>
///     completionHandler: Handler that contains the MyChart large logo for the mychart brand name, after it loads
///   </li>
/// </ul>
- (void)getBrandLogoWithUseDarkLogo:(BOOL)useDarkLogo completionHandler:(void (^ _Nonnull)(UIImage * _Nonnull))completionHandler;
///
/// returns:
/// the MyChart large header art for the homepage
- (void)getBrandHeaderFor:(id <ImageLoaderDelegate> _Nonnull)delegate;
///
/// returns:
/// the image path for website-based images
- (NSString * _Nullable)getBaseImageUrlPath SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The PE Theme for this org.
- (id <PEThemeProtocol> _Nonnull)getTheme SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     supportedFeature: The feature to check
///   </li>
/// </ul>
///
/// returns:
/// true if the feature is supported
- (BOOL)isFeatureAvailable:(enum PESupportedFeature)supportedFeature SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of allowed hosts for webviews inside the app.
- (NSArray<NSString *> * _Nonnull)getAllowedHosts SWIFT_WARN_UNUSED_RESULT;
/// A Custom String for an Org
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     customString: custom string to get
///   </li>
///   <li>
///     defaultValue: default value if key isn’t set
///   </li>
/// </ul>
///
/// returns:
/// the custom string
- (NSString * _Nullable)getCustomString:(enum PEOrganizationCustomString)customString :(NSString * _Nullable)defaultValue SWIFT_WARN_UNUSED_RESULT;
/// A Custom String for an Org
/// <ul>
///   <li>
///     parameters:
///   </li>
///   <li>
///     customString: custom string to get
///   </li>
///   <li>
///     defaultValue: default value if key isn’t set
///   </li>
///   <li>
///     parameters: Map of key, value pairs of parameters
///   </li>
/// </ul>
///
/// returns:
/// the custom string
- (NSString * _Nullable)getCustomString:(enum PEOrganizationCustomString)customString :(NSString * _Nullable)defaultValue :(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The list of cookies set during the SAML login workflow, that need to be stored to persistent storage.
- (NSArray<NSString *> * _Nullable)getSamlLoginCookiesToPersist SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// The domain of the SAML Login page. This is used to determine if cookies set during the SAML login workflow, need to be stored to persistent storage.
- (NSString * _Nullable)getSamlLoginDomainForCookiesToPersist SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// Whether the web server we would connect to for MO activities has the acordex viewer license.
- (BOOL)getHasAcordexLicense SWIFT_WARN_UNUSED_RESULT;
@end



/// Helper interface to get a patient index from a IPEPatient.  Not all PEPatientProtocol’s need to implement
/// PEPatientIndexProtocol, so check the type of the PEPatientProtocol’s to see if it contains PEPatientIndexProtocol
SWIFT_PROTOCOL("_TtP6PECore22PEPatientIndexProtocol_")
@protocol PEPatientIndexProtocol
- (NSInteger)getPatientIndex SWIFT_WARN_UNUSED_RESULT;
@end

enum TokenType : NSInteger;

/// This protocol represents a person who is also a patient.
SWIFT_PROTOCOL("_TtP6PECore17PEPatientProtocol_")
@protocol PEPatientProtocol <PEPersonProtocol>
/// Gets the URL to use for web service requests that return data for the patient. May return null to indicate that the default URL for web service requests should be used.
///
/// returns:
/// True IFF this patient is currently in an ED; False otherwise.
- (BOOL)getIsInED SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not the patient is currently admitted to a hospital or other inpatient facility.
///
/// returns:
/// True IFF this patient is currently admitted to a hospital or other inpatient facility; False otherwise.
- (BOOL)getIsAdmitted SWIFT_WARN_UNUSED_RESULT;
/// Gets the list of alerts for the patient.
///
/// returns:
/// The list of alerts for this patient.
- (NSArray<id <PEAlertProtocol>> * _Nonnull)getAlerts SWIFT_WARN_UNUSED_RESULT;
/// Gets the patient’s MyChart Now context ID, if any.
///
/// returns:
/// This patient’s MyChart Now context ID, or null if the patient is not in a MyChart Now context.
- (NSString * _Nonnull)getNowContext SWIFT_WARN_UNUSED_RESULT;
/// Sets the patient’s MyChart Now context ID
/// \param nowContextId This patient’s MyChart Now context ID, or null if the patient is not in a MyChart Now context.
///
- (void)setNowContext:(NSString * _Nonnull)nowContextId;
@optional
/// Gets the current (authentication) token for the specified token type.
/// \param tokenType the type for which to get a token for
///
///
/// returns:
/// The current token for the specified token type.
- (NSString * _Nonnull)getToken:(enum TokenType)tokenType SWIFT_WARN_UNUSED_RESULT;
@end



/// Phonebook entry object
SWIFT_PROTOCOL("_TtP6PECore24PEPhonebookEntryProtocol_")
@protocol PEPhonebookEntryProtocol
/// Get the org’s id
///
/// returns:
/// The org id
- (NSString * _Nonnull)getOrgId SWIFT_WARN_UNUSED_RESULT;
/// Get the org’s dxo id
///
/// returns:
/// the org’s dxo id
- (NSString * _Nullable)getDxoId SWIFT_WARN_UNUSED_RESULT;
/// Get the login config file for the environment
///
/// returns:
/// The config file url
- (NSString * _Nullable)getLoginConfigFileUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the login config file for the environment
///
/// returns:
/// The config file url
- (BOOL)hasPreloginBuild SWIFT_WARN_UNUSED_RESULT;
/// Get the website branding url for the environment
///
/// returns:
/// The website branding base url
- (NSString * _Nullable)getWebsiteBrandingUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the default username text
///
/// returns:
/// The default username text
- (NSString * _Nullable)getUsernameText SWIFT_WARN_UNUSED_RESULT;
/// Get the default password text
///
/// returns:
/// The default password text
- (NSString * _Nullable)getPasswordText SWIFT_WARN_UNUSED_RESULT;
/// Get org login logo url
///
/// returns:
/// The org login logo url
- (NSString * _Nullable)getOrgLoginLogoUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the org login image if there is one
///
/// returns:
/// The org login image
- (UIImage * _Nullable)getOrgLoginImage SWIFT_WARN_UNUSED_RESULT;
/// Get the login background color
///
/// returns:
/// The login background color
- (UIColor * _Nonnull)getLoginBackgroundColor SWIFT_WARN_UNUSED_RESULT;
/// Get the login status bar color
///
/// returns:
/// The login status bar color
- (UIColor * _Nonnull)getLoginStatusBarColor SWIFT_WARN_UNUSED_RESULT;
/// Get the login text color for the status bar
///
/// returns:
/// The login status bar color
- (UIColor * _Nonnull)getLoginBarTextColor SWIFT_WARN_UNUSED_RESULT;
/// Get the login button color for the status bar
///
/// returns:
/// The login status bar color
- (UIColor * _Nonnull)getLoginBarButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Get the  neutral button color
///
/// returns:
/// The neutral button color
- (UIColor * _Nonnull)getNeutralButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Get the neutral button text color
///
/// returns:
/// The neutral button text color
- (UIColor * _Nonnull)getNeutralButtonTextColor SWIFT_WARN_UNUSED_RESULT;
/// Gets the URL for the interconnect instance
///
/// returns:
/// The org’s Interconnect URL
- (NSString * _Nonnull)getUrl SWIFT_WARN_UNUSED_RESULT;
/// Gets the name for the org
///
/// returns:
/// The org’s name
- (NSString * _Nonnull)getOrganizationName SWIFT_WARN_UNUSED_RESULT;
/// Gets the website name for the org
///
/// returns:
/// The org’s website name
- (NSString * _Nullable)getWebsiteName SWIFT_WARN_UNUSED_RESULT;
/// Does this org allow username/password login?
///
/// returns:
/// True if username/password login is allowed; false otherwise
- (BOOL)isUsernamePasswordLoginAllowed SWIFT_WARN_UNUSED_RESULT;
/// Check if saml login method should be secondary behind username and password
///
/// returns:
/// True if saml is secondary is disabled; false otherwise
- (BOOL)isSAMLLoginMethodSecondary SWIFT_WARN_UNUSED_RESULT;
/// Get the allowed hosts for prelogin
///
/// returns:
/// List of allowed hosts for prelogin
- (NSArray<NSString *> * _Nonnull)getPreloginAllowedHosts SWIFT_WARN_UNUSED_RESULT;
/// Save username of the server to storage
/// \param username username to save 
///
- (void)saveUsername:(NSString * _Nonnull)username;
/// Return any username saved with this server
///
/// returns:
/// saved username
- (NSString * _Nonnull)getSavedUsername SWIFT_WARN_UNUSED_RESULT;
/// Delete any username saved with this server
- (void)deleteSavedUsername;
/// Set the state of the remember user name setting for this server
/// \param value boolean to set 
///
- (void)setRememberUsernameSetting:(BOOL)value;
/// Return the setting of save user name for this server
///
/// returns:
/// value of remember user name setting
- (BOOL)getRememberUsernameSetting SWIFT_WARN_UNUSED_RESULT;
/// Delete the setting of save user name for this server
- (void)deleteRememberUserSetting;
/// Does this org have a valid passcode set up?
///
/// returns:
/// True if passcode is set up; false otherwise
- (BOOL)hasPasscodeSetUp SWIFT_WARN_UNUSED_RESULT;
/// Does this org have Touch ID set up?
///
/// returns:
/// True if Touch ID is set up; false otherwise
- (BOOL)hasTouchIdSetUp SWIFT_WARN_UNUSED_RESULT;
/// Does this org have Face ID set up?
///
/// returns:
/// True if Face ID is set up; false otherwise
- (BOOL)hasFaceIdSetUp SWIFT_WARN_UNUSED_RESULT;
/// Does this org have Optic ID set up?
///
/// returns:
/// True if Optic ID is set up; false otherwise
- (BOOL)hasOpticIdSetUp SWIFT_WARN_UNUSED_RESULT;
/// Remove secondary login
- (void)removeSecondaryLogin;
/// Remove biometric login
- (void)removeBiometricLogin;
/// Remove passcode login
- (void)removePasscodeLogin;
/// Get the MyChart brand name
///
/// returns:
/// The org’s MyChart brand name
- (NSString * _Nonnull)getMyChartBrandName SWIFT_WARN_UNUSED_RESULT;
/// Get the default language from the phonebook
/// @return
- (NSString * _Nonnull)getDefaultLanguage SWIFT_WARN_UNUSED_RESULT;
/// Get the formatter locale from the phonebook
/// @return
- (NSString * _Nonnull)getFormatterLocale SWIFT_WARN_UNUSED_RESULT;
/// Get the allowed languages, as a comma-separated string, from the phonebook
/// @return
- (NSString * _Nonnull)getAllowedLanguages SWIFT_WARN_UNUSED_RESULT;
/// Get the current PELocale
/// @return
- (PELocale * _Nonnull)getCurrentLocale SWIFT_WARN_UNUSED_RESULT;
/// Get the custom login url for prelogin-extensibility for epic-submitted
/// @return
- (NSString * _Nullable)getCustomLoginUrl SWIFT_WARN_UNUSED_RESULT;
/// Get the support phone number
///
/// returns:
/// The org’s support phone number
- (NSString * _Nullable)getSupportPhoneNumber SWIFT_WARN_UNUSED_RESULT;
/// Get the support email address
///
/// returns:
/// The org’s support email address
- (NSString * _Nullable)getSupportEmailAddress SWIFT_WARN_UNUSED_RESULT;
/// Get the faq URL
///
/// returns:
/// The org’s FAQ URL
- (NSString * _Nullable)getFaqUrl SWIFT_WARN_UNUSED_RESULT;
/// Check if support options are configured
///
/// returns:
/// True if there is an FAQ URL or support phone number/email listed; false otherwise
- (BOOL)hasSupportOptions SWIFT_WARN_UNUSED_RESULT;
@optional
/// Sets up the locale settings from the given locale config info.
- (void)setupLocaleSettingsSourceWithDefaultLocale:(PELocale * _Nullable)defaultLocale allowedLocales:(NSArray<PELocale *> * _Nullable)allowedLocales;
@required
/// Set the theme with the PEThemeProtocol
- (void)setThemeWithTheme:(id <PEThemeProtocol> _Nonnull)theme;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEPreventiveCareComponentAPIProtocol_")
@protocol PEPreventiveCareComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to preventive care reminders
/// \param patientContext the patient context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForPreventiveCare:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     parameters:
///   </li>
/// </ul>
///
/// returns:
/// A view controller displaying the preventive care reminders
- (MyChartWebViewController * _Nullable)getPreventiveCareViewControllerWithUserContext:(PEUserContext * _Nonnull)userContext patientContext:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEProblemListComponentAPIProtocol_")
@protocol PEProblemListComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines whether the outpatient problem list activity can be accessed for this patient
/// \param patientContext The patient context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForOutpatientProblemList:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Determines whether the encounter-specific problem list activity can be accessed for this patient
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForEncounterSpecificProblemList:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Retrieve the encounter-specific problem list view controller
/// \param encounterContext The encounter context with which to launch the problem list
///
/// \param viewControllerTitle The title for the problem list view controller that should be displayed in the app bar
///
///
/// returns:
/// encounter-specific problem list view controller
- (UIViewController * _Nullable)getProblemListViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore41PEProblemListComponentBridgingAPIProtocol_")
@protocol PEProblemListComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (UIViewController * _Nullable)getHealthIssuesViewController SWIFT_WARN_UNUSED_RESULT;
@end


/// A view with a pulsing heart that mimics the loading indicator for mobile optimized views. Use this view as an optional alternative to the standard LoadingIndicator.
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore18PEPulsingHeartView")
@interface PEPulsingHeartView : UIView
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore33PEQuestionnaireCompletionDelegate_")
@protocol PEQuestionnaireCompletionDelegate
/// Called when the user finishes a questionnaire
- (void)questionnaireCompleted;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEQuestionnairesComponentAPIProtocol_")
@protocol PEQuestionnairesComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to patient-level questionnaires
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForPatientQuestionnaires:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to admission-specific questionnaires
/// \param encounterContext the encounter context to check
///
///
/// returns:
/// if the user has access
- (enum PEComponentAccessResult)hasAccessForInpatientQuestionnaires:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to a general questionnaire
/// \param patientContext The patient context to check
///
/// \param contextType Questionnaire context enum value
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForGeneralQuestionnaire:(PEPatientContext * _Nonnull)patientContext contextType:(NSString * _Nonnull)contextType SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to a history questionnaire
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForHistoryQuestionnaire:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO questionnaires activity for a given patient context
/// \param patientContext The patient context to display
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getPatientQuestionnairesViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the MO questionnaires activity for an admission
/// \param encounterContext the encounter context for the admission
///
/// \param viewControllerTitle The title for the inpatient questionnaires  view controller that should be displayed in the app bar
///
///
/// returns:
/// the ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getInpatientQuestionnairesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets a View Controller that displays the MO questionnaires activity for a given patient context and
/// Epic HTTP link corresponding to a single questionnaire in a series
/// \param patientContext the patient context to display 
///
/// \param epicHttpLink link to launch once the MO activity is started 
///
///
/// returns:
/// a fragment to display, or null if it’s not a valid request
- (UIViewController * _Nullable)getStartQuestionnaireViewController:(PEPatientContext * _Nonnull)patientContext epicHttpLink:(NSString * _Nonnull)epicHttpLink SWIFT_WARN_UNUSED_RESULT;
/// \param questionnaireID The ID of the questionnaire to display
///
/// \param seriesAnswerID The ID of the questionnaire series answer to display
///
/// \param completionDelegate An optional delegate to handle questionnare completion
///
///
/// returns:
/// A view controller displaying the questionnaire
- (UIViewController * _Nullable)getQuestionnairesViewControllerForQuestionnaire:(NSString * _Nonnull)questionnaireID andSeries:(NSString * _Nonnull)seriesAnswerID patientContext:(PEPatientContext * _Nonnull)patientContext completionDelegate:(id <PEQuestionnaireCompletionDelegate> _Nullable)completionDelegate SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show questionnaires for an upcoming appointment
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a history questionnaire for an upcoming appointment
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getHistoryAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show questionnaires for an upcoming appointment on an old server
/// \param csn the CSN of the appointment
///
/// \param patientContext the patient context for the appointment
///
/// \param organization the (external) organization for the appointment
///
- (UIViewController * _Nonnull)getOldServerAppointmentQuestionnairesViewControllerWithCsn:(NSString * _Nonnull)csn patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a questionnaire attached to a message
/// \param messageID the message ID
///
/// \param taskID the task ID for the questionnaire
///
/// \param patientContext the patient context for the message
///
/// \param organization the (external) organization for the message
///
- (UIViewController * _Nonnull)getQuestionnaireMessageTaskViewControllerWithMessageID:(NSString * _Nonnull)messageID taskID:(NSString * _Nonnull)taskID patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaires web view to show a history questionnaire attached to a message
/// \param messageID the message ID
///
/// \param taskID the task ID for the questionnaire
///
/// \param patientContext the patient context for the message
///
/// \param organization the (external) organization for the message
///
- (UIViewController * _Nonnull)getHistoryQuestionnaireMessageTaskViewControllerWithMessageID:(NSString * _Nonnull)messageID taskID:(NSString * _Nonnull)taskID patientContext:(PEPatientContext * _Nonnull)patientContext organization:(id <PEOrganizationInfoProtocol> _Nullable)organization SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaire web view to show a general questionnaire
/// \param patientContext the patient context for the questionnaire
///
/// \param parameters query parameters containing meta data to launch the general questionnaire
///
- (UIViewController * _Nonnull)getGeneralQuestionnaireViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
/// Gets a questionnaire web view to show a history questionnaire
/// \param patientContext the patient context for the questionnaire
///
/// \param parameters query parameters containing meta data to launch the history questionnaire
///
- (UIViewController * _Nonnull)getHistoryQuestionnaireViewControllerWithPatientContext:(PEPatientContext * _Nonnull)patientContext parameters:(NSDictionary<NSString *, NSString *> * _Nonnull)parameters SWIFT_WARN_UNUSED_RESULT;
@end

/// The format of the request parameters sent with a web request. This enumeration corresponds to
/// processor objects that are of the <em>WebRequestProcessor</em> type.
typedef SWIFT_ENUM(NSInteger, PERequestFormat, open) {
/// the default request type for the service category
  PERequestFormatDefaultForCategory = 0,
/// an HTTP GET request. Parameters will be converted to a query string
  PERequestFormatGet = 1,
/// JSON formatted POST request body
  PERequestFormatJsonPost = 2,
/// JSON formatted POST request body
  PERequestFormatJsonGet = 3,
};


SWIFT_PROTOCOL("_TtP6PECore30PERequestsComponentAPIProtocol_")
@protocol PERequestsComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns true if the user has access to patient requests
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForRequests:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Bedside MO requests activity for a given encounter context
/// \param patientContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getRequestsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets the title for the requests activity
/// \param organizationContext The organization context
///
///
/// returns:
/// the org override for the activity name or the default activity name if no override exists
- (NSString * _Nonnull)getRequestsActivityTitle:(PEOrganizationContext * _Nonnull)organizationContext SWIFT_WARN_UNUSED_RESULT;
@end

/// The format of a response body returned by a web request. This enumeration corresponds to
/// processor objects defined in the com.epic.patientengagement.core.webservice.processor package of
/// the core library
typedef SWIFT_ENUM(NSInteger, PEResponseFormat, open) {
/// Use the default response type for the service category
  PEResponseFormatDefault = 0,
/// JSON formatted response body
  PEResponseFormatJSON = 1,
/// JSON formatted response body wrapped with the Bedside WcfResponse object in Interconnect
  PEResponseFormatJSONWrappedBedside = 2,
/// Raw NSData object
  PEResponseFormatRawData = 3,
};


SWIFT_PROTOCOL("_TtP6PECore37PEShareEverywhereComponentAPIProtocol_")
@protocol PEShareEverywhereComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForShareEverywhere:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getShareEverywhereViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
@end

/// Enum representing supported features that depend on back-end server support.
/// KEEP THESE CONSISTENT WITH ANDROID.
typedef SWIFT_ENUM(NSInteger, PESupportedFeature, open) {
  PESupportedFeatureUnknown = 0,
  PESupportedFeatureShareEverywhere = 1,
  PESupportedFeatureMyC3NotificationSettings = 2,
  PESupportedFeatureHealthAdvisoriesSorted = 3,
  PESupportedFeatureToDo = 5,
  PESupportedFeatureMyC3Personalization = 6,
  PESupportedFeatureMarkHMTopicComplete = 7,
  PESupportedFeatureHappyTogether = 8,
  PESupportedFeatureHomePage = 9,
  PESupportedFeatureProblemList = 10,
  PESupportedFeatureProviderPhotos = 11,
  PESupportedFeatureMyC3TimeZoneCustomization = 12,
  PESupportedFeatureHappeningSoon = 13,
  PESupportedFeatureTestResults = 14,
  PESupportedFeatureMobileOptimizedWeb = 15,
  PESupportedFeatureClinicalInfo = 16,
  PESupportedFeatureTreatmentTeam = 17,
  PESupportedFeatureCareTeamScheduling = 18,
  PESupportedFeatureEncounterMedications = 19,
  PESupportedFeatureMODirectUrl = 20,
  PESupportedFeatureNPPMobileOptimizedWeb = 21,
  PESupportedFeatureEducation = 22,
  PESupportedFeatureTwoFactorOptIn = 23,
  PESupportedFeatureHMScheduling = 24,
  PESupportedFeaturePatientCreatedTasks = 25,
  PESupportedFeatureToDoProgress = 26,
  PESupportedFeatureHappyTogetherActions = 27,
  PESupportedFeatureMyC3TaskTypeNotifications = 28,
  PESupportedFeatureMyC3PushNotificationDeepLink = 29,
  PESupportedFeatureTreatmentTeam2019 = 30,
  PESupportedFeatureGenericMoJump = 31,
  PESupportedFeaturePanelAppointments = 32,
  PESupportedFeatureMOMessages = 33,
  PESupportedFeatureExploreMoreAuditing = 34,
  PESupportedFeatureMOShortcutPersonalization = 35,
  PESupportedFeatureCovidStatus = 36,
  PESupportedFeatureBrandingPathsLookup = 37,
  PESupportedFeatureMOToDoChangeDetails = 38,
  PESupportedFeatureToDoPersistentQuestionnaires = 39,
  PESupportedFeatureToDoPatientCreatedTaskSecurityPoints = 40,
  PESupportedFeatureUpcomingOrders = 41,
  PESupportedFeatureAppleWatchRedesign = 42,
  PESupportedFeatureHPRemoveFunIcons = 43,
  PESupportedFeatureHowToVideos = 44,
  PESupportedFeatureNPPBilling = 45,
  PESupportedFeatureMOPersonalInformation = 46,
  PESupportedFeatureLaunchPreventiveCareForHealthMaint = 47,
  PESupportedFeatureMOToDo = 48,
  PESupportedFeatureMOImmunizations = 49,
  PESupportedFeaturePreloginCovidStatus = 50,
  PESupportedFeatureCovidPDF = 51,
  PESupportedFeatureEMMIEducation = 52,
  PESupportedFeatureCovidRegistryQuery = 53,
  PESupportedFeatureAppleWatchSnowflake = 54,
  PESupportedFeatureCovidVaccineReconciliation = 55,
  PESupportedFeatureCovidStatusAlwaysOn = 56,
  PESupportedFeatureHPMenuAudit = 57,
  PESupportedFeatureMOEducation = 58,
  PESupportedFeatureCovidTestResults = 59,
  PESupportedFeatureCovidCredentialsHowToVideo = 60,
  PESupportedFeatureMOEducationIP = 61,
  PESupportedFeatureEncounterSummaryPDFDownload = 62,
  PESupportedFeatureH2GCovidVaccineSync = 63,
  PESupportedFeatureNewBdsdQNRSecurity = 64,
  PESupportedFeatureMOCommunicationPreferences = 65,
  PESupportedFeatureAccountDeactivation = 66,
  PESupportedFeatureFeatureUsageLogging = 67,
  PESupportedFeatureFeatureLibrary = 68,
  PESupportedFeatureMOAppointmentArrival = 69,
  PESupportedFeaturePatientEstimates = 70,
  PESupportedFeatureArrivalEventAudit = 71,
  PESupportedFeatureMOTestResults = 72,
  PESupportedFeatureH2GAffiliateBranding = 73,
  PESupportedFeatureMOProviderDetails = 74,
  PESupportedFeatureTwoFactorInfoForLogin = 75,
  PESupportedFeatureMOMyDocuments = 76,
  PESupportedFeatureSelfReportedClinicalUpdates = 77,
  PESupportedFeatureMOAppointmentTicketDecline = 78,
  PESupportedFeatureAppleWallet = 79,
  PESupportedFeatureCustomHealthKitDataTypes = 80,
  PESupportedFeatureBdsdMOTestResults = 81,
  PESupportedFeatureBasicLiveActivityAuditing = 82,
  PESupportedFeatureMOProviderFinder = 83,
  PESupportedFeaturePersonalNotes = 84,
  PESupportedFeatureCovidVaccinationAppleWalletCard = 85,
  PESupportedFeatureMOHealthSummary = 86,
  PESupportedFeatureNPPFDILink = 87,
  PESupportedFeatureMyChartCentral = 88,
  PESupportedFeatureMOTrackMyHealth = 89,
  PESupportedFeatureMOPaperlessSettings = 90,
  PESupportedFeatureMOPastVisitDetails = 91,
  PESupportedFeatureRemoteProxyAccess = 93,
  PESupportedFeatureExpandedHomePageShortcuts = 94,
  PESupportedFeaturePatientAccessUpdates = 96,
  PESupportedFeatureOIDCFederatedLogout = 97,
  PESupportedFeatureShouldUseOrgLogoCE = 98,
  PESupportedFeatureMOShareEverywhere = 99,
  PESupportedFeatureMyChartCentralOn = 100,
  PESupportedFeatureMyChartCentralDTC = 101,
  PESupportedFeatureDrivingDirectionsConsentEnabled = 102,
  PESupportedFeatureDeclutteredQNRNavigationButtons = 103,
  PESupportedFeatureMOPageArbitraryDownloadSupport = 104,
  PESupportedFeatureMyChartSearch = 105,
  PESupportedFeatureMOChangePassword = 106,
  PESupportedFeaturePersonalizeEnabledFriendsAndFamily = 108,
  PESupportedFeatureMyChartCentralV1 = 109,
  PESupportedFeatureEpicFunFacts = 110,
  PESupportedFeaturePreviewFeatures = 111,
};


SWIFT_PROTOCOL("_TtP6PECore12PETestResult_")
@protocol PETestResult
@property (nonatomic, readonly, copy) NSString * _Nullable objectID;
@property (nonatomic, readonly, copy) NSString * _Nullable dat;
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@property (nonatomic, readonly, copy) NSString * _Nullable name;
@end


SWIFT_PROTOCOL("_TtP6PECore38PETestResultDetailComponentAPIProtocol_")
@protocol PETestResultDetailComponentAPIProtocol <PEComponentAPIProtocol>
/// \param testResult the base test result with which to launch the details view controller
///
///
/// returns:
/// A view controller which will show the test result details
- (UIViewController * _Nonnull)getTestResultDetailControllerWithTestResult:(id <PETestResult> _Nonnull)testResult overrideUri:(NSString * _Nonnull)overrideUri componentHost:(id <PEComponentHostProtocol> _Nullable)componentHost patientContext:(PEPatientContext * _Nonnull)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext logEncounterCSN:(BOOL)logEncounterCSN SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// True if the current patient has access to view test result details
- (BOOL)hasAccessToTestResultDetails SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore33PETestResultsComponentAPIProtocol_")
@protocol PETestResultsComponentAPIProtocol <PEComponentAPIProtocol>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull testResultViewedNotification;)
+ (NSString * _Nonnull)testResultViewedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull organizationLinkUpdatedNotification;)
+ (NSString * _Nonnull)organizationLinkUpdatedNotification SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull communityRefreshBannerNeedUpdate;)
+ (NSString * _Nonnull)communityRefreshBannerNeedUpdate SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull communityNotificationRefreshBannerUpdateKey;)
+ (NSString * _Nonnull)communityNotificationRefreshBannerUpdateKey SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A QSP unique to MO test results, the existence of which indicates the details should be launched in MO
- (NSString * _Nonnull)getMOTestResultModeQSP SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A QSP in MO test results that specifies the (external) org ID
- (NSString * _Nonnull)getMOTestResultOrgIdQSP SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// A QSP used in MO test results for the encrypted order ID
- (NSString * _Nonnull)getMOTestResultEOrderIDQSP SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForOutpatientTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The encounter context to launch into
///
///
/// returns:
/// if the encounter context has access to MO test results in Bedside mobile
- (enum PEComponentAccessResult)hasAccessForMOInpatientTestResults:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to MO test results
- (enum PEComponentAccessResult)hasAccessForMOTestResults:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param deepLinkUrl deepLinkUrl for the activity
///
///
/// returns:
/// whether the given deepLinkUrl should show the details in a local MO view, or a legacy native view
- (BOOL)shouldUseMOTestResultDetails:(PEPatientContext * _Nonnull)patientContext deepLinkUrl:(NSString * _Nullable)deepLinkUrl SWIFT_WARN_UNUSED_RESULT;
/// \param encounterContext The encounter context to launch into
///
/// \param viewControllerTitle The title for the test results view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller for this component in Bedside mobile
- (UIViewController * _Nullable)getInpatientTestResultsViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param viewControllerTitle The title for the test results view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTestResultsViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param viewControllerTitle The title for the test results view controller that should be displayed in the app bar
///
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTestResultDetailsViewController:(PEPatientContext * _Nonnull)patientContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle params:(NSDictionary<NSString *, NSString *> * _Nonnull)params SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore15PEThemeProtocol_")
@protocol PEThemeProtocol
/// Gets a UIColor value for the specified PEBrandedColor.
/// \param color the PEBrandedColor to get a color value for
///
- (UIColor * _Nonnull)getBrandedColor:(enum PEBrandedColor)color SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not the To Do activity should use animated backgrounds and To Do-specific colors.
- (BOOL)shouldTurnOffToDoTheme SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not test results should use title casing for display names.
- (BOOL)shouldUseTitleCaseForTestResults SWIFT_WARN_UNUSED_RESULT;
/// Indicates whether or not onboarding should be displayed for the home page.
- (BOOL)shouldSuppressHomepageOnboarding SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getBackgroundImageUrl SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the card style
///   </li>
///   <li>
///     @return The card style
///   </li>
/// </ul>
- (id <CardStyleProtocol> _Nonnull)getCardStyle SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the interactive card style
///   </li>
///   <li>
///     @return The card style
///   </li>
/// </ul>
- (id <CardStyleProtocol> _Nonnull)getInteractiveCardStyle SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the text style for a font ramp
///   </li>
/// </ul>
- (id <TextStyleProtocol> _Nonnull)getTextStyleWithFontRamp:(enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the image from the local, no network calls
///   </li>
/// </ul>
- (UIImage * _Nullable)getImageForKeyFromLocalWithKey:(NSString * _Nullable)key SWIFT_WARN_UNUSED_RESULT;
/// <ul>
///   <li>
///     Get the image for the key, can use network calls
///   </li>
/// </ul>
- (void)getImageForKeyWithKey:(NSString * _Nullable)key success:(void (^ _Nonnull)(UIImage * _Nonnull))success failure:(void (^ _Nonnull)(void))failure;
@end


SWIFT_PROTOCOL("_TtP6PECore26PEToDoComponentAPIProtocol_")
@protocol PEToDoComponentAPIProtocol <PEComponentAPIProtocol>
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to this component
- (enum PEComponentAccessResult)hasAccessForToDo:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Changes
- (enum PEComponentAccessResult)hasAccessForToDoChanges:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Changes
- (enum PEComponentAccessResult)hasAccessForToDoChangeDetails:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do link tasks
- (enum PEComponentAccessResult)hasAccessForToDoLinkTask:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do manage reminders
- (enum PEComponentAccessResult)hasAccessForToDoManageReminders:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// if the patient context has access to To Do Progress
- (enum PEComponentAccessResult)hasAccessForToDoProgress:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The view controller for the To Do Changes activity
- (UIViewController * _Nullable)getToDoChangesViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
/// \param ltkID The task ID of the task to be opened after To Do is launched.
///
/// \param ltkInst The task instant of the task to be opened afater To Do is launched
///
/// \param showSuggestedTasks True if the suggested tasks section in To Do should be automatically expanded, false otherwise
///
///
/// returns:
/// The main view controller for the To Do component
- (UIViewController * _Nullable)getToDoViewController:(PEPatientContext * _Nonnull)patientContext ltkID:(NSString * _Nonnull)ltkID ltkInst:(NSString * _Nonnull)ltkInst showSuggestedTasks:(BOOL)showSuggestedTasks SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To do component, launched into the overdue tasks view
- (UIViewController * _Nullable)getToDoOverdueViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This function returns the web view controller for showing the change details web page for a chosen To Do change.
/// \param patientContext The patient context 
///
/// \param changeId The ALT id of the change 
///
/// \param changeDAT The DAT of the ALT record of the change 
///
/// \param isEncrypted Boolean indicating whether the ALT ID and DAT are already encrypted 
///
- (UIViewController * _Nullable)getToDoChangeDetailsWebViewController:(PEPatientContext * _Nonnull)patientContext changeId:(NSString * _Nonnull)changeId changeDAT:(NSString * _Nonnull)changeDAT isEncrypted:(BOOL)isEncrypted SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To do component, launched into the manage reminders view
- (UIViewController * _Nullable)getToDoManageRemindersViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// \param patientContext The patient context to launch into
///
///
/// returns:
/// The main view controller for the To Do component, launched into the progress view
- (UIViewController * _Nullable)getToDoProgressViewController:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// This function marks the given change as viewed
/// \param patientContext The patient context 
///
/// \param changeId The ALT id of the change 
///
/// \param changeDAT The DAT of the ALT record of the change 
///
/// \param isEncrypted Boolean indicating whether the ALT ID and DAT are already encrypted 
///
- (void)markChangeAsViewed:(PEPatientContext * _Nonnull)patientContext changeId:(NSString * _Nonnull)changeId changeDAT:(NSString * _Nonnull)changeDAT isEncrypted:(BOOL)isEncrypted;
/// This function returns the web view controller for the detail of a Link Task.
/// \param patientContext The patient context 
///
/// \param ltkId The LTK ID of the link task instance 
///
/// \param ltkInstant The instant of the link task instance 
///
/// \param delegate  The delegate to handle completion of the link task 
///
- (UIViewController * _Nullable)getLinkTaskDetailWebViewController:(PEPatientContext * _Nonnull)patientContext ltkId:(NSString * _Nonnull)ltkId ltkInstant:(NSString * _Nonnull)ltkInstant delegate:(id <PELinkTaskCompletionDelegate> _Nullable)delegate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore34PEToDoComponentBridgingAPIProtocol_")
@protocol PEToDoComponentBridgingAPIProtocol <PEComponentAPIProtocol>
- (NSString * _Nonnull)getQuestionnaireIDFromTaskWithID:(NSString * _Nonnull)taskID atInstant:(NSString * _Nonnull)taskInstant andQuestionnaireIDs:(NSArray<NSString *> * _Nonnull)questionnaireIDs withSeriesID:(NSString * _Nonnull)seriesID SWIFT_WARN_UNUSED_RESULT;
/// \param topicID The ID of the HM topic to display
///
/// \param name The name of the HM topic to display
///
/// \param statusText The status text to display for the HM topic
///
/// \param detailText The detail text to display for the HM topic
///
/// \param completionDelegate An optional completion delegate to handle the completion of the health advisory
///
///
/// returns:
/// A view controller for the HM topic completion workflow.
- (UIViewController * _Nullable)getMarkHealthAdvisoryCompleteViewControllerForTopic:(NSString * _Nonnull)topicID named:(NSString * _Nonnull)name withStatusText:(NSString * _Nonnull)statusText andDetailText:(NSString * _Nonnull)detailText completionDelegate:(id <PEHealthAdvisoryCompletionDelegate> _Nullable)completionDelegate SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore35PETrackMyHealthComponentAPIProtocol_")
@protocol PETrackMyHealthComponentAPIProtocol <PEComponentAPIProtocol>
///
/// returns:
/// A view controller for this component
- (UIViewController * _Nullable)getTrackMyHealthViewController SWIFT_WARN_UNUSED_RESULT;
@end

@protocol PETutorialHostProtocol;
@class PETutorialUIModel;

SWIFT_CLASS("_TtC6PECore20PETutorialController")
@interface PETutorialController : NSObject
/// Initializes the PETutorialController. This method must be called before controller usage
/// \param tutorialHost an object conforming to the PETutorialHostProtocol interface
///
+ (void)initializeWithTutorialHost:(id <PETutorialHostProtocol> _Nullable)tutorialHost;
/// Load a PETutorialUIModel from a JSON resource
/// \param bundle Name of the bundle to load the resource from
///
/// \param fileName Name of the json file
///
///
/// returns:
/// a model containing tutorial data
+ (PETutorialUIModel * _Nullable)loadTutorialFromJsonWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName patientContext:(PEPatientContext * _Nullable)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Load a PETutorialUIModel from a JSON resource
/// \param bundle Name of the bundle to load the resource from
///
/// \param fileName Name of the json file
///
/// \param replacementMap a list of tokens and their replacements to make in the tutorial model
///
///
/// returns:
/// a model containing tutorial data
+ (PETutorialUIModel * _Nullable)loadTutorialFromJsonWithBundle:(NSBundle * _Nonnull)bundle fileName:(NSString * _Nonnull)fileName patientContext:(PEPatientContext * _Nullable)patientContext replacementMap:(NSDictionary * _Nullable)replacementMap SWIFT_WARN_UNUSED_RESULT;
/// Show the most recently registered tutorial
+ (void)showCurrentTutorial;
/// Registers a tutorial, which will be automatically shown if it has not been finished and the application has automatic display configured
/// \param tutorialUIModel a tutorial model
///
+ (void)registerTutorialWithTutorialUIModel:(PETutorialUIModel * _Nullable)tutorialUIModel;
/// Unregisters a tutorial, which will hide it if it’s showing and remove the tutorial registration
/// \param tutorialUIModel a tutorial model
///
+ (void)unregisterTutorialWithTutorialUIModel:(PETutorialUIModel * _Nullable)tutorialUIModel;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Controls interaction with the PETutorialController and its hosting application
SWIFT_PROTOCOL("_TtP6PECore22PETutorialHostProtocol_")
@protocol PETutorialHostProtocol
/// Notifies the hosting application when a tutorial is available
/// \param available true if a tutorial is available
///
- (void)tutorialIsAvailable:(BOOL)available;
///
/// returns:
/// if tutorials show be shown automatically when registered
- (BOOL)showTutorialsAutomatically SWIFT_WARN_UNUSED_RESULT;
/// Notifies the hosting application that a tutorial has been completed
/// \param tutorialId the ID of the tutorial
///
- (void)didCompleteTutorial:(NSString * _Nullable)tutorialId;
/// \param tutorialId the ID of the tutorial
///
///
/// returns:
/// true if a tutorial has been completed already
- (BOOL)isTutorialCompleted:(NSString * _Nullable)tutorialId SWIFT_WARN_UNUSED_RESULT;
///
/// returns:
/// a NSDictionary containing string replacements that should always be made
- (NSDictionary * _Nullable)globalReplacementMap SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore17PETutorialUIModel")
@interface PETutorialUIModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol UIViewControllerTransitionCoordinator;

SWIFT_CLASS("_TtC6PECore24PETutorialViewController")
@interface PETutorialViewController : UIViewController
- (void)viewDidLoad;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
- (void)viewWillLayoutSubviews;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_PROTOCOL("_TtP6PECore36PEUpcomingOrdersComponentAPIProtocol_")
@protocol PEUpcomingOrdersComponentAPIProtocol <PEComponentAPIProtocol>
/// Determines if the user has access to upcoming orders
/// \param patientContext the current patient context
///
///
/// returns:
/// PEComponentAccessResult.AccessAllowed if the user has access, otherwise various reasons why they cannot
- (enum PEComponentAccessResult)hasAccessForUpcomingOrders:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a view controller for the Upcoming Orders activity
/// \param patientContext the current patient context
///
/// \param ordId the current upcoming order identifier
///
- (UIViewController * _Nonnull)getUpcomingOrdersViewController:(PEPatientContext * _Nonnull)patientContext :(NSString * _Nullable)ordId SWIFT_WARN_UNUSED_RESULT;
@end


/// Stores and provides the default URLs used by the web service engine
SWIFT_CLASS("_TtC6PECore13PEUrlProvider")
@interface PEUrlProvider : NSObject
/// private initializer, only instance <em>instance</em> is available
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <ul>
///   <li>
///     return: the single instance of the <em>PEUrlProvider</em> class
///   </li>
/// </ul>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) PEUrlProvider * _Nonnull instance;)
+ (PEUrlProvider * _Nonnull)instance SWIFT_WARN_UNUSED_RESULT;
/// Sets the default Url for a given <em>UrlType</em>
/// \param type the type of Url destination  to store
///
/// \param url a string containing the url
///
- (void)setUrlWithType:(enum UrlType)type url:(NSString * _Nonnull)url;
/// \param type the Url destination type
///
///
/// returns:
/// a string representing the Url
- (NSString * _Nullable)getUrlStringWithType:(enum UrlType)type SWIFT_WARN_UNUSED_RESULT;
@end



/// This protocol represents a person who is also the current MyChart user.
SWIFT_PROTOCOL("_TtP6PECore14PEUserProtocol_")
@protocol PEUserProtocol <PEPersonProtocol>
/// Get the corresponding patient for this user. The patient will be nil if the user is a non-patient proxy (NPP).
///
/// returns:
/// The corresponding patient for this user, if any.
- (id <PEPatientProtocol> _Nullable)getPatient SWIFT_WARN_UNUSED_RESULT;
/// Gets the current (authentication) token for the specified token type.
/// \param tokenType the type for which to get a token for
///
///
/// returns:
/// The current token for the specified token type.
- (NSString * _Nonnull)getToken:(enum TokenType)tokenType SWIFT_WARN_UNUSED_RESULT;
/// Sets a new (authentication) token with the specified token type.
/// \param token the token to be set
///
/// \param forType the type for which to set the token with
///
- (void)setToken:(NSString * _Nonnull)token forType:(enum TokenType)forType;
/// Gets the current locale string for webservices.
///
/// returns:
/// The current locale string for webservices.
- (NSString * _Nonnull)getCommandLocaleString SWIFT_WARN_UNUSED_RESULT;
/// Gets the current device ID.
///
/// returns:
/// The current device ID.
- (NSString * _Nonnull)getDeviceID SWIFT_WARN_UNUSED_RESULT;
/// Reports whether the user’s session has timed out
///
/// returns:
/// if the user’s session is timed out
- (BOOL)isTimeout SWIFT_WARN_UNUSED_RESULT;
/// Gets the user’s login username
///
/// returns:
/// string username
- (NSString * _Nonnull)getUsername SWIFT_WARN_UNUSED_RESULT;
/// If the current user can only access proxies and not self-access
@property (nonatomic, readonly) BOOL isRestrictedToProxySubjectAccess;
@end


SWIFT_PROTOCOL("_TtP6PECore30PEUtilMiscComponentAPIProtocol_")
@protocol PEUtilMiscComponentAPIProtocol <PEComponentAPIProtocol>
- (id _Nullable)getSettingWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP6PECore28PEVisitsComponentAPIProtocol_")
@protocol PEVisitsComponentAPIProtocol <PEComponentAPIProtocol>
/// Returns the eorgid QSP used when deep linking for an external org
///
/// returns:
/// A H2G QSP unique to MO past visit details, which will let us know if this is an external visit
- (NSString * _Nonnull)getMOPastVisitDetailsOrgIdQSP SWIFT_WARN_UNUSED_RESULT;
/// Returns the pageMode QSP when we should launch the MO Past Visit Details activity
///
/// returns:
/// A QSP unique to MO past visit details, the existence of which indicates the details should be launched in MO
- (NSString * _Nonnull)getMOPastVisitDetailsModeQSP SWIFT_WARN_UNUSED_RESULT;
/// Returns the isExternal QSP when the visit is an external H2G visit
///
/// returns:
/// A QSP unique to MO Past visit details letting us know the visit is H2G
- (NSString * _Nonnull)getMOPastVisitDetailsIsExternalQSP SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to the After Visit Summary activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForAfterVisitSummary:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the deep link provided is a H2G/external link
/// \param deepLinkUrl The deep link URL to check
///
///
/// returns:
/// true if the visit is external, false if local or deep link is nil
- (BOOL)isExternalVisitWithDeepLinkUrl:(NSString * _Nullable)deepLinkUrl SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user should use the MO Past Visit Details activity based on the deep link QSPs and if they have access
/// \param patientContext The patient context to check
///
/// \param deepLinkUrl The deep link URL invoked
///
/// \param isExternal Whether or not the visit is external
///
///
/// returns:
/// true if the user should access the MO Past Visit Details activity
- (BOOL)shouldUseMOPastVisitDetails:(PEPatientContext * _Nonnull)patientContext deepLinkUrl:(NSString * _Nullable)deepLinkUrl isExternal:(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Returns the view controller for the MO Past Visit Details activity
/// \param patientContext The patient context to check
///
/// \param isNotes whether or not this is specifically for notes
///
/// \param viewControllerTitle The title of the view controller
///
/// \param params key/value map of query string parameters
///
/// \param orgInfo External org info if external visit
///
///
/// returns:
/// the MO past visit details activity view controller
- (UIViewController * _Nonnull)getMOPastVisitDetailsController:(PEPatientContext * _Nonnull)patientContext isNotes:(BOOL)isNotes viewControllerTitle:(NSString * _Nullable)viewControllerTitle params:(NSDictionary<NSString *, NSString *> * _Nonnull)params orgInfo:(id <PEOrganizationInfoProtocol> _Nullable)orgInfo SWIFT_WARN_UNUSED_RESULT;
/// Returns true if the user has access to the Bedside Notes from Care Team (Visit Notes) activity
/// \param patientContext The patient context to check
///
///
/// returns:
/// true if the user has access
- (enum PEComponentAccessResult)hasAccessForBedsideVisitNotes:(PEPatientContext * _Nonnull)patientContext SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the Bedside After Visit Summary activity for a given encounter context
/// \param patientContext The encounter context to display
///
/// \param showHeader Whether a header should be shown in the MO activity
///
/// \param viewControllerTitle The name to display at the top of the activity
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getBedsideAfterVisitSummaryViewController:(PEEncounterContext * _Nonnull)encounterContext showHeader:(BOOL)showHeader viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that displays the AVS PDF
/// \param patientContext The patient context to display
///
/// \param dcsID Document ID to load
///
/// \param showBackButton Will show a back button within the view controller if true
///
/// \param setTitle Whether the view controller title is set
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getAvsPdfViewController:(PEPatientContext * _Nonnull)patientContext dcsID:(NSString * _Nullable)dcsID setTitle:(BOOL)setTitle showBackButton:(BOOL)showBackButton orgID:(NSString * _Nullable)orgID SWIFT_WARN_UNUSED_RESULT;
/// Gets a ViewController that opens the Bedside Notes from Care Team (Visit Notes) activity
/// \param encounterContext The encounter context to display
///
/// \param viewControllerTitle The name to display at the top of the activity
///
///
/// returns:
/// a ViewController to display, or nil if it’s not a valid request.
- (UIViewController * _Nullable)getBedsideVisitNotesViewController:(PEEncounterContext * _Nonnull)encounterContext viewControllerTitle:(NSString * _Nullable)viewControllerTitle SWIFT_WARN_UNUSED_RESULT;
@end


/// Protocol for the Workflow Step component
SWIFT_PROTOCOL("_TtP6PECore34PEWorkflowStepComponentAPIProtocol_")
@protocol PEWorkflowStepComponentAPIProtocol <PEComponentAPIProtocol>
/// Finds out whether the user has access to the workflow step feature for the given encounter.
/// \param encounterContext The encounter context for which to check access
///
///
/// returns:
/// Access result
- (enum PEComponentAccessResult)hasAccessForWorkflowStep:(PEEncounterContext * _Nonnull)encounterContext SWIFT_WARN_UNUSED_RESULT;
/// Gets the workflow step widget.
/// \param encounterContext The encounter
///
/// \param componentHost Optionally, the host for this component
///
///
/// returns:
/// the view controller for the widgette
- (UIViewController * _Nullable)getWorkflowStepWidget:(PEEncounterContext * _Nonnull)encounterContext componentHost:(id <PEComponentHostProtocol> _Nonnull)componentHost SWIFT_WARN_UNUSED_RESULT;
@end

@class UICollectionViewLayout;

/// Class do do a horizontal peeking collection (view pager)
SWIFT_CLASS("_TtC6PECore20PeekUICollectionView")
@interface PeekUICollectionView : UICollectionView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder SWIFT_UNAVAILABLE;
- (void)reloadData;
- (void)layoutSubviews;
- (void)scrollViewDidEndScrollingAnimation:(UIScrollView * _Nonnull)scrollView;
- (nonnull instancetype)initWithFrame:(CGRect)frame collectionViewLayout:(UICollectionViewLayout * _Nonnull)layout SWIFT_UNAVAILABLE;
@end

@class NSIndexPath;
@class UICollectionViewCell;

@interface PeekUICollectionView (SWIFT_EXTENSION(PECore)) <UICollectionViewDataSource>
- (NSInteger)collectionView:(UICollectionView * _Nonnull)collectionView numberOfItemsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UICollectionViewCell * _Nonnull)collectionView:(UICollectionView * _Nonnull)collectionView cellForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface PeekUICollectionView (SWIFT_EXTENSION(PECore)) <UICollectionViewDelegateFlowLayout>
- (CGSize)collectionView:(UICollectionView * _Nonnull)collectionView layout:(UICollectionViewLayout * _Nonnull)collectionViewLayout sizeForItemAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)scrollViewDidScroll:(UIScrollView * _Nonnull)scrollView;
- (void)scrollViewWillEndDragging:(UIScrollView * _Nonnull)scrollView withVelocity:(CGPoint)velocity targetContentOffset:(CGPoint * _Nonnull)targetContentOffset;
@end


/// A view for displaying patient/npp photos
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore15PersonImageView")
@interface PersonImageView : UIImageView
/// The border width around the image
@property (nonatomic) IBInspectable CGFloat borderWidth;
/// image views typically return the size of their un-resized image. This returns the actual size of the scaled image
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, PreLoginOnboardingStep, open) {
  PreLoginOnboardingStepWelcome = 0,
  PreLoginOnboardingStepNotifications = 1,
  PreLoginOnboardingStepLocation = 2,
  PreLoginOnboardingStepOrgSelect = 3,
};


/// Determines a locale to be used before logging in to a particular organization.
/// Pulls from device locales only
SWIFT_CLASS("_TtC6PECore21PreloginLocaleManager")
@interface PreloginLocaleManager : NSObject
/// The locale to be used in the prelogin context.
/// Calculated from user preferred languages and available translations on the device.
+ (PELocale * _Nonnull)getPreloginLocale SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore9PrintUtil")
@interface PrintUtil : NSObject
/// Prints the passed in webview with the jobName
+ (void)printWebViewWithWebView:(WKWebView * _Nonnull)webView jobName:(NSString * _Nonnull)jobName;
/// displays a short error toast when there’s an issue printing
+ (void)displayPrintErrorToast;
+ (BOOL)userHasAccessToPrintingWithUser:(id <PEUserProtocol> _Nonnull)user SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<UIAlertAction *> * _Nonnull)getNavBarPrintMenuActionsWithWebView:(WKWebView * _Nonnull)webView printJobName:(NSString * _Nonnull)printJobName SWIFT_WARN_UNUSED_RESULT;
/// Determines if the user has not yet seen printing onboarding on this device.
+ (BOOL)shouldShowPrintOnboarding SWIFT_WARN_UNUSED_RESULT;
/// Marks the device as having seen printing onboarding
+ (void)setPrintOnboardingSeen;
/// Checks if printing onboarding should show, and displays onboarding if needed
+ (void)presentPrintOnboardingIfNeededWithPresentingVC:(UIViewController * _Nonnull)presentingVC userContext:(PEUserContext * _Nonnull)userContext;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore15ProgressArcView")
@interface ProgressArcView : UIView
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified baseColor;
@property (nonatomic, strong) IBInspectable UIColor * _Null_unspecified progressColor;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)drawRect:(CGRect)rect;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6PECore11ProgressBar")
@interface ProgressBar : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end


/// Source from which a provider’s photo can be retrieved and cached. ImageLoader will automatically handle caching and blob server loading for objects of this type.
SWIFT_PROTOCOL("_TtP6PECore23ProviderImageDataSource_")
@protocol ProviderImageDataSource <CacheableImageDataSource>
/// This provider’s record ID
@property (nonatomic, readonly, copy) NSString * _Nonnull providerId;
/// Is the SER ID encrypted?
@property (nonatomic, readonly) BOOL isProviderIdEncrypted;
/// If true, the provider’s photo should be loaded from the blob server
@property (nonatomic, readonly) BOOL hasImageOnBlob;
/// Organization information to use when loading a provider’s blob photo
@property (nonatomic, readonly, strong) id <PEOrganizationInfoProtocol> _Nonnull organization;
@end


/// Circular image of a provider’s photo, or first initial if the photo cannot be loaded
SWIFT_CLASS("_TtC6PECore17ProviderImageView")
@interface ProviderImageView : UIImageView
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nullable)image highlightedImage:(UIImage * _Nullable)highlightedImage OBJC_DESIGNATED_INITIALIZER;
- (void)layoutSubviews;
@end


@interface ProviderImageView (SWIFT_EXTENSION(PECore)) <ImageLoaderDelegate>
- (void)didLoadImage:(UIImage * _Nonnull)image forSource:(id <ImageDataSource> _Nonnull)source;
- (void)didFailToLoadImageForSource:(id <ImageDataSource> _Nonnull)source;
@end


SWIFT_CLASS("_TtC6PECore6Region")
@interface Region : NSObject
@property (nonatomic, copy) NSString * _Nonnull code;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Unspecified;)
+ (Region * _Nonnull)Unspecified SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Australia;)
+ (Region * _Nonnull)Australia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Belgium;)
+ (Region * _Nonnull)Belgium SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Brazil;)
+ (Region * _Nonnull)Brazil SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Canada;)
+ (Region * _Nonnull)Canada SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull China;)
+ (Region * _Nonnull)China SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Denmark;)
+ (Region * _Nonnull)Denmark SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Finland;)
+ (Region * _Nonnull)Finland SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull France;)
+ (Region * _Nonnull)France SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Germany;)
+ (Region * _Nonnull)Germany SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Ireland;)
+ (Region * _Nonnull)Ireland SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Lebanon;)
+ (Region * _Nonnull)Lebanon SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Netherlands;)
+ (Region * _Nonnull)Netherlands SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Norway;)
+ (Region * _Nonnull)Norway SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull SaudiArabia;)
+ (Region * _Nonnull)SaudiArabia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Singapore;)
+ (Region * _Nonnull)Singapore SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Sweden;)
+ (Region * _Nonnull)Sweden SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Switzerland;)
+ (Region * _Nonnull)Switzerland SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull UnitedArabEmirates;)
+ (Region * _Nonnull)UnitedArabEmirates SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull UnitedKingdom;)
+ (Region * _Nonnull)UnitedKingdom SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull UnitedStates;)
+ (Region * _Nonnull)UnitedStates SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Russia;)
+ (Region * _Nonnull)Russia SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) Region * _Nonnull Epic;)
+ (Region * _Nonnull)Epic SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing an issue that can be reported back to Epic.
SWIFT_CLASS("_TtC6PECore15ReportableIssue")
@interface ReportableIssue : NSObject
/// Base initializer that sets the app version, OS version, app ID, and whether or not this build of the app is “internal”.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Protocol representing the information stored for a single RestrictedAccessToken, besides the actual token value
SWIFT_PROTOCOL("_TtP6PECore29RestrictedAccessTokenProtocol_")
@protocol RestrictedAccessTokenProtocol
@property (nonatomic, readonly) enum RestrictedAccessTokenType tokenType;
@property (nonatomic, readonly, copy) NSString * _Nullable username;
@property (nonatomic, readonly, copy) NSString * _Nullable orgId;
@property (nonatomic, readonly) BOOL hasValues;
@end

/// List of RestrictedAccessTokenTypes. Matches WPR 1910
typedef SWIFT_ENUM(NSInteger, RestrictedAccessTokenType, open) {
  RestrictedAccessTokenTypeAppleWatchHealthFeed = 1,
  RestrictedAccessTokenTypePreloginCovidStatus = 2,
};


SWIFT_CLASS("_TtC6PECore6Script")
@interface Script : NSObject
@property (nonatomic, copy) NSString * _Nonnull code;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol SearchableProtocol;

SWIFT_CLASS("_TtC6PECore19SearchConfiguration")
@interface SearchConfiguration : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)addSearchableObjectWithSearchableObject:(id <SearchableProtocol> _Nonnull)searchableObject;
@end


SWIFT_CLASS("_TtC6PECore12SearchResult")
@interface SearchResult : NSObject
- (id <SearchableProtocol> _Nonnull)getResultObject SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore18SearchableProtocol_")
@protocol SearchableProtocol
- (NSArray<NSString *> * _Nonnull)getSearchTerms SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore17SectionHeaderView")
@interface SectionHeaderView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


/// A class defining Feature Name constants of various category values from ECL 32010: MyChart Features
/// The comment for each category value indicates the category value ID, category value title, and occasionally additional information.
SWIFT_CLASS("_TtC6PECore14SecurityPoints")
@interface SecurityPoints : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// 8 | Alerts
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ALERTS;)
+ (NSString * _Nonnull)ALERTS SWIFT_WARN_UNUSED_RESULT;
/// 9 | Allergies - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ALLERGIES;)
+ (NSString * _Nonnull)ALLERGIES SWIFT_WARN_UNUSED_RESULT;
/// 37 | HealthIssues - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_ISSUES;)
+ (NSString * _Nonnull)HEALTH_ISSUES SWIFT_WARN_UNUSED_RESULT;
/// 39 | HealthReminders
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_REMINDERS;)
+ (NSString * _Nonnull)HEALTH_REMINDERS SWIFT_WARN_UNUSED_RESULT;
/// 41 | HealthReminder Request Appointment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_REMINDER_SCHEDULE;)
+ (NSString * _Nonnull)HEALTH_REMINDER_SCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 42 | HealthSnapshot - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_SNAPSHOT;)
+ (NSString * _Nonnull)HEALTH_SNAPSHOT SWIFT_WARN_UNUSED_RESULT;
/// 43 | Immunizations - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMMUNIZATIONS;)
+ (NSString * _Nonnull)IMMUNIZATIONS SWIFT_WARN_UNUSED_RESULT;
/// 52 | Medications - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDS_REVIEW;)
+ (NSString * _Nonnull)MEDS_REVIEW SWIFT_WARN_UNUSED_RESULT;
/// 54 | Medication Refill
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDS_REFILL;)
+ (NSString * _Nonnull)MEDS_REFILL SWIFT_WARN_UNUSED_RESULT;
/// 122 | Medication Direct Refill
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDS_DIRECT_REFILL;)
+ (NSString * _Nonnull)MEDS_DIRECT_REFILL SWIFT_WARN_UNUSED_RESULT;
/// 177 | View Physician Notes - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull NOTE_SHARING;)
+ (NSString * _Nonnull)NOTE_SHARING SWIFT_WARN_UNUSED_RESULT;
/// 178 | Goals Review
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull GOALS_REVIEW;)
+ (NSString * _Nonnull)GOALS_REVIEW SWIFT_WARN_UNUSED_RESULT;
/// 182 | Provider Widget List - Proxy Only | This security point controls the web only provider widget, which is not on mobile. On mobile, this controls the Care Team activity.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CARE_TEAM;)
+ (NSString * _Nonnull)CARE_TEAM SWIFT_WARN_UNUSED_RESULT;
/// 211 | Health Maintenance - Mark As Complete
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HM_MARK_COMPLETE;)
+ (NSString * _Nonnull)HM_MARK_COMPLETE SWIFT_WARN_UNUSED_RESULT;
/// 269 | Health Goals - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_GOALS_PROXY;)
+ (NSString * _Nonnull)HEALTH_GOALS_PROXY SWIFT_WARN_UNUSED_RESULT;
/// 10072 | F1 | Health Summary
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_SUMMARY;)
+ (NSString * _Nonnull)HEALTH_SUMMARY SWIFT_WARN_UNUSED_RESULT;
/// 10075 | F4 | Health Goals
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HEALTH_GOALS;)
+ (NSString * _Nonnull)HEALTH_GOALS SWIFT_WARN_UNUSED_RESULT;
/// 10123 | F49 | Organ Donor
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ORGAN_DONOR;)
+ (NSString * _Nonnull)ORGAN_DONOR SWIFT_WARN_UNUSED_RESULT;
/// 69 | Recent Appointments
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RECENT_APPOINTMENTS;)
+ (NSString * _Nonnull)RECENT_APPOINTMENTS SWIFT_WARN_UNUSED_RESULT;
/// 70 | Recent Visits List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull RECENT_VISITS;)
+ (NSString * _Nonnull)RECENT_VISITS SWIFT_WARN_UNUSED_RESULT;
/// 71 | Recent Visits Summary | refers to clinical details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull VISIT_SUMMARY;)
+ (NSString * _Nonnull)VISIT_SUMMARY SWIFT_WARN_UNUSED_RESULT;
/// 81 | Hospital Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PAST_ADMISSIONS;)
+ (NSString * _Nonnull)PAST_ADMISSIONS SWIFT_WARN_UNUSED_RESULT;
/// 10090 | F16 | MO Past Visit Details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_PAST_VISIT_DETAILS;)
+ (NSString * _Nonnull)MO_PAST_VISIT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 11 | Appointment Cancel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_CANCEL;)
+ (NSString * _Nonnull)APPT_CANCEL SWIFT_WARN_UNUSED_RESULT;
/// 12 | Appointment Confirm
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_CONFIRM;)
+ (NSString * _Nonnull)APPT_CONFIRM SWIFT_WARN_UNUSED_RESULT;
/// 13 | Appointment Details | refers to non-clinical details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_DETAILS;)
+ (NSString * _Nonnull)APPT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 14 | Upcoming Appt List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_REVIEW;)
+ (NSString * _Nonnull)APPT_REVIEW SWIFT_WARN_UNUSED_RESULT;
/// 25 | Driving Directions
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DRIVING_DIRECTIONS;)
+ (NSString * _Nonnull)DRIVING_DIRECTIONS SWIFT_WARN_UNUSED_RESULT;
/// 106 | Appointment Direct Cancel
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_DIRECT_CANCEL;)
+ (NSString * _Nonnull)APPT_DIRECT_CANCEL SWIFT_WARN_UNUSED_RESULT;
/// 164 | eCheck-In
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_ECHECKIN;)
+ (NSString * _Nonnull)APPT_ECHECKIN SWIFT_WARN_UNUSED_RESULT;
/// 189 | Allow Rescheduling
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_RESCHEDULING;)
+ (NSString * _Nonnull)APPT_RESCHEDULING SWIFT_WARN_UNUSED_RESULT;
/// 197 | Upcoming Preadmission
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PREADMISSION_DETAILS;)
+ (NSString * _Nonnull)PREADMISSION_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 161 | Auto Wait List Alerts | Appointment Offer
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull AUTO_WAITLIST;)
+ (NSString * _Nonnull)AUTO_WAITLIST SWIFT_WARN_UNUSED_RESULT;
/// 175 | Update Wait List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UPDATE_WAITLIST;)
+ (NSString * _Nonnull)UPDATE_WAITLIST SWIFT_WARN_UNUSED_RESULT;
/// 15 | Appointment Schedule Request
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_SCHEDULE_REQUEST;)
+ (NSString * _Nonnull)APPT_SCHEDULE_REQUEST SWIFT_WARN_UNUSED_RESULT;
/// 16 | Make Appointment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_SCHEDULE;)
+ (NSString * _Nonnull)APPT_SCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 17 | Make Appointment Using Ticket
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_TICKET_SCHEDULE;)
+ (NSString * _Nonnull)APPT_TICKET_SCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 67 | Provider Details
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PROVIDER_DETAILS;)
+ (NSString * _Nonnull)PROVIDER_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 47 | Labs - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LABS;)
+ (NSString * _Nonnull)LABS SWIFT_WARN_UNUSED_RESULT;
/// 48 | Lab Results - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LAB_DETAILS;)
+ (NSString * _Nonnull)LAB_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 96005 | DENY Bedside - Myhealth
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_TEST_RESULTS;)
+ (NSString * _Nonnull)DENY_BEDSIDE_TEST_RESULTS SWIFT_WARN_UNUSED_RESULT;
/// 24 | Customer Service Request
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CUSTOMER_SERVICE;)
+ (NSString * _Nonnull)CUSTOMER_SERVICE SWIFT_WARN_UNUSED_RESULT;
/// 45 | Messaging (fka Inbox)
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGES_INBOX;)
+ (NSString * _Nonnull)MESSAGES_INBOX SWIFT_WARN_UNUSED_RESULT;
/// 51 | Medical Advice Request
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MEDICAL_ADVICE;)
+ (NSString * _Nonnull)MEDICAL_ADVICE SWIFT_WARN_UNUSED_RESULT;
/// 55 | Outbox
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGES_OUTBOX;)
+ (NSString * _Nonnull)MESSAGES_OUTBOX SWIFT_WARN_UNUSED_RESULT;
/// 103 | Appointment Through Message | Scheduling Task
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MESSAGE_TASK_SCHEDULE_APPT;)
+ (NSString * _Nonnull)MESSAGE_TASK_SCHEDULE_APPT SWIFT_WARN_UNUSED_RESULT;
/// 113 | File Attachments - Messages | Image Upload
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMAGE_UPLOAD;)
+ (NSString * _Nonnull)IMAGE_UPLOAD SWIFT_WARN_UNUSED_RESULT;
/// 149 | File Attachments - E-Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMAGE_UPLOAD_EVISIT;)
+ (NSString * _Nonnull)IMAGE_UPLOAD_EVISIT SWIFT_WARN_UNUSED_RESULT;
/// 4501 | Messages - Billing | Billing Customer Service Messages
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BILLING_CUST_SVC;)
+ (NSString * _Nonnull)BILLING_CUST_SVC SWIFT_WARN_UNUSED_RESULT;
/// 10068 | A49 | Pharmacy Messages
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PHARMACY_MESSAGE;)
+ (NSString * _Nonnull)PHARMACY_MESSAGE SWIFT_WARN_UNUSED_RESULT;
/// 90 | History questionnaires
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull QUESTIONNAIRES_HISTORY;)
+ (NSString * _Nonnull)QUESTIONNAIRES_HISTORY SWIFT_WARN_UNUSED_RESULT;
/// 160 | General questionnaires
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull QUESTIONNAIRES_GENERAL;)
+ (NSString * _Nonnull)QUESTIONNAIRES_GENERAL SWIFT_WARN_UNUSED_RESULT;
/// 96013 | DENY Bedside - A few questions - general questions
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_QUESTIONNAIRES;)
+ (NSString * _Nonnull)DENY_BEDSIDE_QUESTIONNAIRES SWIFT_WARN_UNUSED_RESULT;
/// 3 | Account Inquiry
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ACCOUNT_INQUIRY;)
+ (NSString * _Nonnull)ACCOUNT_INQUIRY SWIFT_WARN_UNUSED_RESULT;
/// 92 | PB Statement Detail |  Note that there is no corresponding security for HB or SBO
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PB_STATEMENT_DETAILS;)
+ (NSString * _Nonnull)PB_STATEMENT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 108 | HB Account Inquiry
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HB_ACCOUNT_INQUIRY;)
+ (NSString * _Nonnull)HB_ACCOUNT_INQUIRY SWIFT_WARN_UNUSED_RESULT;
/// 115 | Copay Payment
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COPAY_PAYMENT;)
+ (NSString * _Nonnull)COPAY_PAYMENT SWIFT_WARN_UNUSED_RESULT;
/// 123 | SBO Account Inquiry
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SBO_ACCOUNT_INQUIRY;)
+ (NSString * _Nonnull)SBO_ACCOUNT_INQUIRY SWIFT_WARN_UNUSED_RESULT;
/// 158 | Premium Billing Summary
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PREMIUM_BILLING;)
+ (NSString * _Nonnull)PREMIUM_BILLING SWIFT_WARN_UNUSED_RESULT;
/// 195 | Patient Estimates
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_ESTIMATES;)
+ (NSString * _Nonnull)PATIENT_ESTIMATES SWIFT_WARN_UNUSED_RESULT;
/// 206 | Financial Assistance
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FINANCIAL_ASSISTANCE;)
+ (NSString * _Nonnull)FINANCIAL_ASSISTANCE SWIFT_WARN_UNUSED_RESULT;
/// 171 | Insurance ID Card
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull INSURANCE_ID_CARD;)
+ (NSString * _Nonnull)INSURANCE_ID_CARD SWIFT_WARN_UNUSED_RESULT;
/// 172 | HTML Insurance ID Card
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull HTML_INSURANCE_ID_CARD;)
+ (NSString * _Nonnull)HTML_INSURANCE_ID_CARD SWIFT_WARN_UNUSED_RESULT;
/// 91 | Patient Entered Flowsheet
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRACK_MY_HEALTH;)
+ (NSString * _Nonnull)TRACK_MY_HEALTH SWIFT_WARN_UNUSED_RESULT;
/// 162 | PEF - External Accounts
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EXTERNAL_PEF;)
+ (NSString * _Nonnull)EXTERNAL_PEF SWIFT_WARN_UNUSED_RESULT;
/// 152 | Patient Photo Upload & Replacement
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PERSONALIZE_PHOTO;)
+ (NSString * _Nonnull)PERSONALIZE_PHOTO SWIFT_WARN_UNUSED_RESULT;
/// 153 | Personalize MyChart
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PERSONALIZE;)
+ (NSString * _Nonnull)PERSONALIZE SWIFT_WARN_UNUSED_RESULT;
/// 151 | Telemedicine Scheduling
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_SCHEDULING;)
+ (NSString * _Nonnull)TELEMEDICINE_SCHEDULING SWIFT_WARN_UNUSED_RESULT;
/// 207 | On Demand Video Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_ON_DEMAND_VIDEO_VISITS;)
+ (NSString * _Nonnull)TELEMEDICINE_ON_DEMAND_VIDEO_VISITS SWIFT_WARN_UNUSED_RESULT;
/// 208 | QuickSchedule
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_QUICKSCHEDULE;)
+ (NSString * _Nonnull)TELEMEDICINE_QUICKSCHEDULE SWIFT_WARN_UNUSED_RESULT;
/// 234 | DENY Joining Video Visits
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TELEMEDICINE_DENY_JOINING_VIDEO_VISITS;)
+ (NSString * _Nonnull)TELEMEDICINE_DENY_JOINING_VIDEO_VISITS SWIFT_WARN_UNUSED_RESULT;
/// 179 | Upcoming Orders
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull UPCOMING_ORDERS;)
+ (NSString * _Nonnull)UPCOMING_ORDERS SWIFT_WARN_UNUSED_RESULT;
/// 2000 | View Patient Assigned Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_VIEW_ASSIGNED_TASKS;)
+ (NSString * _Nonnull)TODO_VIEW_ASSIGNED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2001 | Act On Patient Assigned Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_ACT_ON_ASSIGNED_TASKS;)
+ (NSString * _Nonnull)TODO_ACT_ON_ASSIGNED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2002 | Personalize Task Times
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_PERSONALIZE_ASSIGNED_TASKS;)
+ (NSString * _Nonnull)TODO_PERSONALIZE_ASSIGNED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2003 | View Patient Created Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_VIEW_PATIENT_CREATED_TASKS;)
+ (NSString * _Nonnull)TODO_VIEW_PATIENT_CREATED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 2004 | Act On Patient Created Tasks
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TODO_ACT_ON_PATIENT_CREATED_TASKS;)
+ (NSString * _Nonnull)TODO_ACT_ON_PATIENT_CREATED_TASKS SWIFT_WARN_UNUSED_RESULT;
/// 77 | User Audit Trail
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull USER_AUDIT_TRAIL;)
+ (NSString * _Nonnull)USER_AUDIT_TRAIL SWIFT_WARN_UNUSED_RESULT;
/// 126 | Download CCD
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DOWNLOAD_CCD;)
+ (NSString * _Nonnull)DOWNLOAD_CCD SWIFT_WARN_UNUSED_RESULT;
/// 154 | MyChart Audit Trail
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYCHART_AUDIT_TRAIL;)
+ (NSString * _Nonnull)MYCHART_AUDIT_TRAIL SWIFT_WARN_UNUSED_RESULT;
/// 155 | Download Visit Summary
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DOWNLOAD_VISIT_SUMMARY;)
+ (NSString * _Nonnull)DOWNLOAD_VISIT_SUMMARY SWIFT_WARN_UNUSED_RESULT;
/// 156 | Transmit Visit Summary CE
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRANSMIT_VISIT_SUMMARY_CE;)
+ (NSString * _Nonnull)TRANSMIT_VISIT_SUMMARY_CE SWIFT_WARN_UNUSED_RESULT;
/// 157 | Transmit Visit Summary Direct
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRANSMIT_VISIT_SUMMARY_DIRECT;)
+ (NSString * _Nonnull)TRANSMIT_VISIT_SUMMARY_DIRECT SWIFT_WARN_UNUSED_RESULT;
/// 159 | ROI Access
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ROI_ACCESS;)
+ (NSString * _Nonnull)ROI_ACCESS SWIFT_WARN_UNUSED_RESULT;
/// 188 | Transmit Visit Summary Email
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull TRANSMIT_VISIT_SUMMARY_EMAIL;)
+ (NSString * _Nonnull)TRANSMIT_VISIT_SUMMARY_EMAIL SWIFT_WARN_UNUSED_RESULT;
/// 217 | My Documents
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MY_DOCUMENTS;)
+ (NSString * _Nonnull)MY_DOCUMENTS SWIFT_WARN_UNUSED_RESULT;
/// 10 | Allergy Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ALLERGY_CONTENT;)
+ (NSString * _Nonnull)ALLERGY_CONTENT SWIFT_WARN_UNUSED_RESULT;
/// 38 | HealthIssue Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ICD_DETAILS;)
+ (NSString * _Nonnull)ICD_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 44 | Immunization Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull IMMUNIZATION_CONTENT;)
+ (NSString * _Nonnull)IMMUNIZATION_CONTENT SWIFT_WARN_UNUSED_RESULT;
/// 49 | Lab Content
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CPT_DETAILS;)
+ (NSString * _Nonnull)CPT_DETAILS SWIFT_WARN_UNUSED_RESULT;
/// 116 | Keyword Search
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull KEYWORD_SEARCH;)
+ (NSString * _Nonnull)KEYWORD_SEARCH SWIFT_WARN_UNUSED_RESULT;
/// 226 | Education List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EDUCATION_LIST;)
+ (NSString * _Nonnull)EDUCATION_LIST SWIFT_WARN_UNUSED_RESULT;
/// 10048 | A17
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BEDSIDE_MO_EDUCATION;)
+ (NSString * _Nonnull)BEDSIDE_MO_EDUCATION SWIFT_WARN_UNUSED_RESULT;
/// 96006 | DENY Bedside - To Learn
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_EDUCATION;)
+ (NSString * _Nonnull)DENY_BEDSIDE_EDUCATION SWIFT_WARN_UNUSED_RESULT;
/// 10108  | Bedside Self Service Tablet Code
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BEDSIDE_SELF_SERVICE_TABLET_CODE;)
+ (NSString * _Nonnull)BEDSIDE_SELF_SERVICE_TABLET_CODE SWIFT_WARN_UNUSED_RESULT;
/// 6 | View/Edit Personal Information - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PERSONAL_INFO_PROXY_ONLY;)
+ (NSString * _Nonnull)PERSONAL_INFO_PROXY_ONLY SWIFT_WARN_UNUSED_RESULT;
/// 50 | Letters
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull LETTERS;)
+ (NSString * _Nonnull)LETTERS SWIFT_WARN_UNUSED_RESULT;
/// 56 | Password Change
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CHANGE_PASSWORD;)
+ (NSString * _Nonnull)CHANGE_PASSWORD SWIFT_WARN_UNUSED_RESULT;
/// 59 | Patient Preferences
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_PREFERENCES;)
+ (NSString * _Nonnull)PATIENT_PREFERENCES SWIFT_WARN_UNUSED_RESULT;
/// 117 | E-Visit
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EVISIT;)
+ (NSString * _Nonnull)EVISIT SWIFT_WARN_UNUSED_RESULT;
/// 198 | Manage External Accounts | Community connections for H2G
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MANAGE_EXTERNAL_ACCOUNTS;)
+ (NSString * _Nonnull)MANAGE_EXTERNAL_ACCOUNTS SWIFT_WARN_UNUSED_RESULT;
/// 203 | Patient Visit Guide
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull PATIENT_VISIT_GUIDE;)
+ (NSString * _Nonnull)PATIENT_VISIT_GUIDE SWIFT_WARN_UNUSED_RESULT;
/// 210 | Geolocation Self Arrival | Appointment auto-arrival with geolocation or Bluetooth beacons
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull APPT_SELF_ARRIVAL;)
+ (NSString * _Nonnull)APPT_SELF_ARRIVAL SWIFT_WARN_UNUSED_RESULT;
/// 214 | Self-Triage | Symptom Checker
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SYMPTOM_CHECKER;)
+ (NSString * _Nonnull)SYMPTOM_CHECKER SWIFT_WARN_UNUSED_RESULT;
/// 220 | DENY Share Everywhere
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_SHARE_EVERYWHERE;)
+ (NSString * _Nonnull)DENY_SHARE_EVERYWHERE SWIFT_WARN_UNUSED_RESULT;
/// 225 | Send Proxy Invite | MO Family access
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull SEND_PROXY_INVITE;)
+ (NSString * _Nonnull)SEND_PROXY_INVITE SWIFT_WARN_UNUSED_RESULT;
/// 239 | DENY On My Way | MO On My Way
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_ON_MY_WAY;)
+ (NSString * _Nonnull)DENY_ON_MY_WAY SWIFT_WARN_UNUSED_RESULT;
/// 240 | DENY Infectious Disease Status | Infection Control
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_INFECTIOUS_DISEASE_STATUS;)
+ (NSString * _Nonnull)DENY_INFECTIOUS_DISEASE_STATUS SWIFT_WARN_UNUSED_RESULT;
/// 10001 | A2
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_COMM_CENTER;)
+ (NSString * _Nonnull)MO_COMM_CENTER SWIFT_WARN_UNUSED_RESULT;
/// 10009 | A3
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull EDIT_PERSONAL_INFORMATION;)
+ (NSString * _Nonnull)EDIT_PERSONAL_INFORMATION SWIFT_WARN_UNUSED_RESULT;
/// 10014 | A7
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull ONBOARDING_HOW_TO_VIDEO;)
+ (NSString * _Nonnull)ONBOARDING_HOW_TO_VIDEO SWIFT_WARN_UNUSED_RESULT;
/// 10043 | A33 | COVID Status
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COVID_STATUS;)
+ (NSString * _Nonnull)COVID_STATUS SWIFT_WARN_UNUSED_RESULT;
/// 10044 | A34 | COVID Test Results
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull COVID_TEST_RESULTS;)
+ (NSString * _Nonnull)COVID_TEST_RESULTS SWIFT_WARN_UNUSED_RESULT;
/// 10053 | A40 | Account Deactivation
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DEACTIVATE_ACCOUNT;)
+ (NSString * _Nonnull)DEACTIVATE_ACCOUNT SWIFT_WARN_UNUSED_RESULT;
/// 10055 | A42
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_TESTRESULTS;)
+ (NSString * _Nonnull)MO_TESTRESULTS SWIFT_WARN_UNUSED_RESULT;
/// 10056 | E1
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull FEATURE_LIBRARY;)
+ (NSString * _Nonnull)FEATURE_LIBRARY SWIFT_WARN_UNUSED_RESULT;
/// 10069 | A51
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOBILE_PRINTING;)
+ (NSString * _Nonnull)MOBILE_PRINTING SWIFT_WARN_UNUSED_RESULT;
/// 10070 | A52
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MO_BEDSIDE_TESTRESULTS;)
+ (NSString * _Nonnull)MO_BEDSIDE_TESTRESULTS SWIFT_WARN_UNUSED_RESULT;
/// 10073 | F2 | Always-on feature for retrieving locale settings from server. Falls back to phonebook locale settings if disabled by off-switch.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MOBILE_SERVER_LOCALE_SETTINGS;)
+ (NSString * _Nonnull)MOBILE_SERVER_LOCALE_SETTINGS SWIFT_WARN_UNUSED_RESULT;
/// 10093 | F19 | Controlled by an ELF. If disabled, secondary login is disabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYC_MOBILE_SECONDARY_LOGIN;)
+ (NSString * _Nonnull)MYC_MOBILE_SECONDARY_LOGIN SWIFT_WARN_UNUSED_RESULT;
/// 10094 | F20 | Controlled by an ELF. If disabled, passcode login is disabled
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull MYC_MOBILE_PASSCODE_LOGIN;)
+ (NSString * _Nonnull)MYC_MOBILE_PASSCODE_LOGIN SWIFT_WARN_UNUSED_RESULT;
/// 96001 | DENY Bedside - Happening soon
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_HAPPENING_SOON;)
+ (NSString * _Nonnull)DENY_BEDSIDE_HAPPENING_SOON SWIFT_WARN_UNUSED_RESULT;
/// 96002 | DENY Bedside - DENY Bedside - Taking care of me
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_CARE_TEAM;)
+ (NSString * _Nonnull)DENY_BEDSIDE_CARE_TEAM SWIFT_WARN_UNUSED_RESULT;
/// 96003 | DENY Bedside - I would like…
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_REQUESTS;)
+ (NSString * _Nonnull)DENY_BEDSIDE_REQUESTS SWIFT_WARN_UNUSED_RESULT;
/// 96010 | MyChartNow Emergency - Happening Now - Proxy Only
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull BEDSIDE_WORKFLOW_STEP;)
+ (NSString * _Nonnull)BEDSIDE_WORKFLOW_STEP SWIFT_WARN_UNUSED_RESULT;
/// 96014 | DENY Bedside - Clinical notes
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_CLINICAL_NOTES;)
+ (NSString * _Nonnull)DENY_BEDSIDE_CLINICAL_NOTES SWIFT_WARN_UNUSED_RESULT;
/// 96017 | DENY Bedside - Sign forms
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_BEDSIDE_CONSENTS;)
+ (NSString * _Nonnull)DENY_BEDSIDE_CONSENTS SWIFT_WARN_UNUSED_RESULT;
/// 96020 | DENY MyChartNow - Problems List
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_MYCHARTNOW_PROBLEM_LIST;)
+ (NSString * _Nonnull)DENY_MYCHARTNOW_PROBLEM_LIST SWIFT_WARN_UNUSED_RESULT;
/// 96021 | DENY MyChartNow - Medications
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_MYCHARTNOW_MEDICATIONS;)
+ (NSString * _Nonnull)DENY_MYCHARTNOW_MEDICATIONS SWIFT_WARN_UNUSED_RESULT;
/// 96025 | DENY Bedside - Continuing Care
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull DENY_CONTINUING_CARE;)
+ (NSString * _Nonnull)DENY_CONTINUING_CARE SWIFT_WARN_UNUSED_RESULT;
@end



SWIFT_CLASS("_TtC6PECore17ServerDebugHeader")
@interface ServerDebugHeader : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull field;
@property (nonatomic, readonly, copy) NSString * _Nonnull value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ServerDebugProvider")
@interface ServerDebugProvider : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) ServerDebugProvider * _Nonnull shared;)
+ (ServerDebugProvider * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Initialize with default runtime app state.
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@property (nonatomic, readonly, strong) ServerDebugHeader * _Nullable webServiceHeader;
@end


/// Simple implementation of a cachable image
SWIFT_CLASS("_TtC6PECore29SimpleCachableImageDataSource")
@interface SimpleCachableImageDataSource : NSObject <CacheableImageDataSource>
@property (nonatomic, copy) NSString * _Nonnull imageURL;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// View for showing site wide theme override info
SWIFT_CLASS("_TtC6PECore35SiteWideThemeOverrideViewController")
@interface SiteWideThemeOverrideViewController : UIViewController
+ (SiteWideThemeOverrideViewController * _Nonnull)getInstance SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder SWIFT_UNAVAILABLE;
- (void)viewDidLoad;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil SWIFT_UNAVAILABLE;
@end


SWIFT_CLASS("_TtC6PECore15SmartStyleModel")
@interface SmartStyleModel : NSObject
- (nonnull instancetype)init:(NSString * _Nonnull)colorBackground :(NSString * _Nonnull)colorError :(NSString * _Nonnull)colorHighlight :(NSString * _Nonnull)colorModalBackdrop :(NSString * _Nonnull)colorSuccess :(NSString * _Nonnull)colorText :(NSString * _Nonnull)dimBorderRadius :(NSString * _Nonnull)dimFontSize :(NSString * _Nonnull)dimSpacingSize :(NSString * _Nonnull)fontFamilyBody :(NSString * _Nonnull)fontFamilyHeading OBJC_DESIGNATED_INITIALIZER;
+ (SmartStyleModel * _Nonnull)getSmartStyleModelFromThemeWithTheme:(id <PEThemeProtocol> _Nonnull)theme SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Search Engine for searching through objects based on string comparisons using the Jaro Winkler formula
SWIFT_CLASS("_TtC6PECore18StringSearchEngine")
@interface StringSearchEngine : NSObject
- (nonnull instancetype)initWithSearchConfiguration:(SearchConfiguration * _Nonnull)searchConfiguration OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Sets a function that will filter search results. If the function returns false then the searchable object will be skipped.
/// \param function the filter function to set. Null will clear the filter
///
- (void)setFilterFunctionWithFunction:(BOOL (^ _Nullable)(id <SearchableProtocol> _Nonnull))function;
/// Adds an object to the list of searchable objects
/// \param searchableObject the object to be added to the searchable object list
///
- (void)addSearchableObjectWithSearchableObject:(id <SearchableProtocol> _Nonnull)searchableObject;
/// Get search results for a given input string
/// \param searchString the user input search string to compare
///
- (NSArray<SearchResult *> * _Nonnull)getSearchResultsWithSearchString:(NSString * _Nonnull)searchString SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6PECore10StringUtil")
@interface StringUtil : NSObject
+ (BOOL)stringContainsOnlyAllowedCharacters:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, TextAlignment, open) {
  TextAlignmentRightToLeft = 0,
  TextAlignmentLeftToRight = 1,
};


SWIFT_PROTOCOL("_TtP6PECore17TextStyleProtocol_")
@protocol TextStyleProtocol <BaseStyleProtocol>
- (enum FontRamp)fontRamp SWIFT_WARN_UNUSED_RESULT;
- (float)fontSize SWIFT_WARN_UNUSED_RESULT;
- (enum FontWeight)fontWeight SWIFT_WARN_UNUSED_RESULT;
- (UIColor * _Nonnull)fontColorWithForceUseStyleColor:(BOOL)forceUseStyleColor SWIFT_WARN_UNUSED_RESULT;
@end


enum ToastDuration : NSInteger;

SWIFT_CLASS("_TtC6PECore5Toast")
@interface Toast : UIView
/// Makes an error toast with the provided text and duration.
/// \param text the text to display in the toast
///
/// \param duration the duration to display the toast for
///
///
/// returns:
/// A toast with the provided text and duration.
+ (Toast * _Nullable)makeErrorWithText:(NSString * _Nonnull)text duration:(enum ToastDuration)duration SWIFT_WARN_UNUSED_RESULT;
/// Makes a toast with the provided text and duration.
/// \param text the text to display in the toast
///
/// \param duration the duration to display the toast for
///
///
/// returns:
/// A toast with the provided text and duration.
+ (Toast * _Nullable)makeWithText:(NSString * _Nonnull)text duration:(enum ToastDuration)duration SWIFT_WARN_UNUSED_RESULT;
/// Shows the toast in the application’s top-most window.  Note that when the keyboard is shown or hidden, the toast will automatically be moved to the “new” top-most window.
- (Toast * _Nonnull)show;
/// Executes the provided callback when VoiceOver has finished reading the current prompt. If VoiceOver is not currently running, the callback is executed immediately.
/// \param callback the callback to execute
///
- (void)onAnnouncementDidFinishNotification:(void (^ _Nonnull)(void))callback;
/// Hides the toast.
- (void)hide;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// Enum representing the valid toast durations
typedef SWIFT_ENUM(NSInteger, ToastDuration, open) {
  ToastDurationShort = 0,
  ToastDurationLong = 1,
};


/// Stores the default tokens in use by the web service engine
SWIFT_CLASS("_TtC6PECore13TokenProvider")
@interface TokenProvider : NSObject
/// private initializer, only instance <em>instance</em> is available
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Types of authentication tokens that are used with Epic endpoints
typedef SWIFT_ENUM(NSInteger, TokenType, open) {
/// Use the token type specified at the category level
  TokenTypeDefault = 0,
/// The MyChart Bedside token type
  TokenTypeBedside = 1,
/// The MyChart Mobile token type
  TokenTypeMyChart = 2,
/// The OAuth2 token type (used by Bedside TV)
  TokenTypeOAuth2 = 3,
};


SWIFT_CLASS("_TtC6PECore14ToolTipManager")
@interface ToolTipManager : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
+ (void)setUpToolTips:(UIViewController * _Nonnull)viewController;
@end



/// Helper class to determine settings for a 2FA setting
SWIFT_CLASS("_TtC6PECore27TwoFactorAccountSettingInfo")
@interface TwoFactorAccountSettingInfo : NSObject
@property (nonatomic, readonly) BOOL showOption;
@property (nonatomic, readonly) BOOL userEnabled;
@property (nonatomic, readonly) BOOL allowToggle;
- (nonnull instancetype)initWithShowOption:(BOOL)showOption userEnabled:(BOOL)userEnabled allowToggle:(BOOL)allowToggle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol representing user and system information regarding two-factor authentication.
SWIFT_PROTOCOL("_TtP6PECore28TwoFactorInformationProtocol_")
@protocol TwoFactorInformationProtocol
/// Indicates whether or not the user can opt in-to/out-of email or SMS based two-factor authentication, based on current configuration.
@property (nonatomic, readonly) BOOL allowOptIn;
/// Indicates whether or not the user is currently opted into email or SMS based two-factor authentication.
@property (nonatomic, readonly) BOOL isOptedIn;
/// Indicates whether or not the user can opt in-to/out-of TOTP based two-factor authentication, based on current configuration.
@property (nonatomic, readonly) BOOL allowOptInTOTP;
/// Indicates whether or not the user is currently opted into TOTP based two-factor authentication.
@property (nonatomic, readonly) BOOL isOptedInTOTP;
/// Indicates whether or not email is a delivery method configured in the system for two-factor codes.
@property (nonatomic, readonly) BOOL isEmailDeliveryConfigured;
/// Indicates whether or not SMS is a delivery method configured in the system for two-factor codes.
@property (nonatomic, readonly) BOOL isSMSDeliveryConfigured;
/// If Two Factor is required.  Meaning they can not disable 2FA if only 1 option is enabled.
@property (nonatomic, readonly) BOOL isTwoFactorRequired;
/// Information about the two factor sms/email account settings
@property (nonatomic, readonly, strong) TwoFactorAccountSettingInfo * _Nonnull smsEmailAccountSettingsInfo;
/// Information about the two factor totp account settings
@property (nonatomic, readonly, strong) TwoFactorAccountSettingInfo * _Nonnull totpAccountSettingsInfo;
@end


@interface UIAlertController (SWIFT_EXTENSION(PECore))
/// Adds a button with the provided title and handler to the alert.
/// \param title the title for the button
///
/// \param handler the handler to invoke when the button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds an “OK” button with the provided listener to the alert.
/// \param handler the handler to invoke when the button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addOKButtonWithHandler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds a “positive” button with the provided title and handler to the alert. A “positive” button should typically be paired with a “negative” button when presenting the user with a choice.
/// \param title the title for the positive button
///
/// \param handler the handler to invoke when the positive button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addPositiveButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
/// Adds a “negative” button with the provided title and handler to the alert. A “negative” button should typically be paired with a “positive” button when presenting the user with a choice.
/// \param title the title for the negative button
///
/// \param handler the handler to invoke when the negative button is tapped, or nil to simply dismiss the alert
///
- (UIAlertController * _Nonnull)addNegativeButtonWithTitle:(NSString * _Nonnull)title handler:(void (^ _Nullable)(UIAlertAction * _Nonnull))handler;
@end



@interface UIColor (SWIFT_EXTENSION(PECore))
/// Standard color for secondary text and subtitles. Matches WPColor-TextSubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull subtleTextColor;)
+ (UIColor * _Nonnull)subtleTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text that is slightly less important than the primary text. Matches WPColor-TextSlightlySubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull slightlySubtleTextColor;)
+ (UIColor * _Nonnull)slightlySubtleTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text indicating an error or other urgent information. Matches WPColor-TextError.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull errorTextColor;)
+ (UIColor * _Nonnull)errorTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for disabled buttons and other controls. Matches WPColor-ActionButtonDisabledBack.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabledButtonColor;)
+ (UIColor * _Nonnull)disabledButtonColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for disabled buttons and other controls. Matches WPColor-ActionButtonDisabledFore.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull disabledButtonTextColor;)
+ (UIColor * _Nonnull)disabledButtonTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for badges.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull badgeColor;)
+ (UIColor * _Nonnull)badgeColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for text used to indicate amounts of money. Matches WPColor-TextMoney.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull moneyTextColor;)
+ (UIColor * _Nonnull)moneyTextColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for dividers, which separate rows in a list or otherwise divide a view.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull dividerColor;)
+ (UIColor * _Nonnull)dividerColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for banner borders. Matches WPColor-BorderVerySubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull bannerBorderColor;)
+ (UIColor * _Nonnull)bannerBorderColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for tab bar items that are not selected. Matches WPColor-TextSubtle.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nonnull tabBarItemColor;)
+ (UIColor * _Nonnull)tabBarItemColor SWIFT_WARN_UNUSED_RESULT;
/// Standard color for tab bars.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) UIColor * _Nullable tabBarColor;)
+ (UIColor * _Nullable)tabBarColor SWIFT_WARN_UNUSED_RESULT;
/// Returns the color (black or white) to use for text displayed on top of this color to meet WCAG guidelines for contrast.
- (UIColor * _Nonnull)getContrastingTextColor SWIFT_WARN_UNUSED_RESULT;
@end





@interface UIImage (SWIFT_EXTENSION(PECore))
/// Create a UIImage from the customer’s bundle if it exists, falling back on the default if not
/// \param brandedName the name for the resource in the customer or Epic’s bundle
///
/// \param defaultBundle the bundle to use if not found in the customer’s; defaults to main application bundle
///
+ (UIImage * _Nullable)brandedImageNamed:(NSString * _Nonnull)brandedName defaultBundle:(NSBundle * _Nonnull)defaultBundle SWIFT_WARN_UNUSED_RESULT;
/// Create a UIImage from the customer’s bundle if it exists, falling back on the default if not
/// \param brandedName the name for the resource in the customer or Epic’s bundle
///
/// \param defaultBundle the bundle to use if not found in the customer’s; defaults to main application bundle
///
- (nullable instancetype)initWithBrandedName:(NSString * _Nonnull)brandedName defaultBundle:(NSBundle * _Nonnull)defaultBundle;
@end







@interface UIView (SWIFT_EXTENSION(PECore))
@property (nonatomic, copy) IBInspectable NSString * _Nullable tutorialViewID;
/// Adds a subview and applies constraints such that the subview fills the entire view.
/// \param view the subview to add
///
- (void)addAndFillWithSubview:(UIView * _Nonnull)view;
/// Adds a subview and applies constraints such that the subview fills the entire view.
/// \param view the subview to add
///
/// \param shouldConstrainToKeyboard boolean for if webview should stay above mobile keyboard
///
/// \param shouldConstrainToSafeArea boolean for if webview should stay within safe areas
///
- (void)addAndFillWithSubview:(UIView * _Nonnull)view shouldConstrainToKeyboard:(BOOL)shouldConstrainToKeyboard shouldConstrainToSafeArea:(BOOL)shouldConstrainToSafeArea;
@end



@interface UIViewController (SWIFT_EXTENSION(PECore))
/// Computed property used to determine if this view controller is an instance of UIHostingController
@property (nonatomic, readonly) BOOL isUIHostingController;
@end


@interface UIViewController (SWIFT_EXTENSION(PECore))
/// Hide the navigation bar. This function is overridden in the homepage so that library customers can have control over whether Epic controls this behavior, or they do
/// \param shouldShow should it show or hide
///
- (void)showNavigationBar:(BOOL)shouldShow;
/// Dismiss this view controller all the way to the login screen
/// \param loginViewController the view controller that is the login view controller
///
- (void)dismissToLoginController:(UIViewController * _Nonnull)loginViewController;
/// Gets the login view controller among the various ways a library custom may have presented the homepage post-login
- (UIViewController * _Nullable)getLoginViewController SWIFT_WARN_UNUSED_RESULT;
/// Presents a view controller after asserting that another view controller isn’t already presented. Use this when you are not sure about the state of the current view controller (for example, when getting the top view controller)
- (void)presentSafely:(UIViewController * _Nonnull)vcToPresent animated:(BOOL)animated completion:(void (^ _Nullable)(void))completion;
@end

@class NSURLSession;
@class NSURLSessionTask;
@class NSHTTPURLResponse;
@class NSURLRequest;

/// This class acts as the delegate for the underlying URLsession.
/// It helps to configure and create the session with the correct <em>URLSessionConfiguration</em>,
/// delegate and queue on which the completion blcoks will be called.
/// The shared/singleton manager is also the delegate for the session and must
/// implement any methods of interest from *URLSessionDelegate, URLSessionTaskDelegate,
/// URLSessionDataDelegate, URLSessionDownloadDelegate etc.
SWIFT_CLASS("_TtC6PECore17URLSessionManager")
@interface URLSessionManager : NSObject <NSURLSessionTaskDelegate>
/// Private Initializer
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// This <em>URLSessionTaskDelegaste</em> method checks if the statusCode matches HTTP_MOVED_TEMP/PERM
/// status codes and only allows redirection if the original request was not to an https URL.
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
@end

@class UIWindow;

SWIFT_CLASS("_TtC6PECore6UiUtil")
@interface UiUtil : NSObject
/// Returns the application’s key window
+ (UIWindow * _Nullable)keyWindow SWIFT_WARN_UNUSED_RESULT;
/// Gets the root view controller of the key window of the application
///
/// returns:
/// the root view controller of the key window of the application, or nil if there are no key windows
+ (UIViewController * _Nullable)getRootViewController SWIFT_WARN_UNUSED_RESULT;
/// Gets the root navigation controller of the application’s current keyWindow
/// This may not return a valid value in the context of a self-submitted app
/// seealso:
/// <code>UiUtil/keyWindow()</code>
///
/// returns:
/// the root navigation controller of the application’s current keyWindow, or nil if one was not found
+ (UINavigationController * _Nullable)getRootNavigationController SWIFT_WARN_UNUSED_RESULT;
/// Get the first navigation controller that is a descendant of the passed in view controller
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     viewController: the controller we are going down the hierarchy of
///   </li>
/// </ul>
///
/// returns:
/// the first navigation controller we find, or nil
+ (UINavigationController * _Nullable)getNavControllerChildOf:(UIViewController * _Nullable)viewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the orientation of the key window
+ (UIInterfaceOrientation)interfaceOrientation SWIFT_WARN_UNUSED_RESULT;
+ (CGRect)statusBarFrame SWIFT_WARN_UNUSED_RESULT;
/// Determines the right UIStatusBarStyle for a given color
/// \param color color to match, e.g. the navigation bar’s text color
///
///
/// returns:
/// corresponding UIStatusBarStyle enum value
+ (UIStatusBarStyle)statusBarStyleMatchingColor:(UIColor * _Nonnull)color SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum UnreadIndicatorStyle : NSInteger;

/// View for displaying unread indicators, which provide a visual indication of whether or not an item has been read by the user.
SWIFT_CLASS("_TtC6PECore19UnreadIndicatorView")
@interface UnreadIndicatorView : UIView
/// Default initializer
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// IB initializer
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// Sets the style for this indicator.
/// \param style the style for the indicator
///
- (void)setStyle:(enum UnreadIndicatorStyle)style;
/// Sets whether or not this indicator is indicating an unread status.
/// \param isUnread set to true to indicate an unread status, false to indicate an read status
///
- (void)setUnread:(BOOL)isUnread;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

typedef SWIFT_ENUM(NSInteger, UnreadIndicatorStyle, open) {
  UnreadIndicatorStyleUnknown = 0,
  UnreadIndicatorStyleBillingStatement = 1,
  UnreadIndicatorStyleLabResult = 2,
  UnreadIndicatorStyleImagingResult = 3,
  UnreadIndicatorStyleOtherResult = 4,
  UnreadIndicatorStyleProcedureResult = 5,
  UnreadIndicatorStyleVisitAVS = 6,
  UnreadIndicatorStyleVisitNote = 7,
};

/// Types of servers that the web service framework can connect to
typedef SWIFT_ENUM(NSInteger, UrlType, open) {
/// An Epic Interconnect instance
  UrlTypeInterconnect = 0,
/// An Epic Web Blob Server
  UrlTypeWebBlob = 1,
/// A custom server
  UrlTypeNone = 2,
/// An OAuth2 authorization server
  UrlTypeOAuth2 = 3,
/// An instance of the mychart website
  UrlTypeMyChartWebsite = 4,
};


/// Provides the appropriate user agent string for the application calling a web service
SWIFT_CLASS("_TtC6PECore17UserAgentProvider")
@interface UserAgentProvider : NSObject
/// The static app version according to Epic’s release stream (does not change with any branded configuration)
@property (nonatomic, readonly, copy) NSString * _Nonnull epicVersion;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull epicVersion;)
+ (NSString * _Nonnull)epicVersion SWIFT_WARN_UNUSED_RESULT;
/// returns the single instance of the <em>UserAgentProvider</em>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) UserAgentProvider * _Null_unspecified instance;)
+ (UserAgentProvider * _Null_unspecified)instance SWIFT_WARN_UNUSED_RESULT;
+ (void)setInstance:(UserAgentProvider * _Null_unspecified)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6PECore12ValidateUtil")
@interface ValidateUtil : NSObject
/// Check if an email address is valid or not. The email address now supports some non-English alphabet characters,
/// including ASCII 192-255 and Char 131, 138, 140, 142, 154, 156, 158, and 159 (ƒŠŒŽšœžŸ).
/// <p/>
/// This logic is consistent with PatientEngagement\Source\Shared\Web\Validation\ValidationHelpers.cs
/// although it's more complicated in server isValidEmailAddress^%ZeSMTP
/// @param email the email address to check
/// @return true if the email address is valid, false otherwise
+ (BOOL)isValidEmail:(NSString * _Nullable)email SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


/// Card view for patient-facing “how to” videos
IB_DESIGNABLE
SWIFT_CLASS("_TtC6PECore13VideoCardView")
@interface VideoCardView : SelfLoadingView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6PECore22VideoResponseViewModel")
@interface VideoResponseViewModel : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





/// Defines the properties of a category of web services corresponding to a bundle of endpoints
/// contained under a common path on a server
SWIFT_CLASS("_TtC6PECore18WebServiceCategory")
@interface WebServiceCategory : NSObject
/// The namespace, or sub directory that this category of service is located under
@property (nonatomic, copy, getter=namespace, setter=setNamespace:) NSString * _Nullable namespace_;
/// The format of the request parameters
@property (nonatomic) enum PERequestFormat requestFormat;
/// The format of the expected response body
@property (nonatomic) enum PEResponseFormat responseFormat;
/// The authentication token type to use with this service category
@property (nonatomic) enum TokenType tokenType;
/// The destination server URL type to use with this service category
@property (nonatomic) enum UrlType urlType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// PECore’s defined Error Types.
typedef SWIFT_ENUM(NSInteger, WebServiceErrorType, open) {
/// This type of <em>WebServiceFailedError</em> is used when there is something wrong with the URL
/// it’s components or it’s params.
  WebServiceErrorTypeURLComposition = 0,
/// This type of <em>WebServiceFailedError</em> is used when a urlTemplate needs the patient index
/// but it is not available from the Context in WebService. This happens when the
/// template has the {PatientIndex} in it but the index cannot be obtained.
  WebServiceErrorTypePatientIndexNotFound = 1,
/// This type of <em>WebServiceFailedError</em> is used whenever something goes wrong with encoding
/// or creating the request.
  WebServiceErrorTypeRequestParsing = 2,
/// This type of <em>WebServiceFailedError</em> is used whenever something goes wrong with parsing
/// or decoding the response.
  WebServiceErrorTypeResponseParsing = 3,
/// This type of <em>WebServiceFailedError</em> is used whenever a session task fails with an error
/// that suggests there was some error with the security layer. These may include
/// errors in the NSErrorCocoaDomain like : NSURLErrorSecureConnectionFailed,
/// NSURLErrorServerCertificateHasBadDate, NSURLErrorClientCertificateRequired etc.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebSecurity = 4,
/// This type of <em>WebServiceFailedError</em> is used when something goes wrong with the client.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClient = 5,
/// This type of <em>WebServiceFailedError</em> is used when a response code 401 Unauthorized is received
/// from the server or if errors like NSURLErrorUserAuthenticationRequired are received.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClientUnauthorized = 6,
/// This type of <em>WebServiceFailedError</em> is used when the response code is in the 4xx range
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClientConnection = 7,
/// This type of <em>WebServiceFailedError</em> is used when the response code is 400 Bad Request
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebClientBadRequest = 8,
/// This type of <em>WebServiceFailedError</em> is used when the response code is in the 5xx range
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeWebServer = 9,
/// This type of <em>WebServiceFailedError</em> is used whenever the dataTask completes with the
/// error : NSURLErrorTimedOut
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeTimeout = 10,
/// This type of <em>WebServiceFailedError</em> is received whenever network is not available. Some common
/// underlying errors may be : NSURLErrorNotConnectedToInternet, NSURLErrorNetworkConnectionLost etc.
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeNetworkNotAvailable = 11,
/// This type of <em>WebServiceFailedError</em> is received whenever the server returns a too many request http status code
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeTooManyRequestsError = 12,
/// This type of <em>WebServiceFailedError</em> is used when the error cannot be categorized as any of the above
/// seealso:
/// WebServiceFailedError.from
  WebServiceErrorTypeUnknown = 13,
};


/// An class that implements Error to easily transfer Typed, meaningful errors encountered
/// while parsing the request or response, or to wrap received errors from the  NSURLErrorDomain,
/// these can be set as the error object easily whenever a WebService failureBlock needs to be called.
SWIFT_CLASS("_TtC6PECore21WebServiceFailedError")
@interface WebServiceFailedError : NSObject
- (NSString * _Nonnull)getMessage SWIFT_WARN_UNUSED_RESULT;
- (NSError * _Nullable)getSourceError SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL("_TtP6PECore23WebSessionEventDelegate_")
@protocol WebSessionEventDelegate
/// Raised when the web session manager is ready for activity
/// warning:
/// This is not guaranteed to execute on the UI thread
/// \param success did the session set up properly, or abort
///
- (void)onWebSessionReadyWithSuccess:(BOOL)success;
@end


SWIFT_CLASS("_TtC6PECore17WebSessionManager")
@interface WebSessionManager : NSObject
/// Call this when the user logs in to set up the manager singleton
+ (void)onLoginStart;
/// Call this when the entirety of the login sequence is complete
+ (void)onLoginCompleteWithUserContext:(PEUserContext * _Nullable)userContext patientContext:(PEPatientContext * _Nullable)patientContext encounterContext:(PEEncounterContext * _Nullable)encounterContext;
/// Call this to set up a new web session
+ (void)setUpSession:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext;
/// Call this when the user logs out to clean up the WebSession
+ (void)cleanUpSessionWithIsLogoutOfApp:(BOOL)isLogoutOfApp;
/// Call this when switching contexts
+ (void)onContextChanged:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext;
/// Call to get if a web session is set up
+ (BOOL)hasSessionSetUp SWIFT_WARN_UNUSED_RESULT;
/// Is the web session set up for the specified context so that we can skip jump token authentication?
+ (BOOL)canUseDirectUrl:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext :(BOOL)isExternal SWIFT_WARN_UNUSED_RESULT;
/// Encounter context for the session
+ (PEEncounterContext * _Nullable)getSessionEncounterContext SWIFT_WARN_UNUSED_RESULT;
/// Add a queue completion listener which will call back when the web session queue is empty
/// \param keepStrongReference Whether the queue should keep a weak or strong reference to the listener
///
/// \param listener listener called after the queue is empty (or has timed out)
///
+ (void)addWebSessionQueueCompleteListenerKeepingStrongReference:(BOOL)keepStrongReference :(id <WebSessionEventDelegate> _Nonnull)listener;
/// Call this to clear the manager’s state, informing it that the current user/patient context are no longer reliable, logging out of the website if currently logged in.
+ (void)clearCurrentSession;
/// Sets the current context in the manager without executing any context services with the web view
/// This is useful in the event that a web view has used a jump token to get the cookies and we want to reuse that context going forward.
+ (void)updateCurrentSession:(PEUserContext * _Nonnull)userContext :(PEPatientContext * _Nullable)patientContext :(PEEncounterContext * _Nullable)encounterContext;
/// Does the organization support the DirectUrl function of the WebSessionManager
+ (BOOL)isDirectUrlSupported:(PEOrganizationContext * _Nullable)organizationContext SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end



SWIFT_CLASS("_TtC6PECore28WebSessionManagerToolTipView")
@interface WebSessionManagerToolTipView : ToolTipView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (void)pressedClearCookiesWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedClearManagerWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedFastKeepAliveWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedNoCacheURLSWithSender:(UIButton * _Null_unspecified)sender;
- (void)pressedClearLogoutRequestWithSender:(UIButton * _Null_unspecified)sender;
@end

@class WKWebViewConfiguration;

SWIFT_CLASS("_TtC6PECore20WebViewConfigManager")
@interface WebViewConfigManager : NSObject
+ (WKWebViewConfiguration * _Nonnull)getSharedConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)clearCookiesForDomainOf:(NSURL * _Nullable)url callback:(void (^ _Nonnull)(void))callback;
/// Sets the cookie that tells us to load the mobile version of the webpage for the given URL
+ (void)setMobileOptimizedCookieFor:(NSURL * _Nonnull)url completionHandler:(void (^ _Nonnull)(void))completionHandler;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
