// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PECore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Combine
import CommonCrypto
import CoreLocation
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
@_exported import PECore
import PassKit
import SVGRasterizer
import SafariServices
import Swift
import SwiftUI
@_exported import UIKit
import WatchConnectivity
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc public protocol TextStyleProtocol : PECore.BaseStyleProtocol {
  @objc func fontRamp() -> PECore.FontRamp
  @objc func fontSize() -> Swift.Float
  @objc func fontWeight() -> PECore.FontWeight
  @objc func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
}
@objc public enum FontWeight : Swift.Int, Swift.CaseIterable {
  case regular, semiBold
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PECore.FontWeight]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [PECore.FontWeight] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum FontRamp : Swift.Int, Swift.CaseIterable {
  case display, h1, h2, h3, h4, body, subtle, link
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PECore.FontRamp]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [PECore.FontRamp] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
extension PECore.FontRamp {
  public func getDefaultStyle(_ colorProvider: (any PECore.BrandedColorProviderProtocol)?) -> any PECore.TextStyleProtocol
}
@_inheritsConvenienceInitializers @objc public class PEDeepLinkLaunchParameters : ObjectiveC.NSObject {
  @objc public static let ACCOUNT: Swift.String
  @objc public static let ACCOUNT_ID: Swift.String
  @objc public static let ADDRESS: Swift.String
  @objc public static let AUTH_TOKEN: Swift.String
  @objc public static let AVS_DAT: Swift.String
  @objc public static let BILLING_ID: Swift.String
  @objc public static let BILLING_BLOBKEY: Swift.String
  @objc public static let BILLING_DOC_TYPE: Swift.String
  @objc public static let BILLING_SYSTEM: Swift.String
  @objc public static let CHANGE_DAT: Swift.String
  @objc public static let CHANGE_ID: Swift.String
  @objc public static let CONTEXT: Swift.String
  @objc public static let CONTEXT_TYPE: Swift.String
  @objc public static let CSN: Swift.String
  @objc public static let CVG_ID: Swift.String
  @objc public static let DAT: Swift.String
  @objc public static let DCS_EXT: Swift.String
  @objc public static let DCS_ID: Swift.String
  @objc public static let EAR_ID: Swift.String
  @objc public static let ECSN: Swift.String
  @objc public static let EMID: Swift.String
  @objc public static let EPISODE_ID: Swift.String
  @objc public static let EPP_URL: Swift.String
  @objc public static let FEATURE: Swift.String
  @objc public static let FEDERATED_LOGOUT: Swift.String
  @objc public static let FILE_NAME: Swift.String
  @objc public static let FILE_PATH: Swift.String
  @objc public static let H2G_ORG_ID: Swift.String
  @objc public static let ID: Swift.String
  @objc public static let IED_ID: Swift.String
  @objc public static let IS_CSN_ENCRYPTED: Swift.String
  @objc public static let IS_EVISIT: Swift.String
  @objc public static let IS_ID_ENCRYPTED: Swift.String
  @objc public static let IS_INPATIENT: Swift.String
  @objc public static let IS_ORDER_ID_ENCRYPTED: Swift.String
  @objc public static let IS_PAYVIDER_PAYER: Swift.String
  @objc public static let LAB_NAME: Swift.String
  @objc public static let LATITUDE: Swift.String
  @objc public static let LONGITUDE: Swift.String
  @objc public static let LTK_ID: Swift.String
  @objc public static let LTK_INSTANT: Swift.String
  @objc public static let MEDICATION: Swift.String
  @objc public static let MESSAGE_INFO: Swift.String
  @objc public static let MID: Swift.String
  @objc public static let MODE: Swift.String
  @objc public static let NOW_ENCOUNTER_CSN: Swift.String
  @objc public static let OAUTH_TOKEN: Swift.String
  @objc public static let ORDER_ID: Swift.String
  @objc public static let ORG: Swift.String
  @objc public static let ORG_ID: Swift.String
  @objc public static let OVERDUE: Swift.String
  @objc public static let PATIENT_INDEX: Swift.String
  @objc public static let PES_ID: Swift.String
  @objc public static let PROVIDER: Swift.String
  @objc public static let REPORT_MNEMONIC: Swift.String
  @objc public static let RFV_ID: Swift.String
  @objc public static let SCHED_TICKET_ID: Swift.String
  @objc public static let SEL_RFV_ID: Swift.String
  @objc public static let START_VIDEO_VISIT: Swift.String
  @objc public static let SUB_MODE: Swift.String
  @objc public static let SUBJECT: Swift.String
  @objc public static let TAB: Swift.String
  @objc public static let TASK_TITLE: Swift.String
  @objc public static let TITLE: Swift.String
  @objc public static let TITLE_ID: Swift.String
  @objc public static let USERNAME: Swift.String
  @objc public static let ENCRYPTED_TREE_ID: Swift.String
  @objc public static let TREE_ID: Swift.String
  @objc public static let TREE_CID: Swift.String
  @objc public static let TREE_UNIVERSAL_KEY: Swift.String
  @objc public static let URL: Swift.String
  @objc public static let USE_SOURCE_ENCRYPTION: Swift.String
  @objc public static let WORKFLOW: Swift.String
  @objc public static let WPR_ID: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class CoreButtonSet : UIKit.UIStackView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var forceVerticalOrientation: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var equalWidth: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didAddSubview(_ subview: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func notifyTextChanged()
  @_Concurrency.MainActor @preconcurrency public func prepareForReuse()
  @objc deinit
}
public protocol PEDeepLinkAlertProviderProtocol {
  func getMismatchedOrgAlertController(deepLink: any PECore.PEDeepLinkProtocol) -> UIKit.UIAlertController
}
public protocol PERemoteOrganizationSupportProtocol {
  var supportsH2GLaunchContext: Swift.Bool { get }
  var launchesH2GContextLocally: Swift.Bool { get }
}
extension PECore.PERemoteOrganizationSupportProtocol {
  public var supportsH2GLaunchContext: Swift.Bool {
    get
  }
  public var launchesH2GContextLocally: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers @objc public class SecurityPoints : ObjectiveC.NSObject {
  @objc public static let ALERTS: Swift.String
  @objc public static let ALLERGIES: Swift.String
  @objc public static let HEALTH_ISSUES: Swift.String
  @objc public static let HEALTH_REMINDERS: Swift.String
  @objc public static let HEALTH_REMINDER_SCHEDULE: Swift.String
  @objc public static let HEALTH_SNAPSHOT: Swift.String
  @objc public static let IMMUNIZATIONS: Swift.String
  @objc public static let MEDS_REVIEW: Swift.String
  @objc public static let MEDS_REFILL: Swift.String
  @objc public static let MEDS_DIRECT_REFILL: Swift.String
  @objc public static let NOTE_SHARING: Swift.String
  @objc public static let GOALS_REVIEW: Swift.String
  @objc public static let CARE_TEAM: Swift.String
  @objc public static let HM_MARK_COMPLETE: Swift.String
  @objc public static let HEALTH_GOALS_PROXY: Swift.String
  @objc public static let HEALTH_SUMMARY: Swift.String
  @objc public static let HEALTH_GOALS: Swift.String
  @objc public static let ORGAN_DONOR: Swift.String
  @objc public static let RECENT_APPOINTMENTS: Swift.String
  @objc public static let RECENT_VISITS: Swift.String
  @objc public static let VISIT_SUMMARY: Swift.String
  @objc public static let PAST_ADMISSIONS: Swift.String
  @objc public static let MO_PAST_VISIT_DETAILS: Swift.String
  @objc public static let APPT_CANCEL: Swift.String
  @objc public static let APPT_CONFIRM: Swift.String
  @objc public static let APPT_DETAILS: Swift.String
  @objc public static let APPT_REVIEW: Swift.String
  @objc public static let DRIVING_DIRECTIONS: Swift.String
  @objc public static let APPT_DIRECT_CANCEL: Swift.String
  @objc public static let APPT_ECHECKIN: Swift.String
  @objc public static let APPT_RESCHEDULING: Swift.String
  @objc public static let PREADMISSION_DETAILS: Swift.String
  @objc public static let AUTO_WAITLIST: Swift.String
  @objc public static let UPDATE_WAITLIST: Swift.String
  @objc public static let APPT_SCHEDULE_REQUEST: Swift.String
  @objc public static let APPT_SCHEDULE: Swift.String
  @objc public static let APPT_TICKET_SCHEDULE: Swift.String
  @objc public static let PROVIDER_DETAILS: Swift.String
  @objc public static let LABS: Swift.String
  @objc public static let LAB_DETAILS: Swift.String
  @objc public static let DENY_BEDSIDE_TEST_RESULTS: Swift.String
  @objc public static let CUSTOMER_SERVICE: Swift.String
  @objc public static let MESSAGES_INBOX: Swift.String
  @objc public static let MEDICAL_ADVICE: Swift.String
  @objc public static let MESSAGES_OUTBOX: Swift.String
  @objc public static let MESSAGE_TASK_SCHEDULE_APPT: Swift.String
  @objc public static let IMAGE_UPLOAD: Swift.String
  @objc public static let IMAGE_UPLOAD_EVISIT: Swift.String
  @objc public static let BILLING_CUST_SVC: Swift.String
  @objc public static let PHARMACY_MESSAGE: Swift.String
  @objc public static let QUESTIONNAIRES_HISTORY: Swift.String
  @objc public static let QUESTIONNAIRES_GENERAL: Swift.String
  @objc public static let DENY_BEDSIDE_QUESTIONNAIRES: Swift.String
  @objc public static let ACCOUNT_INQUIRY: Swift.String
  @objc public static let PB_STATEMENT_DETAILS: Swift.String
  @objc public static let HB_ACCOUNT_INQUIRY: Swift.String
  @objc public static let COPAY_PAYMENT: Swift.String
  @objc public static let SBO_ACCOUNT_INQUIRY: Swift.String
  @objc public static let PREMIUM_BILLING: Swift.String
  @objc public static let PATIENT_ESTIMATES: Swift.String
  @objc public static let FINANCIAL_ASSISTANCE: Swift.String
  @objc public static let INSURANCE_ID_CARD: Swift.String
  @objc public static let HTML_INSURANCE_ID_CARD: Swift.String
  @objc public static let TRACK_MY_HEALTH: Swift.String
  @objc public static let EXTERNAL_PEF: Swift.String
  @objc public static let PERSONALIZE_PHOTO: Swift.String
  @objc public static let PERSONALIZE: Swift.String
  @objc public static let TELEMEDICINE_SCHEDULING: Swift.String
  @objc public static let TELEMEDICINE_ON_DEMAND_VIDEO_VISITS: Swift.String
  @objc public static let TELEMEDICINE_QUICKSCHEDULE: Swift.String
  @objc public static let TELEMEDICINE_DENY_JOINING_VIDEO_VISITS: Swift.String
  @objc public static let UPCOMING_ORDERS: Swift.String
  @objc public static let TODO_VIEW_ASSIGNED_TASKS: Swift.String
  @objc public static let TODO_ACT_ON_ASSIGNED_TASKS: Swift.String
  @objc public static let TODO_PERSONALIZE_ASSIGNED_TASKS: Swift.String
  @objc public static let TODO_VIEW_PATIENT_CREATED_TASKS: Swift.String
  @objc public static let TODO_ACT_ON_PATIENT_CREATED_TASKS: Swift.String
  @objc public static let USER_AUDIT_TRAIL: Swift.String
  @objc public static let DOWNLOAD_CCD: Swift.String
  @objc public static let MYCHART_AUDIT_TRAIL: Swift.String
  @objc public static let DOWNLOAD_VISIT_SUMMARY: Swift.String
  @objc public static let TRANSMIT_VISIT_SUMMARY_CE: Swift.String
  @objc public static let TRANSMIT_VISIT_SUMMARY_DIRECT: Swift.String
  @objc public static let ROI_ACCESS: Swift.String
  @objc public static let TRANSMIT_VISIT_SUMMARY_EMAIL: Swift.String
  @objc public static let MY_DOCUMENTS: Swift.String
  @objc public static let ALLERGY_CONTENT: Swift.String
  @objc public static let ICD_DETAILS: Swift.String
  @objc public static let IMMUNIZATION_CONTENT: Swift.String
  @objc public static let CPT_DETAILS: Swift.String
  @objc public static let KEYWORD_SEARCH: Swift.String
  @objc public static let EDUCATION_LIST: Swift.String
  @objc public static let BEDSIDE_MO_EDUCATION: Swift.String
  @objc public static let DENY_BEDSIDE_EDUCATION: Swift.String
  @objc public static let BEDSIDE_SELF_SERVICE_TABLET_CODE: Swift.String
  @objc public static let PERSONAL_INFO_PROXY_ONLY: Swift.String
  @objc public static let LETTERS: Swift.String
  @objc public static let CHANGE_PASSWORD: Swift.String
  @objc public static let PATIENT_PREFERENCES: Swift.String
  @objc public static let EVISIT: Swift.String
  @objc public static let MANAGE_EXTERNAL_ACCOUNTS: Swift.String
  @objc public static let PATIENT_VISIT_GUIDE: Swift.String
  @objc public static let APPT_SELF_ARRIVAL: Swift.String
  @objc public static let SYMPTOM_CHECKER: Swift.String
  @objc public static let DENY_SHARE_EVERYWHERE: Swift.String
  @objc public static let SEND_PROXY_INVITE: Swift.String
  @objc public static let DENY_ON_MY_WAY: Swift.String
  @objc public static let DENY_INFECTIOUS_DISEASE_STATUS: Swift.String
  @objc public static let MO_COMM_CENTER: Swift.String
  @objc public static let EDIT_PERSONAL_INFORMATION: Swift.String
  @objc public static let ONBOARDING_HOW_TO_VIDEO: Swift.String
  @objc public static let COVID_STATUS: Swift.String
  @objc public static let COVID_TEST_RESULTS: Swift.String
  @objc public static let DEACTIVATE_ACCOUNT: Swift.String
  @objc public static let MO_TESTRESULTS: Swift.String
  @objc public static let FEATURE_LIBRARY: Swift.String
  @objc public static let MOBILE_PRINTING: Swift.String
  @objc public static let MO_BEDSIDE_TESTRESULTS: Swift.String
  @objc public static let MOBILE_SERVER_LOCALE_SETTINGS: Swift.String
  @objc public static let MYC_MOBILE_SECONDARY_LOGIN: Swift.String
  @objc public static let MYC_MOBILE_PASSCODE_LOGIN: Swift.String
  @objc public static let DENY_BEDSIDE_HAPPENING_SOON: Swift.String
  @objc public static let DENY_BEDSIDE_CARE_TEAM: Swift.String
  @objc public static let DENY_BEDSIDE_REQUESTS: Swift.String
  @objc public static let BEDSIDE_WORKFLOW_STEP: Swift.String
  @objc public static let DENY_BEDSIDE_CLINICAL_NOTES: Swift.String
  @objc public static let DENY_BEDSIDE_CONSENTS: Swift.String
  @objc public static let DENY_MYCHARTNOW_PROBLEM_LIST: Swift.String
  @objc public static let DENY_MYCHARTNOW_MEDICATIONS: Swift.String
  @objc public static let DENY_CONTINUING_CARE: Swift.String
  @objc deinit
}
@objc public protocol CacheableImageDataSource : PECore.ImageDataSource {
}
@objc public protocol PETestResultDetailComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getTestResultDetailController(testResult: any PECore.PETestResult, overrideUri: Swift.String, componentHost: (any PECore.PEComponentHostProtocol)?, patientContext: PECore.PEPatientContext, encounterContext: PECore.PEEncounterContext?, logEncounterCSN: Swift.Bool) -> UIKit.UIViewController
  @objc func hasAccessToTestResultDetails() -> Swift.Bool
}
@objc public protocol PETestResult {
  @objc var objectID: Swift.String? { get }
  @objc var dat: Swift.String? { get }
  @objc var organization: any PECore.PEOrganizationInfoProtocol { get }
  @objc var name: Swift.String? { get }
}
@_inheritsConvenienceInitializers @objc public class AlertUtils : ObjectiveC.NSObject {
  @objc public class func makeAlertController(withContext context: PECore.PEOrganizationContext?, title: Swift.String?, message: Swift.String) -> UIKit.UIAlertController
  @objc public class func makeAlertController(withTheme theme: (any PECore.PEThemeProtocol)?, title: Swift.String?, message: Swift.String) -> UIKit.UIAlertController
  @objc public class func makeAlertController(withTheme theme: (any PECore.PEThemeProtocol)?, title: Swift.String?, message: Swift.String, alwaysInLTR: Swift.Bool) -> UIKit.UIAlertController
  @objc public class func makeSpecialCharacterAlertController() -> UIKit.UIAlertController
  @objc public class func defaultWebServiceErrorAlertController(handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil) -> UIKit.UIAlertController
  @objc public class func externalLaunchAlertController(url: Foundation.URL, urlString: Swift.String) -> UIKit.UIAlertController
  @objc public class func settingsAlertController(title: Swift.String? = nil, message: Swift.String, declineHandler: (() -> Swift.Void)? = nil) -> UIKit.UIAlertController
  @objc public class func settingsAlertController(title: Swift.String? = nil, message: Swift.String, declineButtonText: Swift.String, declineHandler: (() -> Swift.Void)? = nil) -> UIKit.UIAlertController
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UIAlertController {
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addButton(title: Swift.String, handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil) -> UIKit.UIAlertController
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addOKButton(handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil) -> UIKit.UIAlertController
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addPositiveButton(title: Swift.String, handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil) -> UIKit.UIAlertController
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addNegativeButton(title: Swift.String, handler: ((UIKit.UIAlertAction) -> Swift.Void)? = nil) -> UIKit.UIAlertController
}
public enum PEDeepLinkContext {
  case pushNotification(id: Swift.String)
  case handoff(id: Swift.String)
  case preloginInternalDeepLink
}
@objc @_inheritsConvenienceInitializers public class AuditUtil : ObjectiveC.NSObject {
  public enum E1MEntryType : Swift.String {
    case upcomingAppointmentsViewed
    case activityOpenedInBrowser
    case documentDetailsViewed
    case documentDetailsDownloaded
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public class func createEntry(_ type: PECore.AuditUtil.E1MEntryType) -> PECore.AuditUtil.E1MAuditLogEntry
  public class func writeEntryToE1M(_ entry: PECore.AuditUtil.E1MAuditLogEntry)
  public class func writeEntriesToE1M(_ entries: [PECore.AuditUtil.E1MAuditLogEntry])
  @objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class E1MAuditLogEntry : ObjectiveC.NSObject, Swift.Encodable {
    public func encode(to encoder: any Swift.Encoder) throws
    public func addMnemonic(name: Swift.String, value: Swift.String)
    public func overridePatient(_ patient: any PECore.PEPatientIndexProtocol)
    @objc deinit
  }
  @objc public enum FeatureTrackingMetric : Swift.Int {
    case unknown = -1
    case mobilePrint = 320127
    case mobileGoToSignup = 320266
    case mobileGoToLoginPage = 320267
    case mobileJumpToAccount = 320268
    case basicLiveActivityCreated = 320309
    case showGlucoseTrends = 81146
    case epicFunFacts = 324080
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class func logFeatureUse(_ featureTrackingMetric: PECore.AuditUtil.FeatureTrackingMetric, summaryLevelsTargetsAndCounts: [PECore.AuditUtil.SummaryLevelTargetAndCount] = [])
  @objc public class SummaryLevelTargetAndCount : ObjectiveC.NSObject, Swift.Encodable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(summaryLevel: Swift.Int, summaryLevelTarget: Swift.String, count: Swift.Int, summarySubLevel: Swift.Int? = nil, summarySubLevelTarget: Swift.String = "")
    @objc deinit
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PEComponentRequestControllerErrorCode : Swift.Int {
  case unknown = -1
  case noAccess = 1
  case noData = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class CardStyle : PECore.CardStyleProtocol {
  public init()
  @objc public func cornerRadius() -> Swift.Float
  @objc public func elevation() -> Swift.Float
  @objc public func dropShadow() -> UIKit.UIColor?
  @objc public func fillColor() -> UIKit.UIColor
  @objc public func borderColor() -> UIKit.UIColor?
  @objc public func getThemeStyleName() -> Swift.String
  @objc public func getAttributeNames() -> [Swift.String]
  @objc public func getAttributeValue(key: Swift.String) -> Swift.String
  public func applyThemeStyle(style: PECore.ThemeStyle?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class RegularCardStyle : PECore.CardStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class InteractiveCardStyle : PECore.CardStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  override public init()
  @objc deinit
}
public class WebService<T> where T : Swift.Decodable {
  public var hasRefreshableOrganizationLink: Swift.Bool {
    get
  }
  public init(urlTemplate: Swift.String, urlType: PECore.UrlType = .None, requestFormat: PECore.PERequestFormat = .defaultForCategory, responseFormat: PECore.PEResponseFormat = .Default, myChartNamespace: PECore.MyChartNamespaceEnum = .None, category: PECore.WebServiceCategory, tokenType: PECore.TokenType = .Default, params: [any PECore.Parameterable] = [Parameterable](), headers: [PECore.Header] = [Header](), userContext: PECore.PEUserContext? = nil, patientContext: PECore.PEPatientContext? = nil, encounterContext: PECore.PEEncounterContext? = nil, session: Foundation.URLSession? = nil, overrideUrl: Swift.String? = nil, additionalQueryStringParameters: [Swift.String : Swift.String]? = nil)
  @discardableResult
  public func onSuccess(_ successBlock: @escaping (T?) -> Swift.Void) -> PECore.WebService<T>
  @discardableResult
  public func onFailure(failureBlock: @escaping (PECore.WebServiceFailedError) -> Swift.Void) -> PECore.WebService<T>
  public func run()
  public func run() async throws -> T?
  public var failedOrganizations: [any PECore.PEOrganizationInfoProtocol]? {
    get
  }
  public func addParamsWithSameNameAndValue(vals: Swift.String...)
  public func addParams(params: any PECore.Parameterable...)
  public func addParams(params: [any PECore.Parameterable])
  @objc deinit
}
public struct AdjustedLocalDate {
  public var date: Foundation.Date?
}
extension PECore.AdjustedLocalDate : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
extension PECore.AdjustedLocalDate : Swift.Encodable {
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol IBottomButtonAnimationDelegate {
  @objc func getEnclosingViewWidth() -> CoreFoundation.CGFloat
  @objc func getLeadingConstraintConstant() -> CoreFoundation.CGFloat
  @objc func buttonHeightChanged(newHeight: CoreFoundation.CGFloat)
  @objc func switchToExpandedConstraints()
  @objc func switchToShrunkConstraints()
}
@_inheritsConvenienceInitializers public class PEJSONDecoder : Foundation.JSONDecoder {
  override public init()
  @objc deinit
}
extension PECore.PEJSONDecoder : @unchecked Swift.Sendable {
}
public enum PEDeepLinkParam {
  case context
  case orgId
  case remoteOrgId
  case remoteOrgName
  case remoteOrgLogoUrl
  case wprId
  case encryptedAccountId
  case dataLoader
  case alertProvider
  case securityAwaiter
  public static func == (a: PECore.PEDeepLinkParam, b: PECore.PEDeepLinkParam) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct CapturedWorkflowDetails<HeaderContent, BodyContent, ButtonContent> where HeaderContent : SwiftUICore.View, BodyContent : SwiftUICore.View, ButtonContent : SwiftUICore.View {
  public init(activityTitle: Swift.String, headerContent: @escaping (Swift.Bool) -> HeaderContent?, bodyContent: @escaping () -> BodyContent, buttonContent: @escaping () -> ButtonContent, progressDots: PECore.ProgressDotDetails? = nil, showCancelButton: Swift.Bool = false, onCancelButtonPressed: (() -> Swift.Void)? = nil, showBackButton: Swift.Bool = false, onBackButtonPressed: (() -> Swift.Void)? = nil)
}
public struct ProgressDotDetails {
  public init(currentStep: Swift.Int, totalSteps: Swift.Int)
}
@_hasMissingDesignatedInitializers public class PEThemeProtocolHelper {
  public static func getDefaultCardStyle() -> any PECore.CardStyleProtocol
  public static func getDefaultInteractiveCardStyle() -> any PECore.CardStyleProtocol
  public static func getDefaultTextStyle(theme: any PECore.PEThemeProtocol, fontRamp: PECore.FontRamp) -> any PECore.TextStyleProtocol
  @objc deinit
}
public class Provider : Swift.Codable {
  public var ID: Swift.String
  public var name: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc public protocol PEMessagingComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForSendingMedicalAdviceMessage(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForMOMessages(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForInpatientMessages(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getMessageListViewController(_ patientContext: PECore.PEPatientContext, params: [Swift.String : Swift.String]) -> UIKit.UIViewController?
  @objc func getInpatientMessageListViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getMessageDetailViewController(_ patientContext: PECore.PEPatientContext, forMessage messageID: Swift.String, myChartWebMessageIDKey: Swift.String, andIsEncrypted isEncrypted: Swift.Bool, forOrganization orgID: Swift.String) -> UIKit.UIViewController?
  @objc func getComposeViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getComposeMedicalAdviceViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getComposeCustomerServiceViewController(_ patientContext: PECore.PEPatientContext, isExternal: Swift.Bool) -> UIKit.UIViewController?
  @objc func getComposeBillingCustomerServiceViewController(_ patientContext: PECore.PEPatientContext, forAccount encryptedAccountID: Swift.String, withType encryptedBilligContext: Swift.String, isExternal: Swift.Bool) -> UIKit.UIViewController?
  @objc func getProviderMessageViewController(_ patientContext: PECore.PEPatientContext, forProvider provider: any PECore.PEMessageProvider) -> UIKit.UIViewController?
  @objc func getComposeMedicalAdviceWithSubjectOrOrgViewController(_ patientContext: PECore.PEPatientContext, withSubject subject: Swift.String, forOrganization orgID: Swift.String) -> UIKit.UIViewController?
  @objc func getComposeMedicalAdviceWithDCSIDViewController(_ patientContext: PECore.PEPatientContext, withDCSID dcsID: Swift.String) -> UIKit.UIViewController?
  @objc func getComposeEduQuestionWithLTKIDViewController(_ patientContext: PECore.PEPatientContext, withLTKID ltkID: Swift.String, isExternal: Swift.Bool) -> UIKit.UIViewController?
  @objc func getComposePrescriptionMessageViewController(_ patientContext: PECore.PEPatientContext, withMedication medication: Swift.String) -> UIKit.UIViewController?
}
@objc public protocol PEMessageProvider {
  @objc var ID: Swift.String { get }
  @objc var name: Swift.String { get }
  @objc var isPCP: Swift.Bool { get }
  @objc var photoURL: Swift.String { get }
  @objc var organization: any PECore.PEOrganizationInfoProtocol { get }
  @objc var isProviderIdEncrypted: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class PEPulsingHeartView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func reloadAnimation()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol BrandedColorProviderProtocol {
  @objc func getBrandedColor(_ color: PECore.PEBrandedColor) -> UIKit.UIColor?
}
public class ThemeColorProviderWrapper : PECore.BrandedColorProviderProtocol {
  public init(theme: any PECore.PEThemeProtocol)
  @objc public func getBrandedColor(_ color: PECore.PEBrandedColor) -> UIKit.UIColor?
  @objc deinit
}
@objc public protocol PECareTeamComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForCareTeam(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getCareTeamViewController(_ patientContext: PECore.PEPatientContext, isPrimaryStandalone: Swift.Bool, withDelegate delegate: (any PECore.PECareTeamComponentDelegate)?)
  @objc func hasAccessForTreatmentTeam(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getTreatmentTeamViewController(_ encounterContext: PECore.PEEncounterContext, componentHost: any PECore.PEComponentHostProtocol, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getTreatmentTeamListViewController(_ encounterContext: PECore.PEEncounterContext, componentHost: any PECore.PEComponentHostProtocol, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getFullscreenCareTeamViewController(_ patientContext: PECore.PEPatientContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func hasAccessForProviderBio(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getProviderBioViewController(_ encounterContext: PECore.PEEncounterContext, providerID: Swift.String, providerName: Swift.String) -> UIKit.UIViewController?
}
@objc public protocol PECareTeamComponentDelegate {
  @objc func didGetCareTeamViewController(_ careTeamViewController: UIKit.UIViewController, withFailedOrgs failedOrgs: [any PECore.PEOrganizationInfoProtocol]?)
  @objc func didFailToGetCareTeamViewController(withError error: Foundation.NSError)
}
public protocol PEDeepLinkLoaderProtocol {
  func getData(for deepLink: any PECore.PEDeepLinkProtocol, callback: @escaping (Swift.Bool) -> Swift.Void)
  func modify(_ deepLink: any PECore.PEDeepLinkProtocol) -> any PECore.PEDeepLinkProtocol
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PEUrlProvider : ObjectiveC.NSObject {
  @objc public static let instance: PECore.PEUrlProvider
  @objc public func setUrl(type: PECore.UrlType, url: Swift.String)
  @objc public func getUrlString(type: PECore.UrlType) -> Swift.String?
  @objc deinit
}
@objc public protocol InlineEducationSourceProtocol {
  @objc func hasInlineEducationSource() -> Swift.Bool
  @objc func getInlineEducationContext() -> PECore.InlineEducationType
  @objc func getInlineEducationContextID() -> Swift.String
  @objc func getInlineEducationSearchTerm() -> Swift.String
}
extension WebKit.WKNavigationAction {
  @_Concurrency.MainActor @preconcurrency public var isInitialNavigation: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isTargetingMainFrame: Swift.Bool {
    get
  }
}
@objc public protocol PEMedicationsComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForOutpatientMedications(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForEncounterSpecificMedications(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getMyChartNowMedicationsViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
}
public protocol ServerLocaleSourceReader {
  func readLocales() -> [PECore.PELocale]
  func readDefaultLocale() -> PECore.PELocale
}
public protocol DeviceLocaleSourceReader {
  func readLocales() -> [PECore.PELocale]
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PEOnboardingHeaderView : PECore.SelfLoadingView {
  @_Concurrency.MainActor @preconcurrency weak public var parentPageViewController: PECore.PEOnboardingHostViewController?
  @_Concurrency.MainActor @preconcurrency override public var selfLoadingNibName: Swift.String? {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func setUpSkipButton()
  @_Concurrency.MainActor @preconcurrency public func setSkipButtonAX(to AXlabel: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setTemporarySkipButtonAX(to AXlabel: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func notifyAXForSkip()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public class ExtensibilityLaunchManager {
  public init(componentHost: any PECore.PEComponentHostProtocol, patientContext: PECore.PEPatientContext, fdiID: Swift.String, fdiIDEncrypted: Swift.Bool, documentID: Swift.String, smartStyle: PECore.SmartStyleModel?, navController: UIKit.UINavigationController?)
  public func setExtensibilityActionListener(listener: any PECore.OnExtensibilityActionProtocol)
  public func runExtensibilityLinkService()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class StringUtil : ObjectiveC.NSObject {
  @objc public static func stringContainsOnlyAllowedCharacters(_ string: Swift.String) -> Swift.Bool
  public static func unwrap(_ string: Swift.String?) -> Swift.String?
  public static func isNullOrWhiteSpace(_ aString: Swift.String?) -> Swift.Bool
  public static func byCompressingWhiteSpaces(_ string: Swift.String) -> Swift.String
  public static func sanitizeAndroidString(_ str: Swift.String) -> Swift.String
  public static func convertJavaUnicodeCharactersToSwiftUnicodeCharacters(_ inputString: Swift.String) -> Swift.String
  public static func addLTRMarkers(_ inputString: Swift.String, locale: Foundation.Locale) -> Swift.String
  public static func addRTLMarkers(_ inputString: Swift.String, locale: Foundation.Locale) -> Swift.String
  public static func getFractionString(withNumerator numerator: Any, andDenominator denominator: Any) -> Swift.String
  @discardableResult
  public static func tryDecodeHTML(_ inputString: inout Swift.String?) -> Swift.Bool
  @discardableResult
  public static func tryDecodeHTML(_ inputString: inout Swift.String) -> Swift.Bool
  public static func schemeInsensitiveCompare(linkUrl: Swift.String, to rhs: Swift.String, ignoreQSPs: Swift.Bool) -> Swift.Bool
  public static func makeBulletedString(string: Swift.String, isRTL: Swift.Bool) -> Swift.String
  public static func convertCombiningDiacriticalMarks(string: Swift.String) -> Swift.String
  public static func getBaseOrgId(_ orgID: Swift.String?) -> Swift.String
  public static func areAffiliates(_ orgID1: Swift.String?, _ orgID2: Swift.String?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc extension Foundation.NSString {
  @objc public static func isNullOrWhiteSpace(_ str: Swift.String?) -> Swift.Bool
  @objc public static func getBaseOrgId(_ orgID: Swift.String?) -> Foundation.NSString
  @objc public static func areAffiliates(_ orgID1: Swift.String?, and orgID2: Swift.String?) -> Swift.Bool
}
extension Swift.String {
  public func containsIgnoreCase(_ other: any Swift.StringProtocol) -> Swift.Bool
  public func toUrl() -> Foundation.URL?
}
@objc @_hasMissingDesignatedInitializers open class PEUserContext : PECore.PEOrganizationContext {
  @objc open func getUser() -> (any PECore.PEUserProtocol)?
  @objc public func getPatients() -> [any PECore.PEPatientProtocol]?
  @objc public func getPersonList() -> [any PECore.PEPersonProtocol]
  @objc public func hasProxySubjects() -> Swift.Bool
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func isSameUser(as other: PECore.PEUserContext?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@objc public enum CommunityUpdateContext : Swift.Int {
  case ALLERGIES
  case HEALTHISSUES
  case APPOINTMENTS
  case TESTRESULT
  case MEDICATION
  case MANAGEMYACCOUNT
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEH2GManageMyAccountAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getManageMyAccountViewController(context: PECore.CommunityUpdateContext) -> UIKit.UIViewController?
  @objc func setFeatureIsCurrentlyCheckingStatus(featureBit: Swift.String)
  @objc func launchCommunityLoadingStatusRequest()
  @objc func isMOManageMyAccountAvailable() -> Swift.Bool
  @objc func canAsynLoadingExternalData() -> Swift.Bool
  @objc func canSupportH2GPPWorkflowUpdate() -> Swift.Bool
}
public class ThemeColorProvider : PECore.BrandedColorProviderProtocol {
  public init(themeSettings: PECore.ThemeSettings)
  @objc public func getBrandedColor(_ color: PECore.PEBrandedColor) -> UIKit.UIColor?
  @objc deinit
}
@objc public protocol PETutorialHostProtocol {
  @objc func tutorialIsAvailable(_ available: Swift.Bool)
  @objc func showTutorialsAutomatically() -> Swift.Bool
  @objc func didCompleteTutorial(_ tutorialId: Swift.String?)
  @objc func isTutorialCompleted(_ tutorialId: Swift.String?) -> Swift.Bool
  @objc func globalReplacementMap() -> Foundation.NSDictionary?
}
@objc public protocol PEQuestionnairesComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForPatientQuestionnaires(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForInpatientQuestionnaires(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForGeneralQuestionnaire(_ patientContext: PECore.PEPatientContext, contextType: Swift.String) -> PECore.PEComponentAccessResult
  @objc func hasAccessForHistoryQuestionnaire(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getPatientQuestionnairesViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getInpatientQuestionnairesViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getStartQuestionnaireViewController(_ patientContext: PECore.PEPatientContext, epicHttpLink: Swift.String) -> UIKit.UIViewController?
  @objc func getQuestionnairesViewController(forQuestionnaire questionnaireID: Swift.String, andSeries seriesAnswerID: Swift.String, patientContext: PECore.PEPatientContext, completionDelegate: (any PECore.PEQuestionnaireCompletionDelegate)?) -> UIKit.UIViewController?
  @objc func getAppointmentQuestionnairesViewController(csn: Swift.String, patientContext: PECore.PEPatientContext, organization: (any PECore.PEOrganizationInfoProtocol)?) -> UIKit.UIViewController
  @objc func getHistoryAppointmentQuestionnairesViewController(csn: Swift.String, patientContext: PECore.PEPatientContext, organization: (any PECore.PEOrganizationInfoProtocol)?) -> UIKit.UIViewController
  @objc func getOldServerAppointmentQuestionnairesViewController(csn: Swift.String, patientContext: PECore.PEPatientContext, organization: (any PECore.PEOrganizationInfoProtocol)?) -> UIKit.UIViewController
  @objc func getQuestionnaireMessageTaskViewController(messageID: Swift.String, taskID: Swift.String, patientContext: PECore.PEPatientContext, organization: (any PECore.PEOrganizationInfoProtocol)?) -> UIKit.UIViewController
  @objc func getHistoryQuestionnaireMessageTaskViewController(messageID: Swift.String, taskID: Swift.String, patientContext: PECore.PEPatientContext, organization: (any PECore.PEOrganizationInfoProtocol)?) -> UIKit.UIViewController
  @objc func getGeneralQuestionnaireViewController(patientContext: PECore.PEPatientContext, parameters: [Swift.String : Swift.String]) -> UIKit.UIViewController
  @objc func getHistoryQuestionnaireViewController(patientContext: PECore.PEPatientContext, parameters: [Swift.String : Swift.String]) -> UIKit.UIViewController
}
@objc public protocol PEQuestionnaireCompletionDelegate {
  @objc func questionnaireCompleted()
}
@objc public protocol PEVisitsComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getMOPastVisitDetailsOrgIdQSP() -> Swift.String
  @objc func getMOPastVisitDetailsModeQSP() -> Swift.String
  @objc func getMOPastVisitDetailsIsExternalQSP() -> Swift.String
  @objc func hasAccessForAfterVisitSummary(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func isExternalVisit(deepLinkUrl: Swift.String?) -> Swift.Bool
  @objc func shouldUseMOPastVisitDetails(_ patientContext: PECore.PEPatientContext, deepLinkUrl: Swift.String?, isExternal: Swift.Bool) -> Swift.Bool
  @objc func getMOPastVisitDetailsController(_ patientContext: PECore.PEPatientContext, isNotes: Swift.Bool, viewControllerTitle: Swift.String?, params: [Swift.String : Swift.String], orgInfo: (any PECore.PEOrganizationInfoProtocol)?) -> UIKit.UIViewController
  @objc func hasAccessForBedsideVisitNotes(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getBedsideAfterVisitSummaryViewController(_ encounterContext: PECore.PEEncounterContext, showHeader: Swift.Bool, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getAvsPdfViewController(_ patientContext: PECore.PEPatientContext, dcsID: Swift.String?, setTitle: Swift.Bool, showBackButton: Swift.Bool, orgID: Swift.String?) -> UIKit.UIViewController?
  @objc func getBedsideVisitNotesViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
}
@objc public enum CenteredMessageTextViewStyle : Swift.Int {
  case Clear
  case GreyedOut
  case GreyedOutLargeWhiteIndicator
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class LoadingIndicatorView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public class func getNewLoadingIndicator(_ view: UIKit.UIView) -> PECore.LoadingIndicatorView
  @objc @_Concurrency.MainActor @preconcurrency public class func getNewFullScreenLoadingIndicator(_ view: UIKit.UIView) -> PECore.LoadingIndicatorView
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func didMoveToSuperview()
  @_Concurrency.MainActor @preconcurrency public func setTextMode(_ b: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func showMessage(_ style: PECore.CenteredMessageTextViewStyle, _ msg: Swift.String?, _ isTxtMode: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func hide(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func hide()
  @objc @_Concurrency.MainActor @preconcurrency public func removeLoadingText()
  @objc deinit
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func shareWarningAlert(isPresented: SwiftUICore.Binding<Swift.Bool>, onAllowShare: @escaping () -> Swift.Void) -> some SwiftUICore.View
  
}
@objc public enum PEComponentAPIKey : Swift.Int {
  case shareEverywhere = 0
  case toDo
  case appointments
  case questionnaires
  case trackMyHealth
  case toDoBridging
  case myChartNow
  case careTeam
  case education
  case problemList
  case problemListBridging
  case happeningSoon
  case requests
  case medications
  case medicationsBridging
  case testResults
  case testResultDetail
  case H2GOrgPopup
  case dateUtilBridging
  case homePage
  case application
  case deepLinkManager
  case authentication
  case manageMyAccount
  case preventiveCare
  case myDocuments
  case myChartRef
  case messages
  case nativeMessages
  case upcomingOrders
  case scheduling
  case infectionControl
  case continuingCare
  case billing
  case onboarding
  case utilMisc
  case visits
  case workflowStep
  case checklist
  case friendsAndFamilyUpdates
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class InlineEducationView : UIKit.UIImageView {
  @objc @_Concurrency.MainActor @preconcurrency public func setInlineEducationSource(source: (any PECore.InlineEducationSourceProtocol)!, componentHost: (any PECore.PEComponentHostProtocol)?, patientContext: PECore.PEPatientContext?, encounterContext: PECore.PEEncounterContext?, hostVC: UIKit.UIViewController?, onShowLoadingIndicator: @escaping (() -> Swift.Void), onHideLoadingIndicator: @escaping (() -> Swift.Void)) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public func onInlineEducationViewClick()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc @_Concurrency.MainActor @preconcurrency public func getAccessibilityString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc open class PEPatientContext : PECore.PEUserContext {
  @objc public init(_ orgIdentifier: Swift.String, _ userIdentifier: Swift.String, _ patientIdentifier: Swift.String)
  @objc open func getPatient() -> (any PECore.PEPatientProtocol)?
  @objc public func getEncounters() -> [any PECore.PEEncounterProtocol]?
  @objc public func isPatientProxy() -> Swift.Bool
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func isSamePatient(as other: PECore.PEPatientContext?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@objc public enum PEAlertType : Swift.Int {
  case unknown = 0
  case healthReminders = 100
  case tasks = 2000
  case taskChanges = 2001
  case newInpatientLab = 62
  case newOutpatientLab = 61
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ImageUtil : ObjectiveC.NSObject {
  public static func rescaleImage(image: UIKit.UIImage, targetSize: CoreFoundation.CGSize) -> UIKit.UIImage
  public static func rescaleImage(image: UIKit.UIImage, targetHeight: CoreFoundation.CGFloat) -> UIKit.UIImage
  public static func rescaleImage(image: UIKit.UIImage, targetWidth: CoreFoundation.CGFloat) -> UIKit.UIImage
  public static func image(fromText text: Swift.String, withSize size: CoreFoundation.CGSize, backgroundColor: UIKit.UIColor, andForegroundColor foregroundColor: UIKit.UIColor) -> UIKit.UIImage?
  public static func backgroundImage(fromColor color: UIKit.UIColor) -> UIKit.UIImage?
  public static func grayscaleImage(fromImage image: UIKit.UIImage) -> UIKit.UIImage
  public static func tintImage(_ og: UIKit.UIImage, _ color: UIKit.UIColor) -> UIKit.UIImage
  public static func imageFromText(_ text: Foundation.NSString, withSize size: CoreFoundation.CGSize, backgroundColor: UIKit.UIColor, foregroundColor: UIKit.UIColor) -> UIKit.UIImage
  public static func getEpicLogoImageWithDivider(bgColor: UIKit.UIColor) -> UIKit.UIImage?
  public static func getEpicLogoImage(bgColor: UIKit.UIColor) -> UIKit.UIImage?
  public static func getEpicLogoImageInline() -> UIKit.UIImage?
  public static func getEpicLogoImage(whiteLogoName: Swift.String, blackLogoName: Swift.String, bgColor: UIKit.UIColor = .white) -> UIKit.UIImage?
  public static func getEpicLogoImageName(baseLogoName: Swift.String) -> Swift.String
  @objc public static func combineEpicLogo(withBrandLogo brandLogoImage: UIKit.UIImage) -> UIKit.UIImage
  @objc public static func loadOrgLogo(logoUrl: Swift.String, orgIconView: UIKit.UIView)
  @objc override dynamic public init()
  @objc deinit
}
@objc extension UIKit.UIImage {
  @objc public static func brandedImageNamed(_ brandedName: Swift.String, defaultBundle: Foundation.Bundle = Bundle.main) -> UIKit.UIImage?
  @objc convenience dynamic public init?(brandedName: Swift.String, defaultBundle: Foundation.Bundle = Bundle.main)
}
@objc public protocol PEMyChartRefComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getApplicationKeys() -> [Swift.String]
  @objc func setDefaultPersonWprId(for userId: Swift.String, newDefaultWprId: Swift.String?)
  @objc func getDefaultPersonWprId(for userId: Swift.String, forHomepageLaunch: Swift.Bool) -> Swift.String?
  @objc func getAvailableSecondaryLoginMethodsToSetUpRawValue(_ phonebook: (any PECore.PEPhonebookEntryProtocol)?) -> Swift.Int
  @objc(setPreventSecondaryLoginAlert:) func setPreventSecondaryLoginAlert(preventAlert: Swift.Bool)
  @objc func getPreventSecondaryLoginAlert() -> Swift.Bool
  @objc func getMonitoredAppointmentCSN() -> Swift.String
  @objc func incrementLoginCounter()
  @objc func setAppReviewCardDismiss(dismissed: Swift.Bool)
  @objc func shouldDisplayAppReviewCard() -> Swift.Bool
  @objc(setBackgroundAppRefreshCardDismissalFlag:) func setBackgroundAppRefreshCardDismissalFlag(isDismissed: Swift.Bool)
  @objc func getBackgroundAppRefreshCardDismissalFlag() -> Swift.Bool
  @objc func hasUserViewedSecondaryLogin() -> Swift.Bool
  @objc func setSecondaryLoginViewed()
  @objc func saveNotificationPreferences(email: Swift.String, phone: Swift.String)
  @objc var appleWatch: any PECore.PEAppleWatchAPIs { get }
  @objc func isDeepLinkComingFromHandOff() -> Swift.Bool
  @objc func isDeepLinkComingFromPushNotification() -> Swift.Bool
  @objc func isSecondaryLoginEnabledForOtherUser() -> Swift.Bool
  @objc @discardableResult
  func removeSecondaryLogin(orgId: Swift.String?) async -> Swift.Bool
  @objc func hasPreloginCovidStatusToken() -> Swift.Bool
  @objc func isSelfSubmittedCustomerUsingHomepage() -> Swift.Bool
  @objc func shouldHideEpicLogoInNavBar() -> Swift.Bool
  @objc func getTopViewController() -> UIKit.UIViewController?
  @objc func loadPhonebookEntries(success: @escaping ([any PECore.PEPhonebookEntryProtocol], Swift.Bool) -> Swift.Void, failure: @escaping ((PECore.WebServiceFailedError) -> Swift.Void))
  @objc func getCachedPhonebookEntries() -> [any PECore.PEPhonebookEntryProtocol]?
  @objc @discardableResult
  func clearCachedFiles() -> Swift.Bool
  @objc func canLaunchSignUpWorkflow(server: any PECore.PEPhonebookEntryProtocol) -> Swift.Bool
  @objc func getTestLibraryExpiryMessage() -> Swift.String?
  @objc func getEulaString() -> Swift.String?
  @objc func getPrivacyPolicyURL() -> Swift.String?
  @objc func isEULAAccepted() -> Swift.Bool
  @objc func setEulaAccepted()
  @objc func hasUserViewedNotificationsOnboarding() -> Swift.Bool
  @objc func setNotificationsOnboardingViewed()
  @objc func hasUserViewedLocationOnboarding() -> Swift.Bool
  @objc func setLocationOnboardingViewed()
  @objc func hasUserViewedPreLoginOnboarding() -> Swift.Bool
  @objc func makeLocationAuthorizationRequest()
  @objc func makeLocationWhileUsingAuthorizationRequest()
  @objc func getLocationAuthorizationStatus() -> CoreLocation.CLAuthorizationStatus
  @objc func supportsPushNotifications() -> Swift.Bool
  @objc func getUserInfoStringForBiometricsOnboarding() -> Swift.String
  @objc func setUserDeclinedOrgTermsConditions()
  @objc func getPasscodeWorkflow() -> UIKit.UIViewController?
  @objc func setBiometrics()
  @objc func getBiometrics() -> Swift.Bool
  @objc func isAnimatedBackgroundDisabled() -> Swift.Bool
  @objc func getAppDisplayName() -> Swift.String
  @objc func getOrgSelectionViewController() -> UIKit.UINavigationController
  @objc func scanOrgSelectQRCode(viewController: UIKit.UIViewController)
  @objc func setNavControllerOnboardingOverride(_ status: Swift.Bool)
  @objc func removeWebServerFromPreferred(orgId: Swift.String)
  @objc func isLanguagePickerAvailable() -> Swift.Bool
  @objc func launchSettingsLanguagePicker(vc: UIKit.UIViewController, orgName: Swift.String)
  @objc func displayShareDialogWithItems(items: [Any], presenter: UIKit.UIViewController, fromBarButtonItem: UIKit.UIBarButtonItem, didShow: @escaping (() -> Swift.Void), didCancel: (() -> Swift.Void)?)
  @objc func hasDynamicPatientAccessList() -> Swift.Bool
  @objc func getWebCSSColorKeys(color: PECore.PEBrandedColor) -> [Swift.String]?
  @objc func getMyChartTheme(language: Swift.String, colorProvider: any PECore.BrandedColorProviderProtocol, assetsProvider: any PECore.BrandedAssetsProviderProtocol, cardStyle: any PECore.CardStyleProtocol, interactiveCardStyle: any PECore.CardStyleProtocol, textStyles: [any PECore.TextStyleProtocol]) -> any PECore.PEThemeProtocol
  @objc func shouldShowShareWarning() -> Swift.Bool
  @objc func disableShareWarning()
  @objc var isUserAuthenticationStatusNotAuthenticated: Swift.Bool { get }
  @objc var shouldHideEulaCheckbox: Swift.Bool { get }
}
extension PECore.PEMyChartRefComponentAPIProtocol {
  public func getAvailableSecondaryLoginMethodsToSetUp(_ phonebook: (any PECore.PEPhonebookEntryProtocol)?) -> PECore.PESecondaryLoginMethod
}
public struct PESecondaryLoginMethod : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let passcode: PECore.PESecondaryLoginMethod
  public static let touchId: PECore.PESecondaryLoginMethod
  public static let faceId: PECore.PESecondaryLoginMethod
  public static let opticId: PECore.PESecondaryLoginMethod
  public typealias ArrayLiteralElement = PECore.PESecondaryLoginMethod
  public typealias Element = PECore.PESecondaryLoginMethod
  public typealias RawValue = Swift.Int
}
@objc public protocol PEAppleWatchAPIs {
  @objc func getPrelaunchAlertController(onAccept: @escaping () -> Swift.Void, onCancel: (() -> Swift.Void)?) -> UIKit.UIAlertController?
  @objc func getLinkingViewController(onLinkComplete: ((Swift.Bool) -> Swift.Void)?, onLinkCanceled: (() -> Swift.Void)?) -> UIKit.UIViewController
}
@objc public protocol PEH2GOrgPopupComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getH2GErrorPopupViewController(forPEH2GFailedOrgsList failedOrgsList: [any PECore.PEOrganizationInfoProtocol], withTitle title: Swift.String) -> UIKit.UIViewController
  @objc func getH2GErrorPopupViewController(forPEH2GFailedOrgsList failedOrgsList: [any PECore.PEOrganizationInfoProtocol], withTitle title: Swift.String, shouldShowOrgErrorText: Swift.Bool) -> UIKit.UIViewController
  @objc func getH2GOrgPopupViewController(forPEH2GOrgsList orgList: [any PECore.PEOrganizationInfoProtocol], withTitle title: Swift.String, shouldShowUpToDateString: Swift.Bool) -> UIKit.UIViewController
  @objc func getShowSubjectsForH2GOrgViewController(forSubjects subjects: [Swift.String], forOrg org: any PECore.PEOrganizationInfoProtocol) -> UIKit.UIViewController
}
@objc public protocol PEMyChartNowComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getMyChartNowActivitiesForPatientContext(_ patientContext: PECore.PEPatientContext, delegate: (any PECore.PEMyChartNowComponentDelegate)!)
  @objc func onPatientContextChanged()
  @objc func hasAccessForMyChartNow(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getMyChartNowFullscreenViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getMyChartNowFullscreenViewController(_ patientContext: PECore.PEPatientContext, secondaryDeepLinkUrl: Swift.String) -> UIKit.UIViewController?
  @objc func getMyChartNowWidgetViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getMyChartNowClassicViewController(_ patientContext: PECore.PEPatientContext, componentHost: (any PECore.PEComponentHostProtocol)?) -> UIKit.UIViewController?
  @objc func getMyChartNowDeepLinkController(_ userInfo: [Swift.String : Swift.String]?) -> UIKit.UIViewController?
  @objc func getMyChartNowDeepLinkUrl(_ userInfo: [Swift.String : Swift.String]?) -> Swift.String?
  @objc func getMyChartNowSwitcherView(_ encounterContext: PECore.PEEncounterContext, _ activityDescriptor: Swift.String, _ delegate: any PECore.PEMyChartNowSwitcherDelegate) -> any UIKit.UIView & PECore.PEMyChartNowSwitcherProtocol
  @objc func getMyChartNowIcon(_ myChartnowContextId: Swift.String) -> UIKit.UIImage
  @objc func getMyChartNowPatientTabAccessibilityLabel(_ myChartnowContextId: Swift.String) -> Swift.String
  @objc func getMyChartNowOtherActivityListTitle(_ myChartnowContextId: Swift.String) -> Swift.String
  @objc func getMyChartNowHasShownForCurrPatient() -> Swift.Bool
  @objc func setMyChartNowHasShownForCurrPatient(_ hasShown: Swift.Bool)
  @objc func setMyChartNowOnboardingURL(url: Swift.String)
  @objc func getMyChartNowOnboardingURL() -> Swift.String
  @objc func getTitleForMyChartNowActivity(_ patientContext: PECore.PEPatientContext, _ activityDescriptor: Swift.String, onTitleValueRetrieved: @escaping (_ activityTitle: Swift.String?) -> Swift.Void)
  @objc func getMyChartContext(patientContext: PECore.PEPatientContext, onComplete: @escaping (_ encounter: (any PECore.PEEncounterProtocol)?) -> Swift.Void, onError: @escaping () -> Swift.Void)
  @objc func getMyChartNowFeedTheme(myChartNowContextId: Swift.String) -> (any PECore.PEMyChartNowItemFeedThemeProtocol)?
  @objc func getMyChartNowAvailableContexts() -> [Swift.String]
  @objc func getListOfProblems(encounterContext: PECore.PEEncounterContext) -> [Swift.String]
  @objc func invalidateFeatureBadge(encounterContext: PECore.PEEncounterContext, featureID: Swift.String)
}
@objc public protocol PEMyChartNowComponentDelegate {
  @objc func didGetMyChartNowActivities(_ availableFeatures: [Swift.String]?)
  @objc func didGetMyChartNowActivitiesError(_ errorMessage: Swift.String?)
}
@objc public protocol PEMyChartNowWidgette {
  @objc func didTapHeader()
}
@objc public protocol PEMyChartNowAutoRefreshWidgette {
  @objc func performAutoRefresh()
}
@objc public protocol PEMyChartNowSwitcherDelegate {
  @objc func didSwitchContext(_ context: PECore.PEMyChartNowSwitcherContext)
}
@objc public enum PEMyChartNowSwitcherContext : Swift.Int {
  case Patient = 1
  case Encounter = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEMyChartNowSwitcherProtocol {
  @objc var currentContext: PECore.PEMyChartNowSwitcherContext { get }
}
@objc public protocol PEMyChartNowItemFeedThemeProtocol {
  @objc func getStartBackgroundImage() -> UIKit.UIImage?
  @objc func getEndBackgroundImage() -> UIKit.UIImage?
  @objc func getHeaderBackgroundColor() -> UIKit.UIColor
  @objc func getHeaderForegroundColor() -> UIKit.UIColor
  @objc func getHeaderTextColor() -> UIKit.UIColor
  @objc func getStartDateIcon() -> UIKit.UIImage?
  @objc func getLocationIcon() -> UIKit.UIImage?
  @objc func getEndDateIcon() -> UIKit.UIImage?
}
@objc public enum PEMyChartNowSharedAnimationElementViewTag : Swift.Int {
  case ActivityBackground = 96000
  case NavigationBar = 96001
  case HeaderBackground = 96002
  case HeaderStartImage = 96003
  case HeaderEndImage = 96004
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func hidden(if isHidden: SwiftUICore.Binding<Swift.Bool>) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func hidden(if isHidden: Swift.Bool) -> some SwiftUICore.View
  
}
@objc @_Concurrency.MainActor @preconcurrency public class UnreadIndicatorView : UIKit.UIView {
  @objc public enum UnreadIndicatorStyle : Swift.Int {
    case unknown
    case billingStatement
    case labResult
    case imagingResult
    case otherResult
    case procedureResult
    case visitAVS
    case visitNote
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func setStyle(_ style: PECore.UnreadIndicatorView.UnreadIndicatorStyle)
  @objc @_Concurrency.MainActor @preconcurrency public func setUnread(_ isUnread: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class ProviderImageView : UIKit.UIImageView {
  @_Concurrency.MainActor @preconcurrency public func setProviderImageSource(_ source: any PECore.ProviderImageDataSource, withName name: Swift.String, andPatientContext context: PECore.PEPatientContext?, andBackgroundColor color: UIKit.UIColor? = nil, andBorderColor borderColor: UIKit.UIColor? = nil, andBorderWidth borderWidth: CoreFoundation.CGFloat = 0.5)
  @_Concurrency.MainActor @preconcurrency public func canLoadProviderImage(withSource source: any PECore.ProviderImageDataSource, andPatientContext context: PECore.PEPatientContext?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension PECore.ProviderImageView : PECore.ImageLoaderDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadImage(_ image: UIKit.UIImage, forSource source: any PECore.ImageDataSource)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didFailToLoadImage(forSource source: any PECore.ImageDataSource)
}
public protocol PEObservable : AnyObject {
  func removeObserver(_ observer: any PECore.PEObserver)
}
extension Swift.Array {
  public mutating func appendNotNil(_ element: Element?)
  public mutating func removeAllButLast()
  public func filterIndexed(_ isIncluded: (Swift.Int, Swift.Array<Element>.Iterator.Element) throws -> Swift.Bool) rethrows -> [Swift.Array<Element>.Iterator.Element]
  @discardableResult
  public mutating func tryRemoveFirst() -> Element?
  public func joinToString(separator: Swift.String = ", ", prefix: Swift.String = "", postfix: Swift.String = "", limit: Swift.Int = -1, truncated: Swift.String = "...", _ transform: ((Element) -> Swift.String)? = nil) -> Swift.String
}
extension Foundation.NSLocale {
  @objc public static var xmlFormatterLocale: Foundation.NSLocale {
    @objc get
  }
  @objc public static var timeFormat: Swift.String {
    @objc get
  }
  @objc public static var isDevice24Hour: Swift.Bool {
    @objc get
  }
  @objc public static func commandLocale() -> PECore.PELocale
}
extension Foundation.Locale {
  public static var serverLocale: PECore.PELocale {
    get
  }
  public static var currentPELocale: PECore.PELocale {
    get
  }
  public static var defaultLocale: PECore.PELocale {
    get
  }
  public static var commandLocale: PECore.PELocale {
    get
  }
  public static var formatterLocale: PECore.PELocale {
    get
  }
  public static var currencyFormatterLocale: PECore.PELocale {
    get
  }
  public static func getDatePattern(from dateFormatTemplate: Swift.String) -> Swift.String?
  public static var isOrderMonthWeekday: Swift.Bool {
    get
  }
  public static var timeFormat: Swift.String {
    get
  }
  public static var isDevice24Hour: Swift.Bool {
    get
  }
  public func isArabicLang() -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class SiteWideThemeOverrideSetting {
  public static func isUsingOverrideThemeSettings() -> Swift.Bool
  public static func setIsUsingOverrideThemeSettings(newSetting: Swift.Bool)
  @objc deinit
}
@objc public protocol PEUserProtocol : PECore.PEPersonProtocol {
  @objc func getPatient() -> (any PECore.PEPatientProtocol)?
  @objc func getToken(_ tokenType: PECore.TokenType) -> Swift.String
  @objc func setToken(_ token: Swift.String, forType: PECore.TokenType)
  @objc func getCommandLocaleString() -> Swift.String
  @objc func getDeviceID() -> Swift.String
  @objc func isTimeout() -> Swift.Bool
  @objc func getUsername() -> Swift.String
  @objc var isRestrictedToProxySubjectAccess: Swift.Bool { get }
}
@objc public protocol OnExtensibilityActionProtocol {
  @objc func onLaunchFailure()
  @objc func onExtensibilityWebServiceComplete()
  @objc func onExtensibilityWebServiceStarted()
  @objc func performInternalLaunch(url: Swift.String, allowedHosts: [Swift.String])
}
public struct GetMyChartUrlResponse : Swift.Codable {
  public var allowedHosts: [Swift.String]?
  public var redirectURL: Swift.String?
  public var shouldLaunchOutsideApp: Swift.Bool
  public func generateDirectUrlRequest() -> Foundation.URLRequest?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class ColorUtil {
  public static func getAIPoweredColor(forTheme theme: (any PECore.PEThemeProtocol)?, color: PECore.PEBrandedColor, contrastingColor: PECore.PEBrandedColor? = nil) -> UIKit.UIColor?
  public static func getContrastCompliantColor(_ color: UIKit.UIColor, contrastingColor: UIKit.UIColor, forceDarken: Swift.Bool) -> UIKit.UIColor
  @objc deinit
}
extension UIKit.UIColor {
  @objc public static let subtleTextColor: UIKit.UIColor
  @objc public static let slightlySubtleTextColor: UIKit.UIColor
  @objc public static let errorTextColor: UIKit.UIColor
  @objc public static let disabledButtonColor: UIKit.UIColor
  @objc public static let disabledButtonTextColor: UIKit.UIColor
  @objc public static let badgeColor: UIKit.UIColor
  @objc public static let moneyTextColor: UIKit.UIColor
  @objc public static let dividerColor: UIKit.UIColor
  @objc public static let bannerBorderColor: UIKit.UIColor
  @objc public static let tabBarItemColor: UIKit.UIColor
  @objc public static let tabBarColor: UIKit.UIColor?
  convenience public init?(hexString: Swift.String)
  convenience public init?(argbHexString: Swift.String)
  convenience public init?(rgbaString: Swift.String)
  convenience public init(hue h: CoreFoundation.CGFloat, saturation s: CoreFoundation.CGFloat, lightness l: CoreFoundation.CGFloat, alpha a: CoreFoundation.CGFloat)
  public func blendColor(_ color: UIKit.UIColor?, alpha: CoreFoundation.CGFloat) -> UIKit.UIColor?
  @objc dynamic public func getContrastingTextColor() -> UIKit.UIColor
  public func getRGBA() -> (red: CoreFoundation.CGFloat, green: CoreFoundation.CGFloat, blue: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  public func getHSLA() -> (hue: CoreFoundation.CGFloat, saturation: CoreFoundation.CGFloat, lightness: CoreFoundation.CGFloat, alpha: CoreFoundation.CGFloat)
  public func getHexString() -> Swift.String
  public func shiftHue(by degrees: CoreFoundation.CGFloat) -> UIKit.UIColor
  public func tintColor(saturationPercentChange: CoreFoundation.CGFloat, lightnessPercentChange: CoreFoundation.CGFloat) -> UIKit.UIColor
  public func getTintedColor(_ toSaturation: CoreFoundation.CGFloat, _ toBrightness: CoreFoundation.CGFloat) -> UIKit.UIColor
  public func saturate(_ factor: CoreFoundation.CGFloat) -> UIKit.UIColor
  public func lighten(_ factor: CoreFoundation.CGFloat) -> UIKit.UIColor
  public func getContrastRatio(withForegroundColor foregroundColor: UIKit.UIColor) -> Swift.Double
  public func getRelativeLuminance() -> Swift.Double
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PEContextProvider : ObjectiveC.NSObject {
  @objc public class func get() -> PECore.PEContextProvider
  @objc public class func getThemeForCurrentOrganization() -> (any PECore.PEThemeProtocol)?
  public func getThemeForCurrentOrganization() -> (any PECore.PEThemeProtocol)?
  @objc public func getContext() -> PECore.PEOrganizationContext?
  @objc public func getContexts(_ organization: (any PECore.PEOrganizationProtocol)?) -> [PECore.PEUserContext]?
  @objc public func getContext(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?) -> PECore.PEUserContext?
  @objc public func getContext(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?, _ patient: (any PECore.PEPatientProtocol)?) -> PECore.PEPatientContext?
  @objc public func getContexts(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?) -> [PECore.PEPatientContext]?
  @objc public func getContext(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?, _ patient: (any PECore.PEPatientProtocol)?, _ encounter: (any PECore.PEEncounterProtocol)?) -> PECore.PEEncounterContext?
  @objc public func getContext(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?, _ patient: (any PECore.PEPatientProtocol)?, encounterIdentifier: Swift.String?) -> PECore.PEEncounterContext?
  @objc public func getContexts(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?, _ patient: (any PECore.PEPatientProtocol)?) -> [PECore.PEEncounterContext]?
  @objc public func updateOrganization(_ organization: (any PECore.PEOrganizationProtocol)?)
  @objc public func updateUser(_ organization: (any PECore.PEOrganizationProtocol)?, _ users: [any PECore.PEUserProtocol]?)
  @objc public func updatePatients(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?, _ patients: [any PECore.PEPatientProtocol]?)
  @objc public func updateEncounters(_ organization: (any PECore.PEOrganizationProtocol)?, _ user: (any PECore.PEUserProtocol)?, _ patient: (any PECore.PEPatientProtocol)?, _ encounters: [any PECore.PEEncounterProtocol]?)
  @objc public func clearContext()
  @objc public func getEncounter(_ organizationIdentifer: Swift.String?, _ userIdentifier: Swift.String?, _ patientIdentifier: Swift.String?, _ encounterIdentifier: Swift.String?) -> (any PECore.PEEncounterProtocol)?
  @objc deinit
}
@_inheritsConvenienceInitializers public class PEJSONEncoder : Foundation.JSONEncoder {
  override public init()
  @objc deinit
}
extension PECore.PEJSONEncoder : @unchecked Swift.Sendable {
}
@objc public protocol IOnboardingDelegate {
  @objc func onboardingDismissed(withActionCompleted onboardingActionCompleted: Swift.Bool)
}
@_Concurrency.MainActor @preconcurrency public struct MyChartSecureTextField : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(hint: Swift.String?, startingValue: Swift.String?, validator: PECore.Validator = .none, keyboardType: UIKit.UIKeyboardType = .default, onTextChanged: ((Swift.String) -> Swift.Void)? = nil, textViewModel: PECore.TextFieldViewModel? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore22MyChartSecureTextFieldV4bodyQrvp", 0) __
}
@objc public enum BiometricAuthenticationType : Swift.Int {
  case unknown
  case none
  case touchID
  case faceID
  case opticID
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class BiometricUtil : ObjectiveC.NSObject {
  @objc public static var deviceBiometricAuthenticationType: PECore.BiometricAuthenticationType {
    @objc get
  }
  @objc public static var deviceSupportsBiometricAuthentication: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PEHappeningSoonComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForHappeningSoon(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getHappeningSoonTimelineWidgetteViewController(_ encounterContext: PECore.PEEncounterContext, componentHost: any PECore.PEComponentHostProtocol) -> UIKit.UIViewController?
}
@objc public class Script : ObjectiveC.NSObject {
  @objc public var code: Swift.String
  public init(_ code: Swift.String)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public static func == (left: PECore.Script, right: PECore.Script) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  public static func fromString(_ rawValue: Swift.String) -> PECore.Script
  public static let Unspecified: PECore.Script
  public static let Latin: PECore.Script
  public static let SimplifiedChinese: PECore.Script
  public static let Arabic: PECore.Script
  @objc deinit
}
public class ThemeAssetProvider : PECore.BrandedAssetsProviderProtocol {
  public init(themeSettings: PECore.ThemeSettings)
  @objc public func getWebsiteUrl() -> Swift.String
  @objc public func getRelativeHeaderBackgroundImageUrl() -> Swift.String
  @objc public func getRelativeBaseImageDirectory() -> Swift.String
  @objc public func hasAcordexLicenseAsset() -> Swift.Bool
  @objc public func getImageForKeyFromLocal(key: Swift.String?) -> UIKit.UIImage?
  @objc public func getImageForKey(key: Swift.String?, success: @escaping (UIKit.UIImage) -> Swift.Void, failure: @escaping () -> Swift.Void)
  public func getImageLoaderDebug() -> PECore.ThemeImageLoader?
  @objc deinit
}
@objc public protocol PEHostableComponentViewController {
  @objc func setComponentHost(_ componentHost: any PECore.PEComponentHostProtocol)
  @objc optional func shouldShowComponentHostUserInfoInNavBar() -> Swift.Bool
  @objc optional func shouldHideComponentHostEpicLogoInNavBar() -> Swift.Bool
  @objc optional func shouldHideComponentHostPhotoInNavBar() -> Swift.Bool
  @objc optional func getLeftBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc optional func getRightBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc optional func shouldWarnUserBeforeUnload(showWarning: @escaping (() -> ()), continueWithoutWarning: @escaping (() -> ()))
  @objc optional func shouldShowComponentHostBackButton(callback: @escaping (Swift.Bool) -> ())
}
public enum ExtensibilityLaunchType {
  case Unknown
  case WebInternal
  case WebExternal
  case AppExternal
  public static func == (a: PECore.ExtensibilityLaunchType, b: PECore.ExtensibilityLaunchType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class PETutorialController : ObjectiveC.NSObject {
  @objc public static func initialize(tutorialHost: (any PECore.PETutorialHostProtocol)?)
  @objc public static func loadTutorialFromJson(bundle: Foundation.Bundle, fileName: Swift.String, patientContext: PECore.PEPatientContext?) -> PECore.PETutorialUIModel?
  @objc public static func loadTutorialFromJson(bundle: Foundation.Bundle, fileName: Swift.String, patientContext: PECore.PEPatientContext?, replacementMap: Foundation.NSDictionary?) -> PECore.PETutorialUIModel?
  @objc public static func showCurrentTutorial()
  @objc public static func registerTutorial(tutorialUIModel: PECore.PETutorialUIModel?)
  @objc public static func unregisterTutorial(tutorialUIModel: PECore.PETutorialUIModel?)
  public static func refreshTutorialAvailability()
  @objc deinit
}
@objc public protocol PEPatientIndexProtocol {
  @objc func getPatientIndex() -> Swift.Int
}
@objc public protocol PEPhonebookEntryProtocol {
  @objc func getOrgId() -> Swift.String
  @objc func getDxoId() -> Swift.String?
  @objc func getLoginConfigFileUrl() -> Swift.String?
  @objc func hasPreloginBuild() -> Swift.Bool
  @objc func getWebsiteBrandingUrl() -> Swift.String?
  @objc func getUsernameText() -> Swift.String?
  @objc func getPasswordText() -> Swift.String?
  @objc func getOrgLoginLogoUrl() -> Swift.String?
  @objc func getOrgLoginImage() -> UIKit.UIImage?
  @objc func getLoginBackgroundColor() -> UIKit.UIColor
  @objc func getLoginStatusBarColor() -> UIKit.UIColor
  @objc func getLoginBarTextColor() -> UIKit.UIColor
  @objc func getLoginBarButtonColor() -> UIKit.UIColor
  @objc func getNeutralButtonColor() -> UIKit.UIColor
  @objc func getNeutralButtonTextColor() -> UIKit.UIColor
  @objc func getUrl() -> Swift.String
  @objc func getOrganizationName() -> Swift.String
  @objc func getWebsiteName() -> Swift.String?
  @objc func isUsernamePasswordLoginAllowed() -> Swift.Bool
  @objc func isSAMLLoginMethodSecondary() -> Swift.Bool
  @objc func getPreloginAllowedHosts() -> [Swift.String]
  @objc func saveUsername(_ username: Swift.String)
  @objc func getSavedUsername() -> Swift.String
  @objc func deleteSavedUsername()
  @objc func setRememberUsernameSetting(_ value: Swift.Bool)
  @objc func getRememberUsernameSetting() -> Swift.Bool
  @objc func deleteRememberUserSetting()
  @objc func hasPasscodeSetUp() -> Swift.Bool
  @objc func hasTouchIdSetUp() -> Swift.Bool
  @objc func hasFaceIdSetUp() -> Swift.Bool
  @objc func hasOpticIdSetUp() -> Swift.Bool
  @objc func removeSecondaryLogin()
  @objc func removeBiometricLogin()
  @objc func removePasscodeLogin()
  @objc func getMyChartBrandName() -> Swift.String
  @objc func getDefaultLanguage() -> Swift.String
  @objc func getFormatterLocale() -> Swift.String
  @objc func getAllowedLanguages() -> Swift.String
  @objc func getCurrentLocale() -> PECore.PELocale
  @objc func getCustomLoginUrl() -> Swift.String?
  @objc func getSupportPhoneNumber() -> Swift.String?
  @objc func getSupportEmailAddress() -> Swift.String?
  @objc func getFaqUrl() -> Swift.String?
  @objc func hasSupportOptions() -> Swift.Bool
  @objc optional func setupLocaleSettingsSource(defaultLocale: PECore.PELocale?, allowedLocales: [PECore.PELocale]?)
  @objc func setTheme(theme: any PECore.PEThemeProtocol)
}
public enum MimeType : Swift.String {
  case zip
  case pdf
  case docx
  case xlsx
  case pptx
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension PECore.MimeType {
  public static func fromString(_ mimeTypeString: Swift.String?) -> PECore.MimeType
  public static func fromLocalFileURL(_ url: Foundation.URL) -> PECore.MimeType
}
@_hasMissingDesignatedInitializers public class HtmlUtil {
  public static let contentWrapperClassName: Swift.String
  public static let metaJavascriptInjection: Swift.String
  public static let imageLoadingJavascriptInjection: Swift.String
  public static let imagesLoadedMessageName: Swift.String
  public static let refreshTableScrollingButtonsInjectionScript: Swift.String
  public static func prepareHtmlForInlineWebViews(_ html: Swift.String, interfaceRTL: Swift.Bool = false) -> Swift.String
  public static func containsImages(html: Swift.String) -> Swift.Bool
  @objc deinit
}
@objc public protocol PEPreventiveCareComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForPreventiveCare(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getPreventiveCareViewController(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext) -> PECore.MyChartWebViewController?
}
@objc @_Concurrency.MainActor @preconcurrency open class PEOnboardingPageViewController : UIKit.UIViewController {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var textContentView: PECore.PEOnboardingTextContentView!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var imageView: UIKit.UIImageView?
  @_Concurrency.MainActor @preconcurrency public var context: PECore.PEUserContext!
  @_Concurrency.MainActor @preconcurrency weak public var parentPageViewController: PECore.PEOnboardingHostViewController?
  @_Concurrency.MainActor @preconcurrency required public init(overrideNibName: Swift.String? = nil, overrideBundle: Foundation.Bundle? = nil, context: PECore.PEUserContext, parentPageViewController: PECore.PEOnboardingHostViewController, canGoBack: Swift.Bool, isLast: Swift.Bool, videoKey: Swift.String)
  @_Concurrency.MainActor @preconcurrency required public init(overrideNibName: Swift.String? = nil, overrideBundle: Foundation.Bundle? = nil, context: PECore.PEUserContext, parentPageViewController: PECore.PEOnboardingHostViewController, canGoBack: Swift.Bool, isLast: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency open func setViewStrings()
  @_Concurrency.MainActor @preconcurrency open func setImages()
  @objc deinit
}
extension PECore.PEOnboardingPageViewController : PECore.IOnboardingNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func actionTapped()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func backTapped()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func nextTapped()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func playTapped()
}
@_Concurrency.MainActor @preconcurrency public struct BasicBodyView<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(header: Swift.String?, content: Swift.String, additionalContent: @escaping () -> Content = {EmptyView()})
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore13BasicBodyViewV4bodyQrvp", 0) __<Content>
}
@_hasMissingDesignatedInitializers public class StyleProvider {
  public static func getAllTextStyles(themeSettings: PECore.ThemeSettings, colorProvider: (any PECore.BrandedColorProviderProtocol)?) -> [any PECore.TextStyleProtocol]
  public static func getCardStyle(themeSettings: PECore.ThemeSettings) -> any PECore.CardStyleProtocol
  public static func getInteractiveCardStyle(themeSettings: PECore.ThemeSettings) -> any PECore.CardStyleProtocol
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(ServerDebugProvider) public class ServerDebugProvider : ObjectiveC.NSObject {
  @objc public static let shared: PECore.ServerDebugProvider
  @objc public var webServiceHeader: PECore.ServerDebugHeader? {
    @objc get
  }
  public var webPageHeader: PECore.ServerDebugHeader? {
    get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class ServerDebugHeader : ObjectiveC.NSObject {
  @objc final public let field: Swift.String
  @objc final public let value: Swift.String
  @objc deinit
}
public class PEChangeObservable<ValueType> {
  public var value: ValueType {
    get
  }
  public init(_ value: ValueType)
  public func setValue(_ value: ValueType)
  public func bind<ObserverType>(_ observer: ObserverType) -> PECore.PEChangeBinding<ValueType, ObserverType> where ObserverType : PECore.PEObserver
  public func removeObserver(_ observer: any PECore.PEObserver)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PEDelegated<OutputType> {
  public var callback: ((OutputType) -> Swift.Void)? {
    get
  }
  public func delegate<Object>(to object: Object, with callback: @escaping (_ delegateObject: Object, _ outputs: OutputType) -> Swift.Void) where Object : AnyObject
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PEEventDelegated {
  public var callback: (() -> ())? {
    get
  }
  public func delegate<Object>(to object: Object, with callback: @escaping (_ delegateObject: Object) -> Swift.Void) where Object : AnyObject
  @objc deinit
}
@objc public protocol SearchableProtocol {
  @objc func getSearchTerms() -> [Swift.String]
}
@objc public class LocaleSettings : ObjectiveC.NSObject {
  @objc public var currentLocale: PECore.PELocale
  @objc public var defaultLocale: PECore.PELocale
  public init(_ localeReader: any PECore.ServerLocaleSourceReader, _ deviceSettingsReader: any PECore.DeviceLocaleSourceReader)
  public func refresh()
  public func getAllowedLocales() -> [PECore.PELocale]
  public func getDebugDescription(withDevice: Swift.Bool) -> Swift.String
  @objc deinit
}
@objc public protocol ImageDataSource {
  @objc var imageURL: Swift.String { get }
}
@_hasMissingDesignatedInitializers @objc public class PEEncounterContext : PECore.PEPatientContext {
  @objc public func getEncounter() -> (any PECore.PEEncounterProtocol)?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc public func isSameEncounter(as other: PECore.PEEncounterContext?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class MyChartUILabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func getFontRamp() -> PECore.FontRamp
  @objc @_Concurrency.MainActor @preconcurrency public func setFontRamp(fontRamp: PECore.FontRamp)
  @_Concurrency.MainActor @preconcurrency public static func getTextStyle(fontRamp: PECore.FontRamp) -> any PECore.TextStyleProtocol
  @objc @_Concurrency.MainActor @preconcurrency public static func applyFontRampToLabel(uiLabel: UIKit.UILabel, fontRamp: PECore.FontRamp)
  @objc @_Concurrency.MainActor @preconcurrency public static func applyFontRampToTextView(uiTextView: UIKit.UITextView, fontRamp: PECore.FontRamp)
  @objc @_Concurrency.MainActor @preconcurrency public static func getCustomFont(fontRamp: PECore.FontRamp) -> UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency public static func getCustomFont(fontRamp: PECore.FontRamp, isItalic: Swift.Bool = false, isBold: Swift.Bool = false) -> UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency public static func getCustomFont(textStyle: any PECore.TextStyleProtocol, isItalic: Swift.Bool = false, isBold: Swift.Bool = false) -> UIKit.UIFont
  @_Concurrency.MainActor @preconcurrency public static func getFontColor(fontRamp: PECore.FontRamp) -> UIKit.UIColor
  @objc deinit
}
extension Swift.String {
  public var isBlank: Swift.Bool {
    get
  }
  public mutating func prepend(_ other: Swift.String)
  public func prepending(_ aString: Swift.String) -> Swift.String
  public func prependIndent(_ indent: Swift.String = "    ") -> Swift.String
  public func labeledWith(id: Swift.String, locale: PECore.PELocale? = nil, bundle: Foundation.Bundle? = nil) -> Swift.String
  public func equals(_ other: Swift.String?, ignoreCase: Swift.Bool = false) -> Swift.Bool
  public func toBool() -> Swift.Bool
  public func unwrap() -> Swift.String?
  public func hasSuffix(_ suffix: Swift.String, ignoreCase: Swift.Bool = false) -> Swift.Bool
  public func hasPrefix(_ prefix: Swift.String, ignoreCase: Swift.Bool = false) -> Swift.Bool
}
#if compiler(>=5.3) && $NoncopyableGenerics
extension Swift.Optional where Wrapped == Swift.String {
  public var isNilOrBlank: Swift.Bool {
    get
  }
  public var isNilOrEmpty: Swift.Bool {
    get
  }
  public func unwrap() -> Swift.String?
  public func toBool() -> Swift.Bool
}
#else
extension Swift.Optional where Wrapped == Swift.String {
  public var isNilOrBlank: Swift.Bool {
    get
  }
  public var isNilOrEmpty: Swift.Bool {
    get
  }
  public func unwrap() -> Swift.String?
  public func toBool() -> Swift.Bool
}
#endif
public class GenericWebListener : PECore.WebSessionEventDelegate {
  public init(readyBlock: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func onWebSessionReady(success: Swift.Bool)
  @objc deinit
}
@objc public protocol PERequestsComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForRequests(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getRequestsViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getRequestsActivityTitle(_ organizationContext: PECore.PEOrganizationContext) -> Swift.String
}
public class CoreWebViewManager {
  @SwiftUICore.Binding @_projectedValueProperty($url) public var url: Foundation.URL? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $url: SwiftUICore.Binding<Foundation.URL?> {
    get
  }
  public init()
  public func shouldAllowNavigation(webView: WebKit.WKWebView, request: Foundation.URLRequest) async -> Swift.Bool
  public func shouldAllowDownload(webView: WebKit.WKWebView, request: Foundation.URLRequest) async -> Swift.Bool
  @objc deinit
}
extension Foundation.NSNotification.Name {
  public static let forceBadgeUpdate: Foundation.Notification.Name
  public static let alertsReloaded: Foundation.Notification.Name
  public static let mcnBadgeInvalidated: Foundation.Notification.Name
  public static let toDoReminderTimeChanged: Foundation.Notification.Name
  public static let careCompanionGeneric: Foundation.Notification.Name
  public static let creditCardPaymentFinished: Foundation.Notification.Name
  public static let echeckinClosed: Foundation.Notification.Name
  public static let questionnairesComplete: Foundation.Notification.Name
  public static let fdiLinksLoaded: Foundation.Notification.Name
  public static let hasLoggedOut: Foundation.Notification.Name
  public static let unwindToLoginScreen: Foundation.Notification.Name
  public static let communityConnectionUpdated: Foundation.Notification.Name
  public static let appointmentListClose: Foundation.Notification.Name
  public static let appointmentDetailsClose: Foundation.Notification.Name
  public static let refreshFutureAppointments: Foundation.Notification.Name
  public static let newAppointmentScheduled: Foundation.Notification.Name
  public static let appointmentDirectlyCancelled: Foundation.Notification.Name
  public static let appointmentCancellationRequestSent: Foundation.Notification.Name
  public static let rescheduleComplete: Foundation.Notification.Name
  public static let communityMedicationsRefill: Foundation.Notification.Name
  public static let personalPreferencesUpdated: Foundation.Notification.Name
  public static let appointmentArrivalSettingChanged: Foundation.Notification.Name
  public static let appointmentArrivalMonitoredAppointmentChanged: Foundation.Notification.Name
  public static let appointmentArrivalStatusChanged: Foundation.Notification.Name
  public static let careTeamWidgetNeedReloaded: Foundation.Notification.Name
  public static let contactPreferencesUpdated: Foundation.Notification.Name
  public static let refreshWebView: Foundation.Notification.Name
  public static let refreshAccountSettings: Foundation.Notification.Name
  public static let refreshAccountSettingsDeviceList: Foundation.Notification.Name
  public static let javascriptCallback: Foundation.Notification.Name
  public static let inlineEducationStayHere: Foundation.Notification.Name
  public static let inlineEducationLaunched: Foundation.Notification.Name
  public static let locationOnboardingCompleted: Foundation.Notification.Name
  public static let toggleOnboardingLoadingIndicator: Foundation.Notification.Name
  public static let toggleOnboardingLoadingIndicatorExtra: Foundation.Notification.Name
  public static let biometricsOnboardingWorkflowCompleted: Foundation.Notification.Name
  public static let myChartBrandingConfigurationRetrieved: Foundation.Notification.Name
  public static let patientAccessesUpdated: Foundation.Notification.Name
  public static let postSignupAuthentication: Foundation.Notification.Name
  public static let deepLink: Foundation.Notification.Name
  public static let userSettingsDidChange: Foundation.Notification.Name
  public static let myccH2GLinkCreated: Foundation.Notification.Name
}
@objc extension Foundation.NSNotification {
  @objc public static var refreshWebView: Foundation.NSString {
    @objc get
  }
  @objc public static var refreshAccountSettings: Foundation.NSString {
    @objc get
  }
  @objc public static var refreshAccountSettingsDeviceList: Foundation.NSString {
    @objc get
  }
  @objc public static var reloadComponentPaneHostedViewController: Foundation.NSString {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers public class NotificationCenterUtil : ObjectiveC.NSObject {
  public static let toggleOnboardingLoadingIndicatorPublisher: Foundation.NotificationCenter.Publisher
  public static let logoutPublisher: Foundation.NotificationCenter.Publisher
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class MyChartCentralHomepageWebViewController : PECore.MyChartWebViewController {
  @_Concurrency.MainActor @preconcurrency public func setScrollEnabled(_ newValue: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setContext(manager: PECore.MyChartCentralHomepageWebViewControllerManager, args: PECore.MyChartWebArgs?, delegate: (any PECore.IOnMyChartCentralHomepageErrorDelegate)?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func shouldOverrideUrlResponseBehavior(for navigationResponse: WebKit.WKNavigationResponse) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func onPageStarted(url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func onPageFinished(url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func onHomepageLoadingError()
  @_Concurrency.MainActor @preconcurrency public func reloadHomepage()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol IOnMyChartCentralHomepageErrorDelegate : AnyObject {
  func onHomepageLoadingError()
}
@_Concurrency.MainActor @preconcurrency public struct FileView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public static func canDisplayFileType(fileType: PECore.FileType) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func canDisplayMimeType(mimeType: PECore.MimeType) -> Swift.Bool
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore8FileViewV4bodyQrvp", 0) __
}
extension UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public func dismissAsync(animated: Swift.Bool) async
}
@_hasMissingDesignatedInitializers public class PEMyChartOrgToOrgJumpManager {
  public class func setJumpUri(_ deepLinkUrl: Swift.String)
  public class func getAndClearLaunchUri() -> Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PETutorialViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var tutorialModel: PECore.PETutorialUIModel?
  @_Concurrency.MainActor @preconcurrency public var isForced: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func accessibilityPerformEscape() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillLayoutSubviews()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol PEAuthenticationComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getViewControllerForTwoFactorAuthentication(withContext userContext: PECore.PEUserContext, twoFactorInformation: any PECore.TwoFactorInformationProtocol, completionHandler: ((Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)?) -> UIKit.UIViewController?
  @objc func getViewControllerForTwoFactorEnrollment(withContext userContext: PECore.PEUserContext, twoFactorInformation: any PECore.TwoFactorInformationProtocol, completionHandler: ((Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)?) -> UIKit.UIViewController?
  @objc func supportsTwoFactorOptIn(withContext userContext: PECore.PEUserContext) -> Swift.Bool
  @objc func loadTwoFactorInformation(withContext userContext: PECore.PEUserContext, completionHandler: @escaping (((any PECore.TwoFactorInformationProtocol)?) -> Swift.Void), errorHandler: @escaping ((PECore.WebServiceFailedError) -> Swift.Void))
  @objc func getViewControllerForTwoFactorOptIn(withContext userContext: PECore.PEUserContext, twoFactorInformation: any PECore.TwoFactorInformationProtocol, completionHandler: ((Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)?) -> UIKit.UIViewController?
  @objc func getViewControllerForTwoFactorOptIn(withContext userContext: PECore.PEUserContext, deepLink: Swift.String) -> UIKit.UIViewController?
  @objc func getViewControllerForTwoFactorOnboarding(withContext userContext: PECore.PEUserContext, twoFactorInformation: (any PECore.TwoFactorInformationProtocol)?) -> UIKit.UIViewController?
  @objc func hasRestrictedAccessToken(tokenType: PECore.RestrictedAccessTokenType, forOrgId orgId: Swift.String?) -> Swift.Bool
  @objc func getRestrictedAccessToken(tokenType: PECore.RestrictedAccessTokenType) -> (any PECore.RestrictedAccessTokenProtocol)?
  @objc func loginWithRestrictedAccessToken(tokenType: PECore.RestrictedAccessTokenType, phonebookEntry: any PECore.PEPhonebookEntryProtocol, defaultTheme: any PECore.PEThemeProtocol, completionHandler: @escaping ((PECore.PEPatientContext) -> Swift.Void), errorHandler: @escaping ((Swift.String) -> Swift.Void))
  @objc func createRestrictedAccessToken(userContext: PECore.PEUserContext, tokenType: PECore.RestrictedAccessTokenType, username: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc func removeRestrictedAccessTokenFromDevice(withTokenType tokenType: PECore.RestrictedAccessTokenType)
  @objc func removeRestrictedAccessTokenFromDeviceAndServer(withTokenType tokenType: PECore.RestrictedAccessTokenType, userContext: PECore.PEUserContext)
  @objc func recreateRestrictedAccessTokenIfNeeded(userContext: PECore.PEUserContext, tokenType: PECore.RestrictedAccessTokenType, username: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc func getLoginViewController() -> UIKit.UIViewController
  @objc func hasCurrentRestrictedAccessSession() -> Swift.Bool
  @objc func clearCurrentRestrictedAccessSession()
  @objc func getSamlToken() -> Swift.String?
  @objc func getFavoritedOrgs() -> [any PECore.PEPhonebookEntryProtocol]
  @objc func setFavoritedOrgs(orgs: [any PECore.PEPhonebookEntryProtocol])
  @objc func executeOrgSelectDeeplink(orgId: Swift.String)
  @objc optional func getCurrentFeatureAccessInformation()
  @objc optional func getFullFeatureAccessInformation(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc optional func getFeatureLoadStatusForPatient(accountID: Swift.String) -> PECore.FeatureLoadStatus
  @objc var currentPreLoginTheme: (any PECore.PEThemeProtocol)? { get }
  @objc func launchLoginWorkflow(orgId: Swift.String)
  @objc var shouldSkipOnboardingOrgSelectionStep: Swift.Bool { get }
}
@objc public protocol TwoFactorInformationProtocol {
  @objc var allowOptIn: Swift.Bool { get }
  @objc var isOptedIn: Swift.Bool { get }
  @objc var allowOptInTOTP: Swift.Bool { get }
  @objc var isOptedInTOTP: Swift.Bool { get }
  @objc var isEmailDeliveryConfigured: Swift.Bool { get }
  @objc var isSMSDeliveryConfigured: Swift.Bool { get }
  @objc var isTwoFactorRequired: Swift.Bool { get }
  @objc var smsEmailAccountSettingsInfo: PECore.TwoFactorAccountSettingInfo { get }
  @objc var totpAccountSettingsInfo: PECore.TwoFactorAccountSettingInfo { get }
}
@objc public class TwoFactorAccountSettingInfo : ObjectiveC.NSObject {
  @objc final public let showOption: Swift.Bool
  @objc final public let userEnabled: Swift.Bool
  @objc final public let allowToggle: Swift.Bool
  @objc public init(showOption: Swift.Bool, userEnabled: Swift.Bool, allowToggle: Swift.Bool)
  @objc deinit
}
@objc public enum RestrictedAccessTokenType : Swift.Int, Swift.CaseIterable {
  case AppleWatchHealthFeed = 1
  case PreloginCovidStatus = 2
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PECore.RestrictedAccessTokenType]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [PECore.RestrictedAccessTokenType] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol RestrictedAccessTokenProtocol {
  @objc var tokenType: PECore.RestrictedAccessTokenType { get }
  @objc var username: Swift.String? { get }
  @objc var orgId: Swift.String? { get }
  @objc var hasValues: Swift.Bool { get }
}
public class PELoginRequest {
  final public let phonebookEntry: any PECore.PEPhonebookEntryProtocol
  final public let username: Swift.String
  final public let authValue: Swift.String
  final public let authType: PECore.PEAuthType
  final public let authValueEncrypted: Swift.Bool
  final public let saveUsername: Swift.Bool
  final public let secondaryLoginMethod: PECore.PESecondaryLoginMethod?
  public init(phonebookEntry: any PECore.PEPhonebookEntryProtocol, username: Swift.String, authValue: Swift.String, authType: PECore.PEAuthType, authValueEncrypted: Swift.Bool, saveUsername: Swift.Bool, secondaryLoginMethod: PECore.PESecondaryLoginMethod? = nil)
  @objc deinit
}
public enum PEAuthType {
  case password, deviceToken, token, oauthToken
  public static func == (a: PECore.PEAuthType, b: PECore.PEAuthType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PEChangeBinding<ValueType, ObserverType> where ObserverType : PECore.PEObserver {
  @discardableResult
  public func onChange(_ callback: @escaping (ObserverType, (oldValue: ValueType?, newValue: ValueType)) -> Swift.Void) -> Self
  public func fire()
  @objc deinit
}
@objc public protocol ProviderImageDataSource : PECore.CacheableImageDataSource {
  @objc var providerId: Swift.String { get }
  @objc var isProviderIdEncrypted: Swift.Bool { get }
  @objc var hasImageOnBlob: Swift.Bool { get }
  @objc var organization: any PECore.PEOrganizationInfoProtocol { get }
}
@objc public protocol PEShareEverywhereComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForShareEverywhere(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getShareEverywhereViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
}
@_inheritsConvenienceInitializers public class FileViewManager : PECore.CoreWebViewManager {
  override public func shouldAllowNavigation(webView: WebKit.WKWebView, request: Foundation.URLRequest) async -> Swift.Bool
  override public func shouldAllowDownload(webView: WebKit.WKWebView, request: Foundation.URLRequest) async -> Swift.Bool
  override public init()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MyChartTabView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(cells: [SwiftUICore.AnyView], primaryDotColor: UIKit.UIColor, secondaryDotColor: UIKit.UIColor, width: CoreFoundation.CGFloat?)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore14MyChartTabViewV4bodyQrvp", 0) __
}

public enum FileType {
  case zip
  case pdf
  case docx
  case xlsx
  case pptx
  case unknown
  public static func == (a: PECore.FileType, b: PECore.FileType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class PEEventObservable {
  public init()
  public func bind<ObserverType>(_ observer: ObserverType) -> PECore.PEEventBinding<ObserverType> where ObserverType : PECore.PEObserver
  public func fire()
  public func removeObserver(_ observer: any PECore.PEObserver)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class UiUtil : ObjectiveC.NSObject {
  @objc public static func keyWindow() -> UIKit.UIWindow?
  @objc public static func getRootViewController() -> UIKit.UIViewController?
  @objc public static func getRootNavigationController() -> UIKit.UINavigationController?
  @objc(getNavControllerChildOf:) public static func getNavController(childOf viewController: UIKit.UIViewController?) -> UIKit.UINavigationController?
  @objc public static func interfaceOrientation() -> UIKit.UIInterfaceOrientation
  @objc public static func statusBarFrame() -> CoreFoundation.CGRect
  @objc public static func statusBarStyleMatchingColor(_ color: UIKit.UIColor) -> UIKit.UIStatusBarStyle
  public static func loadUri(for resource: Swift.String?, baseUrl: Swift.String?, defaultImageKey: Swift.String?, imageKeyBundle: Foundation.Bundle?, loadLocalImage: (UIKit.UIImage?) -> Swift.Void, loadDataSource: (any PECore.ImageDataSource) -> Swift.Void)
  public static let relativeUrlPath: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency public var countLabelLines: Swift.Int {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var isTruncated: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var getLabelSize: CoreFoundation.CGRect {
    get
  }
}
extension UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static func isInterfaceRightToLeftMode() -> Swift.Bool
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func showNavigationBar(_ shouldShow: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func dismissToLoginController(_ loginViewController: UIKit.UIViewController)
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func getLoginViewController() -> UIKit.UIViewController?
  @objc @_Concurrency.MainActor @preconcurrency dynamic open func presentSafely(_ vcToPresent: UIKit.UIViewController, animated: Swift.Bool, completion: (() -> Swift.Void)? = nil)
}
@objc public protocol PEEncounterProtocol {
  @objc func getIdentifier() -> Swift.String
  @objc func getNowContext() -> Swift.String
  @objc func getWebServiceUrl(_ urlType: PECore.UrlType) -> Swift.String
  @objc func getUniversalIdentifier() -> Swift.String
  @objc func getAlerts(patient: any PECore.PEPatientProtocol) -> [any PECore.PEEncounterAlertProtocol]
}
@_inheritsConvenienceInitializers @objc public class FileUtil : ObjectiveC.NSObject {
  public static let WPHasClearedOrphanedFiles: Swift.String
  @objc public static let FileURLPrefix: Swift.String
  @objc public enum FileType : Swift.Int {
    case DocumentDirectory
    case InboxDirectory
    case ApplicationSupportDirectory
    case TemporaryDirectory
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public static func getPathForFileType(_ fileType: PECore.FileUtil.FileType) -> Swift.String
  public static func clearTmpDirectory()
  @objc public static func clearInboxDirectory()
  public static func clearOrphanedTempFiles()
  @objc public static func clearFilesInDirectory(dir: Swift.String, withSubDirectories clearSubDirs: Swift.Bool)
  public static func excludeDirectoriesFromBackup()
  public static func excludeDirFromBackup(dir: Foundation.FileManager.SearchPathDirectory)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class PECacheableImageView : UIKit.UIImageView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shouldTintImage: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var shouldMakeImageGrayScale: Swift.Bool
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PECore.IPECacheableImageViewDelegate)?
  @_Concurrency.MainActor @preconcurrency public func loadUri(for resource: Swift.String?, in bundle: Foundation.Bundle?, onImageLoadFailCallback: (() -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func clear()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PECore.PEImageDataSource : PECore.CacheableImageDataSource {
}
open class PEImageDataSource {
  public static let relativeUrlPath: Swift.String
  @objc public var imageURL: Swift.String {
    get
  }
  open var assetType: PECore.PEImageDataSource.AssetType {
    get
  }
  required public init(imageURL: Swift.String)
  public enum AssetType {
    case local
    case absoluteUrl
    case relativeUrl
    public static func == (a: PECore.PEImageDataSource.AssetType, b: PECore.PEImageDataSource.AssetType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class VideoCardView : PECore.SelfLoadingView {
  @_Concurrency.MainActor @preconcurrency public static let SHARE_EVERYWHERE_KEY: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let VIDEO_VISIT_KEY: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let ONBOARDING_KEY: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let MCN_ONBOARDING_KEY: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let COVID_CREDENTIAL_KEY: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let ED_MCN_ONBOARDING_KEY: Swift.String
  @_Concurrency.MainActor @preconcurrency public var userContext: PECore.PEUserContext?
  @_Concurrency.MainActor @preconcurrency override public var selfLoadingNibName: Swift.String? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func setupContext(videoResponse: PECore.VideoResponse?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public protocol PEContinuingCareComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForContinuingCare(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getContinuingCareViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getOpenListViewController(_ encounterContext: PECore.PEEncounterContext, epicHttpLink: Swift.String) -> UIKit.UIViewController?
}
@objc public protocol PEAppointmentsComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getECheckInViewController(forCSN csn: Swift.String) -> UIKit.UIViewController?
  @objc func getFutureAppointmentViewController(forCSN csn: Swift.String) -> UIKit.UIViewController?
  @objc func hasAccessToWebScheduling() -> Swift.Bool
  @objc func initiateAppointmentArrivalMonitoring()
  @objc func requestAppointmentLiveActivities()
}
@objc public protocol PEAppointmentProvider {
  @objc var ID: Swift.String { get }
  @objc var canDirectSchedule: Swift.Bool { get }
  @objc var getPEOrganization: any PECore.PEOrganizationInfoProtocol { get }
}
@objc public enum TokenType : Swift.Int {
  case Default
  case Bedside
  case MyChart
  case OAuth2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEProblemListComponentBridgingAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getHealthIssuesViewController() -> UIKit.UIViewController?
}
public typealias Header = (Swift.String, Swift.String)
public protocol Parameterable {
  func encodedData() -> Foundation.Data?
  func valueAsString() -> Swift.String
  func getKey() -> Swift.String
}
public struct Parameter<T> : PECore.Parameterable where T : Swift.Encodable {
  public init(_ key: Swift.String, _ value: T)
  public func getKey() -> Swift.String
  public func valueAsString() -> Swift.String
  public func encodedData() -> Foundation.Data?
}
@objc public protocol PETrackMyHealthComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getTrackMyHealthViewController() -> UIKit.UIViewController?
}
@objc public class PELocale : ObjectiveC.NSObject {
  @objc public var language: PECore.Language
  @objc public var region: PECore.Region
  @objc public var script: PECore.Script
  @objc public init(_ language: PECore.Language, _ region: PECore.Region = Region.Unspecified, _ script: PECore.Script = Script.Unspecified)
  @objc public var code: Swift.String {
    @objc get
    @objc set
  }
  @objc public var commandCode: Swift.String {
    @objc get
    @objc set
  }
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public var isArabicLang: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public static func == (left: PECore.PELocale, right: PECore.PELocale) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  public func languageAndScriptMatch(locale: PECore.PELocale) -> Swift.Bool
  @objc public static func fromString(_ rawValue: Swift.String) -> PECore.PELocale
  public static func fromStringArray(_ rawValues: [Swift.String]) -> [PECore.PELocale]
  @objc public static func fromLocale(_ locale: Foundation.Locale) -> PECore.PELocale?
  @objc public func toLocale() -> Foundation.Locale
  @objc public static let EnglishUS: PECore.PELocale
  @objc public static let EnglishGB: PECore.PELocale
  @objc public static let ArabicSA: PECore.PELocale
  @objc public static let ArabicAE: PECore.PELocale
  @objc public static let Spanish: PECore.PELocale
  @objc public static let Swedish: PECore.PELocale
  @objc public static let SimplifiedChineseUS: PECore.PELocale
  @objc public static let Russian: PECore.PELocale
  @objc public static let MongolianUS: PECore.PELocale
  @objc public static let Gibberish: PECore.PELocale
  public var hasMobileStrings: Swift.Bool {
    get
    set
  }
  public static var translatedStringLocales: [PECore.PELocale]
  @objc public func getTextAlignment() -> PECore.TextAlignment
  @objc deinit
}
@objc public protocol CardStyleProtocol : PECore.BaseStyleProtocol {
  @objc func cornerRadius() -> Swift.Float
  @objc func elevation() -> Swift.Float
  @objc func dropShadow() -> UIKit.UIColor?
  @objc func fillColor() -> UIKit.UIColor
  @objc func borderColor() -> UIKit.UIColor?
}
@_hasMissingDesignatedInitializers public class ThemeSettings : Swift.Codable {
  public var name: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class TokenProvider : ObjectiveC.NSObject {
  public static let instance: PECore.TokenProvider
  public func setToken(type: PECore.TokenType, token: Swift.String)
  public func removeToken(for type: PECore.TokenType)
  public func getToken(type: PECore.TokenType) -> Swift.String?
  public func getAuthHeader(type: PECore.TokenType) -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class VideoResponseViewModel : ObjectiveC.NSObject {
  public static func loadVideoLink(_ userContext: PECore.PEUserContext, videoName: Swift.String, successHandler: @escaping (PECore.VideoResponse) -> Swift.Void, failureHandler: @escaping (PECore.WebServiceFailedError) -> Swift.Void)
  public static func logVideoView(videoName: Swift.String)
  public static func setVideoHandled(videoName: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CoreButtonView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(coreButton: PECore.CoreButton, updateUIView: ((PECore.CoreButton) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore14CoreButtonViewV4bodyQrvp", 0) __
}
extension PECore.CoreButtonView {
  @_Concurrency.MainActor @preconcurrency public func fixedButtonSize(horizontal: Swift.Bool, vertical: Swift.Bool) -> some SwiftUICore.View
  
}
public struct PEDeepLinkOption : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let none: PECore.PEDeepLinkOption
  public static let switchPersonContext: PECore.PEDeepLinkOption
  public static let retrieveExtraDataFromServer: PECore.PEDeepLinkOption
  public static let preventSwitchOrgsOnLoginPage: PECore.PEDeepLinkOption
  public static let showAlertForMismatchedOrg: PECore.PEDeepLinkOption
  public static let suppressH2GUnsupportedAlert: PECore.PEDeepLinkOption
  public static let externalDeepLink: PECore.PEDeepLinkOption
  public static let fromFeatureAndCodeModule: PECore.PEDeepLinkOption
  public static let awaitSecurity: PECore.PEDeepLinkOption
  public typealias ArrayLiteralElement = PECore.PEDeepLinkOption
  public typealias Element = PECore.PEDeepLinkOption
  public typealias RawValue = Swift.Int
}
@objc public protocol PEUpcomingOrdersComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForUpcomingOrders(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getUpcomingOrdersViewController(_ patientContext: PECore.PEPatientContext, _ ordId: Swift.String?) -> UIKit.UIViewController
}
@objc public protocol PETestResultsComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc static var testResultViewedNotification: Swift.String { get }
  @objc static var organizationLinkUpdatedNotification: Swift.String { get }
  @objc static var communityRefreshBannerNeedUpdate: Swift.String { get }
  @objc static var communityNotificationRefreshBannerUpdateKey: Swift.String { get }
  @objc func getMOTestResultModeQSP() -> Swift.String
  @objc func getMOTestResultOrgIdQSP() -> Swift.String
  @objc func getMOTestResultEOrderIDQSP() -> Swift.String
  @objc func hasAccessForTestResults(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForOutpatientTestResults(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForMOInpatientTestResults(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForMOTestResults(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func shouldUseMOTestResultDetails(_ patientContext: PECore.PEPatientContext, deepLinkUrl: Swift.String?) -> Swift.Bool
  @objc func getInpatientTestResultsViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getTestResultsViewController(_ patientContext: PECore.PEPatientContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getTestResultDetailsViewController(_ patientContext: PECore.PEPatientContext, viewControllerTitle: Swift.String?, params: [Swift.String : Swift.String]) -> UIKit.UIViewController?
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public var isUIHostingController: Swift.Bool {
    @objc get
  }
}
extension Foundation.URL {
  public static let SMSURLScheme: Swift.String
  public static let PhoneURLScheme: Swift.String
  public static let MailURLScheme: Swift.String
  public static let OTPAuthURLScheme: Swift.String
  public static let MailURLSubjectKey: Swift.String
  public static let MailURLBodyKey: Swift.String
  public static let AppleMapsURLSchemeModern: Swift.String
  public static let AppleMapsURLSchemeOld: Swift.String
  public static func urlEncode(string: Swift.String?) -> Swift.String?
  public var hasAppLaunchScheme: Swift.Bool {
    get
  }
  public var queryParametersAsDictionary: [Swift.String : Swift.String] {
    get
  }
  public func getQueryParametersAsDictionary(forceLowercaseParameterNames: Swift.Bool = true) -> [Swift.String : Swift.String]
  public func containsQueryParameter(withKey key: Swift.String) -> Swift.Bool
  public func getQueryParameter(forKey key: Swift.String) -> Swift.String?
  public func hasValidScheme() -> Swift.Bool
  public func isNetworkURL() -> Swift.Bool
  public func isAboutUrl() -> Swift.Bool
  public func isDefaultAppleUrl() -> Swift.Bool
  public func isTrustedExternalApp() -> Swift.Bool
  public func isEmbeddedYoutube() -> Swift.Bool
  public func isMyChartAzureVideo() -> Swift.Bool
  public func isHostInAllowedList(allowedHosts: [Swift.String]) -> Swift.Bool
}
@objc extension Foundation.NSURL {
  @objc dynamic public func isAboutUrl() -> Swift.Bool
}
extension Swift.String {
  public func addQueryParamToUrl(_ queryParam: Swift.String, value: Swift.String) -> Swift.String
  public func addQueryParamToUrl(_ queryParam: Swift.String, value: Swift.String, shouldEncode: Swift.Bool) -> Swift.String
  public func removeQueryParamFromURL(queryParam: Swift.String) -> Swift.String
  public func doesURLStringContainHost(host: Swift.String) -> Swift.Bool
  public func urlWithoutQueryParams() -> Swift.String
}
@objc extension Foundation.NSString {
  @objc(addQueryParamToUrlwithKey:andValue:withEncoding:) dynamic public func addQueryParamToUrl(key: Swift.String, value: Swift.String, shouldEncode: Swift.Bool) -> Foundation.NSString
}
extension Foundation.URLRequest {
  public init(url: Foundation.URL, headers: [Swift.String : Swift.String])
}
extension Foundation.URLComponents {
  public var queryParametersAsDictionary: [Swift.String : Swift.String] {
    get
  }
}
@_Concurrency.MainActor @preconcurrency public struct PersonSwiftUIImageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(person: any PECore.PEPersonProtocol, size: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore22PersonSwiftUIImageViewV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers public class FakeUIImagePerson : ObjectiveC.NSObject, PECore.PEPersonProtocol {
  @objc public func getWebServiceUrl(_ urlType: PECore.UrlType) -> Swift.String
  @objc public func getAccountIdType() -> PECore.IDType
  @objc public func update(nickname: Swift.String?)
  @objc public func update(colorIndex: Swift.Int)
  @objc public func update(photo: UIKit.UIImage?)
  @objc public func getFeatureLoadStatus() -> PECore.FeatureLoadStatus
  @objc public func getIdentifier() -> Swift.String
  @objc public func getEncryptedIdentifier() -> Swift.String
  @objc public func hasSecurityPoint(_ feature: Swift.String) -> Swift.Bool
  @objc public func getNickname() -> Swift.String?
  @objc public func getNickname(preferRefusalName: Swift.Bool) -> Swift.String?
  @objc public func getFullname() -> Swift.String
  @objc public func getColor() -> UIKit.UIColor
  @objc public func getTextColor() -> UIKit.UIColor
  @objc public func getPhoto(onImageLoaded: ((any PECore.PEPersonProtocol, UIKit.UIImage?) -> Swift.Void)?) -> UIKit.UIImage?
  @objc public func getPhoto(useFallback: Swift.Bool, onImageLoaded: ((any PECore.PEPersonProtocol, UIKit.UIImage?) -> Swift.Void)?) -> UIKit.UIImage?
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PEComponentAPIProtocol {
}
@objc public protocol PEPatientProtocol : PECore.PEPersonProtocol {
  @objc func getIsInED() -> Swift.Bool
  @objc func getIsAdmitted() -> Swift.Bool
  @objc func getAlerts() -> [any PECore.PEAlertProtocol]
  @objc func getNowContext() -> Swift.String
  @objc func setNowContext(_ nowContextId: Swift.String)
  @objc optional func getToken(_ tokenType: PECore.TokenType) -> Swift.String
}
@objc public protocol PEDeepLinkLaunchableProtocol {
  @objc func setDeepLinkLaunchParameters(_ deepLinkLaunchParameters: [Swift.String : Swift.String])
}
@objc public protocol PEEducationComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForOutpatientEducation(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForInpatientEducation(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForEducationPoint(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getInpatientEducationTitlesViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getOutpatientEducationTitlesViewController(_ patientContext: PECore.PEPatientContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getEducationPointViewController(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext, pointID: Swift.String, educationTitle: Swift.String, completionDelegate: (any PECore.PEEducationPointCompletionDelegate)?, shouldLaunchMedicalAdviceMessageComposer: Swift.Bool, buttonStyle: PECore.PEEducationButtonStyle, pointStatus: Foundation.NSNumber?, educationKey: Swift.String, componentHost: (any PECore.PEComponentHostProtocol)?, taskID: Swift.String?, taskInstant: Swift.String?) -> PECore.MyChartWebViewController?
  @objc func getEducationTOCViewController(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext, titleId: Swift.String, activityTitle: Swift.String) -> PECore.MyChartWebViewController?
  @objc func getEducationWebViewController(patientContext: PECore.PEPatientContext, activityTitle: Swift.String) -> UIKit.UIViewController?
}
@objc public enum PEEducationButtonStyle : Swift.Int {
  case none = 0
  case completion = 1
  case toggle = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEEducationPointCompletionDelegate {
  @objc func educationPointCompleted(withStatus status: PECore.PEEducationPointCompletedStatus)
  @objc optional func userDidNavigateAwayFromPoint()
  @objc optional func userDidNavigateBackToPoint()
}
@objc public enum PEEducationPointCompletedStatus : Swift.Int {
  case unread = 0
  case read = 1
  case done = 2
  case hidden = 3
  case question = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class BlobResourceWebServiceAPI {
  public class func getBlobResource(userContext: PECore.PEUserContext, blobResourceTicket: Swift.String, externalOrgId: Swift.String?) -> PECore.WebService<PECore.RawDataResponse>
  public class func getBlobResource(patientContext: PECore.PEPatientContext, blobResourceTicket: Swift.String, externalOrgId: Swift.String?) -> PECore.WebService<PECore.RawDataResponse>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class MyChartCardView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func setInteractable(isInteractable: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func isInteractiveCard() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func showCardStyle()
  @_Concurrency.MainActor @preconcurrency public func hideCardStyle()
  @_Concurrency.MainActor @preconcurrency public static func getCardStyle(isInteractableCard: Swift.Bool) -> any PECore.CardStyleProtocol
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NoCardStyle : PECore.CardStyleProtocol {
  @objc public func getThemeStyleName() -> Swift.String
  @objc public func getAttributeNames() -> [Swift.String]
  @objc public func getAttributeValue(key: Swift.String) -> Swift.String
  @objc public func cornerRadius() -> Swift.Float
  @objc public func elevation() -> Swift.Float
  @objc public func dropShadow() -> UIKit.UIColor?
  @objc public func fillColor() -> UIKit.UIColor
  @objc public func borderColor() -> UIKit.UIColor?
  @objc deinit
}
@objc public protocol H2GErrorBannerViewDelegate {
  @objc func didTapH2GBanner(popupComponent: any PECore.PEH2GOrgPopupComponentAPIProtocol)
  @objc optional func didCloseH2GBanner()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class H2GErrorBannerView : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var textLabel: PECore.MyChartUILabel!
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PECore.H2GErrorBannerViewDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isHidden: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @objc deinit
}
extension PECore.H2GErrorBannerView : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
}
@objc public class SimpleCachableImageDataSource : ObjectiveC.NSObject, PECore.CacheableImageDataSource {
  @objc public var imageURL: Swift.String
  public init(imageURL: Swift.String)
  @objc deinit
}
public struct VideoResponse : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
  public func isVideoCollapsed() -> Swift.Bool
  public func getVideoURL() -> Swift.String
  public func getDisplayName() -> Swift.String
  public func getDescription() -> Swift.String
}
@_hasMissingDesignatedInitializers public class PEArrayBinding<ElementType, ObserverType> where ObserverType : PECore.PEObserver {
  @discardableResult
  public func onChange(_ callback: @escaping (ObserverType, (oldArray: [ElementType]?, newArray: [ElementType])) -> Swift.Void) -> Self
  @discardableResult
  public func onInsert(_ callback: @escaping (ObserverType, (array: [ElementType], insertedRows: Swift.Range<Swift.Int>)) -> Swift.Void) -> Self
  @discardableResult
  public func onDelete(_ callback: @escaping (ObserverType, (array: [ElementType], deletedRows: Swift.Range<Swift.Int>)) -> Swift.Void) -> Self
  @discardableResult
  public func onReplace(_ callback: @escaping (ObserverType, (array: [ElementType], deletedRows: Swift.Range<Swift.Int>, insertedRows: Swift.Range<Swift.Int>)) -> Swift.Void) -> Self
  public func fire()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PELocalizedStrings : ObjectiveC.NSObject {
  @objc public class func initStrings(_ locale: PECore.PELocale)
  @objc public class func handleLocaleChange(_ locale: PECore.PELocale)
  @objc public class func getString(_ key: Swift.String) -> Swift.String
  @objc public class func getString(_ key: Swift.String, locale: PECore.PELocale) -> Swift.String
  @objc public class func getString(_ key: Swift.String, locale: PECore.PELocale, bundle: Foundation.Bundle?) -> Swift.String
  public class func getString(_ key: Swift.String, _ params: Swift.String...) -> Swift.String
  @objc public class func getString(_ key: Swift.String, paramArray: [Swift.String]) -> Swift.String
  public class func getString(_ key: Swift.String, locale: PECore.PELocale, _ params: Swift.String...) -> Swift.String
  @objc public class func getString(_ key: Swift.String, locale: PECore.PELocale, paramArray: [Swift.String]) -> Swift.String
  public class func getString(_ key: Swift.String, locale: PECore.PELocale, bundle: Foundation.Bundle?, _ params: Swift.String...) -> Swift.String
  public class func getString(_ key: Swift.String, bundle: Foundation.Bundle, paramArray: [Swift.String]) -> Swift.String
  @objc public class func getString(_ key: Swift.String, locale: PECore.PELocale, bundle: Foundation.Bundle?, paramArray: [Swift.String]) -> Swift.String
  @objc public class func getPluralString(_ key: Swift.String, _ count: Swift.Int) -> Swift.String
  @objc public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, locale: PECore.PELocale) -> Swift.String
  @objc public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, locale: PECore.PELocale, bundle: Foundation.Bundle?) -> Swift.String
  public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, _ params: Swift.String...) -> Swift.String
  @objc public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, paramArray: [Swift.String]) -> Swift.String
  public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, locale: PECore.PELocale, _ params: Swift.String...) -> Swift.String
  @objc public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, locale: PECore.PELocale, paramArray: [Swift.String]) -> Swift.String
  public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, locale: PECore.PELocale, bundle: Foundation.Bundle?, _ params: Swift.String...) -> Swift.String
  @objc public class func getPluralString(_ key: Swift.String, _ count: Swift.Int, locale: PECore.PELocale, bundle: Foundation.Bundle?, paramArray: [Swift.String]) -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PEOnboardingTextContentView : PECore.SelfLoadingView {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var titleLabel: PECore.MyChartUILabel!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var bodyLabel: PECore.MyChartUILabel!
  @_Concurrency.MainActor @preconcurrency override public var selfLoadingNibName: Swift.String? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public class Language : ObjectiveC.NSObject {
  @objc public var code: Swift.String
  @objc public var textAlignment: PECore.TextAlignment
  public init(_ code: Swift.String, _ textAlignment: PECore.TextAlignment? = nil)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public static func == (left: PECore.Language, right: PECore.Language) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  public static let Arabic: PECore.Language
  public static let Chinese: PECore.Language
  public static let Danish: PECore.Language
  public static let Dutch: PECore.Language
  public static let English: PECore.Language
  public static let Finnish: PECore.Language
  public static let French: PECore.Language
  public static let German: PECore.Language
  public static let Norwegian: PECore.Language
  public static let Spanish: PECore.Language
  public static let Portuguese: PECore.Language
  public static let Swedish: PECore.Language
  public static let Russian: PECore.Language
  public static let Mongolian: PECore.Language
  public static let Gibberish: PECore.Language
  @objc deinit
}
@objc public enum TextAlignment : Swift.Int {
  case rightToLeft
  case leftToRight
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum LanguageCodes : Swift.String {
  case Arabic
  case Danish
  case German
  case English
  case Spanish
  case Finnish
  case French
  case Norwegian
  case Dutch
  case Portuguese
  case Swedish
  case Chinese
  case Russian
  case Mongolian
  case Gibberish
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class TextUtil {
  public static func size(forText text: Swift.String, withFont font: UIKit.UIFont, maxSize: CoreFoundation.CGSize, andLineBreakMode lineBreakMode: UIKit.NSLineBreakMode = .byWordWrapping) -> CoreFoundation.CGSize
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PEEventBinding<ObserverType> where ObserverType : PECore.PEObserver {
  public func onEvent(_ callback: @escaping (ObserverType) -> Swift.Void)
  @objc deinit
}
public class SimpleImageLoaderDelegate : PECore.ImageLoaderDelegate {
  public init(completionHandler: @escaping (UIKit.UIImage?) -> ())
  @objc public func didLoadImage(_ image: UIKit.UIImage, forSource source: any PECore.ImageDataSource)
  @objc public func didFailToLoadImage(forSource source: any PECore.ImageDataSource)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class MyChartWebQueryParameters : ObjectiveC.NSObject {
  @objc public static let ActionKey: Swift.String
  @objc public static let AllowedReasonForVisitKey: Swift.String
  @objc public static let ApptCountKey: Swift.String
  @objc public static let ApptReferenceIdKey: Swift.String
  @objc public static let CampaignIdKey: Swift.String
  @objc public static let CanDirectScheduleKey: Swift.String
  @objc public static let ContextKey: Swift.String
  @objc public static let CsnKey: Swift.String
  @objc public static let CsnIsEncryptedKey: Swift.String
  @objc public static let CustomModeKey: Swift.String
  @objc public static let DxoIdKey: Swift.String
  @objc public static let ECheckInConfirmKey: Swift.String
  @objc public static let ECsnKey: Swift.String
  @objc public static let HideReasonForVisitStepKey: Swift.String
  @objc public static let HideTabsKey: Swift.String
  @objc public static let HMDontEncryptTopicKey: Swift.String
  @objc public static let HMTopicIDKey: Swift.String
  @objc public static let IdKey: Swift.String
  @objc public static let IsEVisitKey: Swift.String
  @objc public static let IsXorgFeatureAvailableKey: Swift.String
  @objc public static let LtkIdKey: Swift.String
  @objc public static let LtkInstantKey: Swift.String
  @objc public static let MedRefillModeKey: Swift.String
  @objc public static let MessageIdKey: Swift.String
  @objc public static let ModeKey: Swift.String
  @objc public static let MOWorkflowKey: Swift.String
  @objc public static let NowEncounterCSN: Swift.String
  @objc public static let NowEncounterUCI: Swift.String
  @objc public static let PostLoginUrlKey: Swift.String
  @objc public static let PrescriptionIDKey: Swift.String
  @objc public static let ProviderBioKey: Swift.String
  @objc public static let ProviderIdKey: Swift.String
  @objc public static let ReasonForVisitKey: Swift.String
  @objc public static let SchedulingTicketIdKey: Swift.String
  @objc public static let SkipMobileLogoutKey: Swift.String
  @objc public static let StatusKey: Swift.String
  @objc public static let SourceRouteKey: Swift.String
  @objc public static let SubModeKey: Swift.String
  @objc public static let SuggestedTasksKey: Swift.String
  @objc public static let SupportsMobileBannerLinksKey: Swift.String
  @objc public static let TaskIdKey: Swift.String
  @objc public static let TicketIdKey: Swift.String
  @objc public static let TokenKey: Swift.String
  @objc public static let TreeIdKey: Swift.String
  @objc public static let UrlKey: Swift.String
  @objc public static let WorkflowKey: Swift.String
  @objc public static let WorkflowCompleteKey: Swift.String
  @objc public static let XOrgIdKey: Swift.String
  @objc public static let TicklerMethod: Swift.String
  @objc public static let EOrgIdKey: Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol WebSessionEventDelegate {
  @objc func onWebSessionReady(success: Swift.Bool)
}
@_inheritsConvenienceInitializers @objc public class WebSessionManager : ObjectiveC.NSObject {
  @objc public static func onLoginStart()
  @objc public static func onLoginComplete(userContext: PECore.PEUserContext?, patientContext: PECore.PEPatientContext? = nil, encounterContext: PECore.PEEncounterContext? = nil)
  @objc public static func setUpSession(_ userContext: PECore.PEUserContext, _ patientContext: PECore.PEPatientContext?, _ encounterContext: PECore.PEEncounterContext?)
  @objc public static func cleanUpSession(isLogoutOfApp: Swift.Bool)
  @objc public static func onContextChanged(_ userContext: PECore.PEUserContext, _ patientContext: PECore.PEPatientContext?, _ encounterContext: PECore.PEEncounterContext?)
  @objc public static func hasSessionSetUp() -> Swift.Bool
  @objc public static func canUseDirectUrl(_ userContext: PECore.PEUserContext, _ patientContext: PECore.PEPatientContext?, _ encounterContext: PECore.PEEncounterContext? = nil, _ isExternal: Swift.Bool = false) -> Swift.Bool
  @objc public static func getSessionEncounterContext() -> PECore.PEEncounterContext?
  public static func webSessionIsReady() async -> Swift.Bool
  @objc(addWebSessionQueueCompleteListenerKeepingStrongReference::) public static func addWebSessionQueueCompleteListener(keepStrongReference: Swift.Bool = false, _ listener: any PECore.WebSessionEventDelegate)
  public static func clearCurrentSessionAsync() async
  @objc public static func clearCurrentSession()
  @objc public static func updateCurrentSession(_ userContext: PECore.PEUserContext, _ patientContext: PECore.PEPatientContext?, _ encounterContext: PECore.PEEncounterContext? = nil)
  public static func updateCurrentSessionEncounter(_ userContext: PECore.PEUserContext?, _ patientContext: PECore.PEPatientContext?, _ encounterContext: PECore.PEEncounterContext? = nil)
  @objc public static func isDirectUrlSupported(_ organizationContext: PECore.PEOrganizationContext?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension PECore.WebSessionManager {
  public static func DONOTUSEdebugClearLogoutRequest()
}
public class PEArrayObservable<ElementType> : Swift.Collection {
  public var value: [ElementType] {
    get
  }
  public init(_ array: [ElementType])
  public func setArray(_ array: [ElementType])
  public func bind<ObserverType>(_ observer: ObserverType) -> PECore.PEArrayBinding<ElementType, ObserverType> where ObserverType : PECore.PEObserver
  public func removeObserver(_ observer: any PECore.PEObserver)
  public subscript(position: Swift.Int) -> ElementType {
    get
    set
  }
  public func insert(_ newElement: ElementType, at i: Swift.Int)
  public func insert(contentsOf array: [ElementType], at i: Swift.Int)
  public func append(_ newElement: ElementType)
  public func append(contentsOf array: [ElementType])
  public func remove(at i: Swift.Int)
  public func removeSubrange(_ bounds: Swift.Range<Swift.Int>)
  public func removeLast() -> ElementType
  public func removeFirst() -> ElementType
  public func removeAll()
  public func replaceSubrange(_ range: Swift.Range<Swift.Int>, with array: [ElementType])
  public var last: ElementType? {
    get
  }
  public var first: ElementType? {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public var startIndex: Swift.Array<ElementType>.Index {
    get
  }
  public var endIndex: Swift.Array<ElementType>.Index {
    get
  }
  public var count: Swift.Int {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public func makeIterator() -> Swift.IndexingIterator<Swift.Array<ElementType>>
  public typealias Element = ElementType
  public typealias Index = Swift.Array<ElementType>.Index
  public typealias Indices = Swift.DefaultIndices<PECore.PEArrayObservable<ElementType>>
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<ElementType>>
  public typealias SubSequence = Swift.Slice<PECore.PEArrayObservable<ElementType>>
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class StringSearchEngine : ObjectiveC.NSObject {
  public var searchConfiguration: PECore.SearchConfiguration
  @objc public init(searchConfiguration: PECore.SearchConfiguration)
  @objc override dynamic public init()
  @objc public func setFilterFunction(function: ((any PECore.SearchableProtocol) -> Swift.Bool)?)
  @objc public func addSearchableObject(searchableObject: any PECore.SearchableProtocol)
  @objc public func getSearchResults(searchString: Swift.String) -> [PECore.SearchResult]
  @objc deinit
}
public enum ButtonStyle {
  case PositiveAction
  case NegativeAction
  case NegativeSecondaryAction
  case NeutralLight
  case NeutralDark
  public static func == (a: PECore.ButtonStyle, b: PECore.ButtonStyle) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class BottomButton : UIKit.UIButton {
  @_Concurrency.MainActor @preconcurrency public static let buttonAnimationDuration: Swift.Double
  @_Concurrency.MainActor @preconcurrency public static let buttonTitleAnimationDuration: Swift.Double
  @_Concurrency.MainActor @preconcurrency weak public var animationHostDelegate: (any PECore.IBottomButtonAnimationDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func getTitleLabelHidden() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func setTitleLabelHidden(_ hidden: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setStyle(_ style: PECore.ButtonStyle, forTheme theme: any PECore.PEThemeProtocol)
  @_Concurrency.MainActor @preconcurrency public func animateCornerRadiusToExpandedSize()
  @_Concurrency.MainActor @preconcurrency public func animateCornerRadiusToShrunkenSize()
  @_Concurrency.MainActor @preconcurrency public func showLoading()
  @_Concurrency.MainActor @preconcurrency public func hideLoading()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public func scrollViewWillEndDraggingDelegate(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency public func scrollViewDidScrollDelegate(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
extension PECore.BottomButton : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc public enum NavigationType : Swift.Int {
  case newWorkflow
  case drilldown
  case replacement
  case informationPopover
  case alert
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEComponentHostProtocol {
  @objc var title: Swift.String { get }
  @objc func handleWebServiceTaskFailed() -> Swift.Bool
  @objc func handleWebServiceTaskFailedAndClose() -> Swift.Bool
  @objc @discardableResult
  func launchViewController(_ viewController: UIKit.UIViewController, as navigationType: PECore.NavigationType) -> Swift.Bool
  @objc @discardableResult
  func launchViewController(_ viewController: UIKit.UIViewController, as navigationType: PECore.NavigationType, from originView: UIKit.UIView) -> Swift.Bool
  @objc @discardableResult
  func launchViewController(_ viewController: UIKit.UIViewController, as navigationType: PECore.NavigationType, withSharedElements sharedElements: [any PECore.PEComponentHostSharedAnimationElementProtocol], andBoundingElement boundingElement: (any PECore.PEComponentHostSharedAnimationElementProtocol)?) -> Swift.Bool
  @objc func wrapViewController(_ viewController: UIKit.UIViewController) -> UIKit.UIViewController
  @objc func wrapViewController(_ viewController: UIKit.UIViewController, inNavigationController: Swift.Bool) -> UIKit.UIViewController
  @objc func dismissViewController(_ viewController: UIKit.UIViewController, onCompletion: (() -> Swift.Void)?)
  @objc func setLargeNavBarExpanded(_ expanded: Swift.Bool)
  @objc optional func shouldShowMenuInNavBar(_ show: Swift.Bool)
  @objc optional func setNavBarMenuActions(_ actions: [UIKit.UIAlertAction])
  @objc optional func changeNavBarVisibility(_ isVisible: Swift.Bool)
}
@objc public protocol PEComponentHostPopupProtocol : PECore.PEComponentHostProtocol {
  @objc func disableCloseButton()
  @objc func reenableCloseButton()
}
@objc public protocol PEComponentHostSharedAnimationElementProtocol {
  @objc var fromView: UIKit.UIView { get }
  @objc var toViewTag: Swift.Int { get }
}
@objc public protocol PEComponentHostParentDelegate {
  @objc func showMenuInNavBarUpdated(_ show: Swift.Bool)
  @objc func navBarMenuActionsUpdated(withActions actions: [UIKit.UIAlertAction])
}
@objc public enum WebServiceErrorType : Swift.Int {
  case URLComposition
  case PatientIndexNotFound
  case RequestParsing
  case ResponseParsing
  case WebSecurity
  case WebClient
  case WebClientUnauthorized
  case WebClientConnection
  case WebClientBadRequest
  case WebServer
  case Timeout
  case NetworkNotAvailable
  case TooManyRequestsError
  case Unknown
  public func getName() -> Swift.String
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class WebServiceFailedError : ObjectiveC.NSObject, Swift.Error {
  public static var isUnitTesting: Swift.Bool
  convenience public init(_ errorType: PECore.WebServiceErrorType, _ description: Swift.String? = nil, _ sourceError: (any Swift.Error)? = nil, _ response: Foundation.URLResponse? = nil)
  public init(errorType: PECore.WebServiceErrorType, customDescription: Swift.String? = nil, sourceError: (any Swift.Error)?, response: Foundation.URLResponse?)
  @objc public func getMessage() -> Swift.String
  @objc public func getSourceError() -> (any Swift.Error)?
  public func getErrorType() -> PECore.WebServiceErrorType?
  public func getResponse() -> Foundation.URLResponse?
  public static func from(_ error: any Swift.Error, _ response: Foundation.URLResponse?, _ description: Swift.String?) -> PECore.WebServiceFailedError
  @objc deinit
}
public var keyboardVisiblePublisher: Combine.AnyPublisher<Swift.Bool, Swift.Never> {
  get
}
public class PEEventInfoObservable<EventInfoType> {
  public init()
  public func bind<ObserverType>(_ observer: ObserverType) -> PECore.PEEventInfoBinding<EventInfoType, ObserverType> where ObserverType : PECore.PEObserver
  public func fire(sending eventInfo: EventInfoType)
  public func removeObserver(_ observer: any PECore.PEObserver)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency open class SelfLoadingView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency open var selfLoadingNibName: Swift.String? {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var bundle: Foundation.Bundle {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency open func createView()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class PEEventInfoBinding<EventInfoType, ObserverType> where ObserverType : PECore.PEObserver {
  public func onEvent(_ callback: @escaping (ObserverType, EventInfoType) -> Swift.Void)
  @objc deinit
}
@objc public protocol CommunityDataRefreshViewDelegate {
  @objc func launchRefreshView()
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class CommunityDataRefreshView : UIKit.UIView {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var iconView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var loadingIconView: UIKit.UIImageView!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var titleLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var bodyLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var loadingLabel: UIKit.UILabel!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var updateButton: UIKit.UIButton!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var dismissButton: UIKit.UIButton!
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PECore.CommunityDataRefreshViewDelegate)?
  @objc @_Concurrency.MainActor @preconcurrency public var isSetup: Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @objc @_Concurrency.MainActor @preconcurrency public func setupBanner(delegate: any PECore.CommunityDataRefreshViewDelegate)
  @objc @_Concurrency.MainActor @preconcurrency public func resetBanner()
  @objc @_Concurrency.MainActor @preconcurrency public func updateBannerText()
  @objc @_Concurrency.MainActor @preconcurrency public func updateBannerText(info: PECore.CommunityDataRefreshView.CommunityRefreshInfo)
  @objc public enum CommunityDataRefreshStatus : Swift.Int {
    case NORMAL
    case LOADING
    case ERROR
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class CommunityRefreshInfo : ObjectiveC.NSObject {
    @objc public init(successOrgCount: Swift.Int, successOrgName: Swift.String, errorOrgCount: Swift.Int, errorOrgName: Swift.String, loadingOrgCount: Swift.Int, loadingOrgName: Swift.String, canServerSupportWorkflowUpdate: Swift.Bool)
    @objc public func getStatus() -> PECore.CommunityDataRefreshView.CommunityDataRefreshStatus
    public func shouldShowLoadingBanner() -> Swift.Bool
    @objc deinit
  }
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency public class ButtonSandboxViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @objc deinit
}
extension PECore.ButtonSandboxViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public var applicationApi: (any PECore.PEApplicationComponentAPIProtocol)? {
  get
}
public var authenticationApi: (any PECore.PEAuthenticationComponentAPIProtocol)? {
  get
}
public var refApi: (any PECore.PEMyChartRefComponentAPIProtocol)? {
  get
}
public var homePageApi: (any PECore.PEHomePageComponentAPIProtocol)? {
  get
}
public class DocumentResponse : Swift.Decodable {
  public var attachment: PECore.Attachment
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
public class Attachment : Swift.Decodable {
  public var fileExtension: Swift.String
  public var label: Swift.String
  public var data: Foundation.NSData?
  public var dcsID: Swift.String
  public var blobResourceTicket: Swift.String
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_Concurrency.MainActor @preconcurrency open class PEOnboardingHostViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var pageViewController: UIKit.UIPageViewController!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var headerView: PECore.PEOnboardingHeaderView!
  @_Concurrency.MainActor @preconcurrency public var pageControl: UIKit.UIPageControl!
  @_Concurrency.MainActor @preconcurrency public var context: PECore.PEUserContext!
  @_Concurrency.MainActor @preconcurrency weak public var onboardingDelegate: (any PECore.IOnboardingDelegate)?
  @_Concurrency.MainActor @preconcurrency public var screenControllers: [UIKit.UIViewController]
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency public static func getBaseInstance(context: PECore.PEUserContext, onboardingDelegate: (any PECore.IOnboardingDelegate)?) -> PECore.PEOnboardingHostViewController
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func loadView()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency open func addPagesToPageViewController()
  @_Concurrency.MainActor @preconcurrency open func setUpSkipButton()
  @_Concurrency.MainActor @preconcurrency open func dismissPager(withActionCompleted actionCompleted: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func next()
  @_Concurrency.MainActor @preconcurrency public func back()
  @objc deinit
}
extension PECore.PEOnboardingHostViewController : UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func presentationIndex(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
}
@_inheritsConvenienceInitializers @objc public class MyChartCentralHomepageWebViewControllerManager : PECore.MyChartWebViewControllerManager {
  override open func getNotificationsToObserve() -> [Foundation.Notification]?
  override open func onReceiveNotifications(_ viewController: PECore.MyChartWebViewController, notificationName: Swift.String)
  override open func showLoadingView(_ viewController: PECore.MyChartWebViewController)
  override open func hideLoadingView(_ viewController: PECore.MyChartWebViewController)
  override open func onMyChartError(_ viewController: PECore.MyChartWebViewController)
  override open func onHttpError(_ viewController: PECore.MyChartWebViewController)
  override open func onEpicHttpRequest(_ viewController: PECore.MyChartWebViewController, deepLink: any PECore.PEDeepLinkProtocol, forOrganization: PECore.PEOrganizationInfo?)
  override open func allowLaunchOutsideApp() -> Swift.Bool
  override open var supportsH2GLaunchContext: Swift.Bool {
    get
  }
  override open var shouldSuppressOnboarding: Swift.Bool {
    get
  }
  override open var shouldObserveRefreshNotification: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@objc @IBDesignable @_Concurrency.MainActor @preconcurrency open class PersonImageView : UIKit.UIImageView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var borderWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @preconcurrency public func createView()
  @_Concurrency.MainActor @preconcurrency public func setPerson(_ person: any PECore.PEPersonProtocol)
  @_Concurrency.MainActor @preconcurrency public func setPerson(_ person: any PECore.PEPersonProtocol, borderColor: CoreGraphics.CGColor)
  @objc deinit
}
@objc public enum UrlType : Swift.Int {
  case Interconnect
  case WebBlob
  case None
  case OAuth2
  case MyChartWebsite
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func eraseToAnyView(withTitle title: Swift.String? = nil) -> SwiftUICore.AnyView
}
@objc public class MyChartWebArgs : ObjectiveC.NSObject {
  final public let userContext: PECore.PEUserContext
  final public let patientContext: PECore.PEPatientContext?
  final public let encounterContext: PECore.PEEncounterContext?
  final public let organization: (any PECore.PEOrganizationInfoProtocol)?
  @objc convenience public init(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext?, mode: Swift.String, parameters: [PECore.MyChartWebParameter]?)
  @objc convenience public init(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext?, mode: Swift.String, parameters: [PECore.MyChartWebParameter]?, organization: (any PECore.PEOrganizationInfoProtocol)?)
  @objc public init(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext?, encounterContext: PECore.PEEncounterContext? = nil, mode: Swift.String, parameters: [PECore.MyChartWebParameter]?, organization: (any PECore.PEOrganizationInfoProtocol)? = PEOrganizationInfo())
  @objc public init(baseArgs: PECore.MyChartWebArgs, parameters: [PECore.MyChartWebParameter]?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class Toast : UIKit.UIView {
  @objc public enum ToastDuration : Swift.Int, Swift.RawRepresentable {
    public typealias RawValue = Foundation.TimeInterval
    case short
    case long
    public var rawValue: Foundation.TimeInterval {
      get
    }
    public init?(rawValue: PECore.Toast.ToastDuration.RawValue)
  }
  @objc @_Concurrency.MainActor @preconcurrency public static func makeError(withText text: Swift.String, duration: PECore.Toast.ToastDuration) -> PECore.Toast?
  @objc @_Concurrency.MainActor @preconcurrency public static func make(withText text: Swift.String, duration: PECore.Toast.ToastDuration) -> PECore.Toast?
  @discardableResult
  @objc @_Concurrency.MainActor @preconcurrency public func show() -> PECore.Toast
  @objc @_Concurrency.MainActor @preconcurrency public func onAnnouncementDidFinishNotification(_ callback: @escaping (() -> ()))
  @objc @_Concurrency.MainActor @preconcurrency public func hide()
  @_Concurrency.MainActor @preconcurrency public static func bringAllToastsToFront()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum PEBillingMode : Swift.Int {
  case BillingSummary = 0
  case BillingDetails = 1
  case BillingPayment = 2
  case BillingAutopay = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PEEstimatesMode : Swift.Int {
  case Estimates = 0
  case EstimateDetails = 1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEBillingComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForBilling(withPatient patientContext: PECore.PEPatientContext?) -> PECore.PEComponentAccessResult
  @objc func getBillingViewController(forMode mode: PECore.PEBillingMode, withParams params: [Swift.String : Any]?) -> UIKit.UIViewController?
  @objc func hasAccessForEstimates(withPatient patientContext: PECore.PEPatientContext?) -> PECore.PEComponentAccessResult
  @objc func getEstimatesViewController(forMode mode: PECore.PEEstimatesMode, withParams params: [Swift.String : Any]?) -> UIKit.UIViewController?
}
@_hasMissingDesignatedInitializers public class AttachmentWebServiceAPI {
  public class func getDocument(patientContext: PECore.PEPatientContext, dcsId: Swift.String, orgID: Swift.String, isExternal: Swift.Bool, useSourceEncryption: Swift.Bool, useBlobResourceTicket: Swift.Bool) -> PECore.WebService<PECore.DocumentResponse>
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency open class CoreButton : UIKit.UIView, UIKit.UIGestureRecognizerDelegate {
  public enum ButtonType : Swift.String {
    case standard
    case floating
    case link
    case shortcut
    case actionStrip
    case squareShortcut
    case embeddedInput
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var type: PECore.CoreButton.ButtonType {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var buttonOrientation: PECore.ButtonOrientation {
    get
    set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var tone: PECore.ButtonTone {
    get
    set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var shouldTintImage: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var priority: PECore.ButtonPriority {
    get
    set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var text: Swift.String {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var textSize: CoreFoundation.CGFloat {
    get
    set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var isLabelHidden: Swift.Bool {
    get
    set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var iconSize: CoreFoundation.CGFloat {
    get
    set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var isDisabled: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var putIconAfterText: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var themeOverride: (any PECore.PEThemeProtocol)? {
    get
    set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var toneColorOverride: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var textColorOverride: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var iconColorOverride: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var cornerRadiusOverride: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textWidthOverride: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textWidthConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency public var textHeightConstraint: UIKit.NSLayoutConstraint?
  @_Concurrency.MainActor @preconcurrency public var textHeightOverride: CoreFoundation.CGFloat? {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public var textIsEllipsized: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var textIsMultiline: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var labelIntrinsicContentSize: CoreFoundation.CGSize {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var shadowColor: UIKit.UIColor {
    get
    set(value)
  }
  @_Concurrency.MainActor @preconcurrency public var maskedCorners: QuartzCore.CACornerMask {
    get
    set(value)
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public var controlTypeOverride: PECore.ControlType? {
    get
    set
  }
  @objc @_Concurrency.MainActor @preconcurrency public static let ScrollViewWillEndDraggingNotificationName: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public static let ScrollViewDidScrollNotificationName: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public static let ScrollViewKey: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public static let VelocityKey: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public static let TargetContentOffsetKey: Swift.String
  @_Concurrency.MainActor @preconcurrency public var iconImage: UIKit.UIImage? {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func setIcon(imageView: PECore.AnimatedImageView)
  @objc @_Concurrency.MainActor @preconcurrency public func setIcon(uri: Swift.String?, shouldTintImage: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setIcon(iconKey: Swift.String?, bundle: Foundation.Bundle)
  @objc @_Concurrency.MainActor @preconcurrency public func setIcon(image: UIKit.UIImage?)
  @objc @_Concurrency.MainActor @preconcurrency public func setIcon(image: UIKit.UIImage?, shouldTintImage: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func setTextAlpha(alpha: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func startLoading(accessibilityMessage: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func stopLoading()
  @objc @_Concurrency.MainActor @preconcurrency public func setOnClick(target: Any?, selector: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor @preconcurrency public func setOnClick(_ onClickSelector: (() -> Swift.Void)?)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func point(inside point: CoreFoundation.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public static func createUserInfoForScrollViewWillEndDragging(scrollView: UIKit.UIScrollView, velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>) -> [Swift.AnyHashable : Any]
  @_Concurrency.MainActor @preconcurrency public func prepareForReuse()
  @_Concurrency.MainActor @preconcurrency public func resizeButtonLabel()
  @available(iOS 17.0, *)
  @_Concurrency.MainActor @preconcurrency public var iconHoverStyle: UIKit.UIHoverStyle? {
    get
    set
  }
}
extension PECore.CoreButton : PECore.IPECacheableImageViewDelegate {
  @_Concurrency.MainActor @preconcurrency public func imageDidChange(_ newImage: UIKit.UIImage?)
}
@_inheritsConvenienceInitializers @objc public class ImageLoader : ObjectiveC.NSObject {
  @objc public static func canLoadImage(withSource source: (any PECore.ImageDataSource)?) -> Swift.Bool
  @objc public static func canLoadImage(withSource source: (any PECore.ImageDataSource)?, andPatientContext context: PECore.PEPatientContext? = nil) -> Swift.Bool
  @objc public static func loadImage(withSource source: (any PECore.ImageDataSource)?, delegate: any PECore.ImageLoaderDelegate)
  @objc public static func loadImage(withSource source: (any PECore.ImageDataSource)?, delegate: any PECore.ImageLoaderDelegate, andPatientContext context: PECore.PEPatientContext? = nil)
  public static func getLocalImage(forSource source: any PECore.ImageDataSource, withTheme theme: (any PECore.PEThemeProtocol)?) -> UIKit.UIImage?
  public static func invalidateCache(forSource source: any PECore.CacheableImageDataSource)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PEMedicationsComponentBridgingAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getMedicationsViewController(rxID: Swift.String?, eorgID: Swift.String?) -> UIKit.UIViewController?
  @objc func getMedicationsViewControllerForMCNOutPatient(parentDelegate: (any PECore.PEComponentHostParentDelegate)?) -> UIKit.UIViewController?
  @objc func getMedicationsViewControllerForRefill(rxID: Swift.String?) -> UIKit.UIViewController?
  @objc func shouldDisableOutpatientMeds() -> Swift.Bool
}
@objc public class MyChartWebParameter : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(_ name: Swift.String, _ value: Swift.String)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol WebActivityListener {
  @objc func onActivity()
}
public class PEDeepLinkLoadingViewManager {
  public init()
  public func awaitSecurity(for deepLink: any PECore.PEDeepLinkProtocol, in navigationController: UIKit.UINavigationController, callback: @escaping () -> Swift.Void)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MyChartTextField : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(hint: Swift.String?, startingValue: Swift.String?, validator: PECore.Validator = .none, keyboardType: UIKit.UIKeyboardType = .default, onTextChanged: ((Swift.String) -> Swift.Void)? = nil, textViewModel: PECore.TextFieldViewModel? = nil, isSecure: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore16MyChartTextFieldV4bodyQrvp", 0) __
}
public enum Validator {
  case none, passcode
  public static func == (a: PECore.Validator, b: PECore.Validator) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class TextFieldViewModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($value) public var value: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $value: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(value: Swift.String)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class PEComponentAPIProvider : ObjectiveC.NSObject {
  @objc public class func getComponentAPIProvider() -> PECore.PEComponentAPIProvider
  @objc public func register(_ componentKey: PECore.PEComponentAPIKey, _ component: any PECore.PEComponentAPIProtocol) throws
  @objc public func get(_ componentType: PECore.PEComponentAPIKey) -> (any PECore.PEComponentAPIProtocol)?
  @objc public static func getApi(_ componentType: PECore.PEComponentAPIKey) -> (any PECore.PEComponentAPIProtocol)?
  @objc deinit
}
public enum ComponentAPIProviderError : Swift.Error {
  case registerError(reason: Swift.String)
}
@objc extension Foundation.Bundle {
  @objc public static var PECore: Foundation.Bundle {
    @objc get
  }
}
extension UIKit.UIImage {
  convenience public init?(named name: Swift.String, in bundle: Foundation.Bundle)
}
extension Swift.Comparable {
  public func coerce(in range: Swift.ClosedRange<Self>) -> Self
}
@objc public protocol PEHomePageComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getHomePage(for context: PECore.PEUserContext, with overlay: PECore.HomepageOverlayType, presetPerson selectedPerson: (any PECore.PEPersonProtocol)?) -> UIKit.UIViewController
  @objc func getMyChartCentralHomePage(for context: PECore.PEUserContext, presetPerson selectedPerson: (any PECore.PEPersonProtocol)?) -> UIKit.UIViewController
  @objc func preventMenuFromReopeningUponReturn()
  @objc func getHomePageFeed(for context: PECore.PEUserContext) -> UIKit.UIViewController
  @objc func setHealthFeedContext(_ feed: UIKit.UIViewController, person: any PECore.PEPersonProtocol)
  @objc func hasAccessForHomePage(_ context: PECore.PEUserContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForHomePageMenuAudit(_ context: PECore.PEUserContext) -> PECore.PEComponentAccessResult
  @objc func invalidateFeed()
  @objc func getPersonalizeShortcutsViewController(forUserContext userContext: PECore.PEUserContext, andPatientContext patientContext: PECore.PEPatientContext) -> UIKit.UIViewController
  @objc func hasAccessForPersonalizeShortcuts(_ context: PECore.PEUserContext) -> PECore.PEComponentAccessResult
  @objc func getPersonalizeShortcutsActivityTitle(_ userContext: PECore.PEUserContext, _ patientContext: PECore.PEPatientContext?) -> Swift.String
  @objc func notifyReloadMenu()
  @objc func setAppleWatchCardDismissmal(_ userContext: PECore.PEUserContext, _ isDismissed: Swift.Bool)
  @objc func preloadMenu(completion: @escaping ((_ success: Swift.Bool, _ error: PECore.WebServiceFailedError) -> Swift.Void))
  @objc func isMenuViewController(_ viewController: UIKit.UIViewController?) -> Swift.Bool
  @objc func getOnboardingCompleteStatus(_ userContext: PECore.PEUserContext) -> Swift.Bool
}
@objc public enum HomepageOverlayType : Swift.Int {
  case none = 0
  case useDefaultLogic
  case proxySplashScreen
  case onboardingScreen
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class SearchConfiguration : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc public func addSearchableObject(searchableObject: any PECore.SearchableProtocol)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OrgResolutionUtil {
  public static func resolveOrg<Element>(orgId: Swift.String, favoriteOrgs: Swift.Array<Element>, phonebookOrgs: Swift.Array<Element>, preferExactOrgMatch: Swift.Bool, orgIdTransform: (Element) -> Swift.String) -> PECore.ResolvedOrgData<Element>?
  @objc deinit
}
public enum OrgSource {
  case phonebook
  case favorites
  public static func == (a: PECore.OrgSource, b: PECore.OrgSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public typealias ResolvedOrgData<Element> = (resolvedElement: Element, index: Swift.Int, source: PECore.OrgSource)
public enum FindOrgResult<T> {
  case exact(index: Swift.Int, result: T)
  case affiliate(index: Swift.Int, result: T)
  case notFound
}
extension Swift.Array {
  public func findOrg(orgId: Swift.String, orgIdTransform: (Element) -> Swift.String) -> PECore.FindOrgResult<Element>
}
@objc public class SearchResult : ObjectiveC.NSObject {
  public var resultObject: any PECore.SearchableProtocol {
    get
  }
  public var resultConfidence: Swift.Double {
    get
  }
  public var termMatched: Swift.String {
    get
  }
  public var termMatchedFlags: [Swift.Bool] {
    get
  }
  public init(resultObject: any PECore.SearchableProtocol, resultConfidence: Swift.Double, termMatched: Swift.String, termMatchedFlags: [Swift.Bool])
  @objc public func getResultObject() -> any PECore.SearchableProtocol
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class HttpHeaderFieldsManager : ObjectiveC.NSObject {
  @objc public class func getInstance() -> PECore.HttpHeaderFieldsManager
  @objc public func setHttpHeaderField(_ field: Swift.String, withValue value: Swift.String) -> Swift.Bool
  @objc public func removeHttpHeaderField(_ field: Swift.String)
  @objc public func removeAllHttpHeaderFields()
  @objc public func getAllHttpHeaderFields() -> [Swift.String : Swift.String]
  @objc public func isHttpHeaderFieldAllowed(_ field: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
open class Category : Swift.Codable {
  public var value: Swift.String
  public var title: Swift.String
  public var abbreviation: Swift.String
  public init()
  open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class URLSessionManager : ObjectiveC.NSObject, Foundation.URLSessionDelegate, Foundation.URLSessionTaskDelegate {
  public static let requestTimeout: Swift.Double
  public static let resourceTimeout: Swift.Double
  public static let extendedRequestTimeout: Swift.Double
  public static let extendedResourceTimeout: Swift.Double
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc deinit
}
public class WebUrl : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol ImageLoaderDelegate {
  @objc func didLoadImage(_ image: UIKit.UIImage, forSource source: any PECore.ImageDataSource)
  @objc func didFailToLoadImage(forSource source: any PECore.ImageDataSource)
}
@_hasMissingDesignatedInitializers @objc public class WebServiceCategory : ObjectiveC.NSObject {
  @objc public var namespace: Swift.String?
  @objc public var requestFormat: PECore.PERequestFormat
  @objc public var responseFormat: PECore.PEResponseFormat
  @objc public var tokenType: PECore.TokenType
  @objc public var urlType: PECore.UrlType
  public static let MyChartMobile: PECore.WebServiceCategory
  public static let MyChartMobileGET: PECore.WebServiceCategory
  public static let MyChartWebsite: PECore.WebServiceCategory
  public static let MyChartMobileData: PECore.WebServiceCategory
  public static let Bedside: PECore.WebServiceCategory
  public static let BedsideTV: PECore.WebServiceCategory
  @objc deinit
}
@objc public class SmartStyleModel : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(_ colorBackground: Swift.String, _ colorError: Swift.String, _ colorHighlight: Swift.String, _ colorModalBackdrop: Swift.String, _ colorSuccess: Swift.String, _ colorText: Swift.String, _ dimBorderRadius: Swift.String, _ dimFontSize: Swift.String, _ dimSpacingSize: Swift.String, _ fontFamilyBody: Swift.String, _ fontFamilyHeading: Swift.String)
  @objc public static func getSmartStyleModelFromTheme(theme: any PECore.PEThemeProtocol) -> PECore.SmartStyleModel
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class EmbeddedVideoViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var videoURL: Swift.String!
  @_Concurrency.MainActor @preconcurrency public var userContext: PECore.PEUserContext?
  @_Concurrency.MainActor @preconcurrency weak public var viewToRefocusOnDismiss: UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ThemeStyle : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol PEDeepLinkProtocol {
  var url: Swift.String { get }
  var params: [PECore.PEDeepLinkParam : Any] { get set }
  var options: PECore.PEDeepLinkOption { get set }
  func copyWithNewUrl(_ url: Swift.String) -> any PECore.PEDeepLinkProtocol
  func setExternalOrgInfo(orgInfo: (any PECore.PEOrganizationInfoProtocol)?)
}
@_hasMissingDesignatedInitializers public class WalletUtil {
  public static func getSamplePassData(serialNumber: Swift.String, onSuccess: @escaping (PassKit.PKPass) -> Swift.Void, onFailure: @escaping (any Swift.Error) -> Swift.Void)
  public static func getCovidVaccinationPassData(context: PECore.PEPatientContext, vaccOrganization: PECore.PEOrganizationInfo?, onSuccess: @escaping (PassKit.PKPass) -> Swift.Void, onFailure: @escaping (any Swift.Error) -> Swift.Void)
  public static func hasWalletSecurity(context: PECore.PEPatientContext?) -> Swift.Bool
  public static func parseWalletData(_ data: Foundation.Data?) async throws -> PassKit.PKPass?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PELiveModel : ObjectiveC.NSObject {
  public enum LoadingStatus {
    case unspecified
    case loading
    case success
    case failure
    case canceled
    public static func == (a: PECore.PELiveModel.LoadingStatus, b: PECore.PELiveModel.LoadingStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  open var loadingStatus: PECore.PELiveModel.LoadingStatus
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol LiveModelHolder {
  @objc func getLiveModel() -> PECore.PELiveModel?
}
@objc public protocol PEToDoComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForToDo(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForToDoChanges(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForToDoChangeDetails(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForToDoLinkTask(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForToDoManageReminders(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForToDoProgress(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getToDoChangesViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getToDoViewController(_ patientContext: PECore.PEPatientContext, ltkID: Swift.String, ltkInst: Swift.String, showSuggestedTasks: Swift.Bool) -> UIKit.UIViewController?
  @objc func getToDoOverdueViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getToDoChangeDetailsWebViewController(_ patientContext: PECore.PEPatientContext, changeId: Swift.String, changeDAT: Swift.String, isEncrypted: Swift.Bool) -> UIKit.UIViewController?
  @objc func getToDoManageRemindersViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func getToDoProgressViewController(_ patientContext: PECore.PEPatientContext) -> UIKit.UIViewController?
  @objc func markChangeAsViewed(_ patientContext: PECore.PEPatientContext, changeId: Swift.String, changeDAT: Swift.String, isEncrypted: Swift.Bool)
  @objc func getLinkTaskDetailWebViewController(_ patientContext: PECore.PEPatientContext, ltkId: Swift.String, ltkInstant: Swift.String, delegate: (any PECore.PELinkTaskCompletionDelegate)?) -> UIKit.UIViewController?
}
@objc public protocol PELinkTaskCompletionDelegate {
  @objc func linkTaskCompleted()
  @objc func linkTaskSkipped()
}
@objc public class MyChartWebViewCLLocationManagerDelegate : ObjectiveC.NSObject, CoreLocation.CLLocationManagerDelegate {
  public var locationManager: CoreLocation.CLLocationManager
  public init(javaScriptManager: PECore.MyChartJavascriptManager?, webViewController: UIKit.UIViewController)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didFailWithError error: any Swift.Error)
  @objc public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
  public func locationHandler()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class PEOnboardingNavigationControl : PECore.SelfLoadingView {
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var actionButton: PECore.CoreButton!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var backButton: PECore.CoreButton!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var nextButton: PECore.CoreButton!
  @objc @IBOutlet @_Concurrency.MainActor @preconcurrency weak public var playButton: PECore.CoreButton!
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PECore.IOnboardingNavigationDelegate)?
  @_Concurrency.MainActor @preconcurrency override public var selfLoadingNibName: Swift.String? {
    get
  }
  @_Concurrency.MainActor @preconcurrency override public func createView()
  @_Concurrency.MainActor @preconcurrency public func applyTheme(_ theme: any PECore.PEThemeProtocol)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func conditionalScroll(_ when: Swift.Bool) -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func overflowScroll() -> some SwiftUICore.View
  
  @_Concurrency.MainActor @preconcurrency public func overflowScrollWithHeight() -> some SwiftUICore.View
  
}
extension UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency dynamic public var tutorialViewID: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addAndFill(withSubview view: UIKit.UIView)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func addAndFill(withSubview view: UIKit.UIView, shouldConstrainToKeyboard: Swift.Bool = false, shouldConstrainToSafeArea: Swift.Bool = false)
  @_Concurrency.MainActor @preconcurrency public func adjustContentInsetsForKeyboard(withNotification notification: Foundation.Notification)
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func `if`<Content>(_ condition: @autoclosure () -> Swift.Bool, transform: (Self) -> Content) -> some SwiftUICore.View where Content : SwiftUICore.View
  
}
@objc public enum InlineEducationType : Swift.Int, Swift.Codable {
  case Diagnoses = 1
  case Medications = 2
  case SurgicalProcedures = 3
  case LabResults = 4
  case Allergies = 5
  case Immunizations = 6
  case Keyword_Diagnoses = 7
  case Keyword_LabResults = 8
  case AppointmentProcedures = -1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class InlineEducationContextProvider : ObjectiveC.NSObject {
  @objc public static func getInstance() -> PECore.InlineEducationContextProvider
  @objc public func setAvailableContexts(for contextIds: Foundation.NSMutableArray)
  @objc public func isContextAvailable(for educationType: PECore.InlineEducationType) -> Swift.Bool
  @objc public class func hasSecurityPointForContext(educationType: PECore.InlineEducationType, patient: (any PECore.PEPatientProtocol)?) -> Swift.Bool
  @objc public static func resetContextState()
  @objc deinit
}
@objc public enum PESupportedFeature : Swift.Int {
  case Unknown = 0
  case ShareEverywhere = 1
  case MyC3NotificationSettings = 2
  case HealthAdvisoriesSorted = 3
  case ToDo = 5
  case MyC3Personalization = 6
  case MarkHMTopicComplete = 7
  case HappyTogether = 8
  case HomePage = 9
  case ProblemList = 10
  case ProviderPhotos = 11
  case MyC3TimeZoneCustomization = 12
  case HappeningSoon = 13
  case TestResults = 14
  case MobileOptimizedWeb = 15
  case ClinicalInfo = 16
  case TreatmentTeam = 17
  case CareTeamScheduling = 18
  case EncounterMedications = 19
  case MODirectUrl = 20
  case NPPMobileOptimizedWeb = 21
  case Education = 22
  case TwoFactorOptIn = 23
  case HMScheduling = 24
  case PatientCreatedTasks = 25
  case ToDoProgress = 26
  case HappyTogetherActions = 27
  case MyC3TaskTypeNotifications = 28
  case MyC3PushNotificationDeepLink = 29
  case TreatmentTeam2019 = 30
  case GenericMoJump = 31
  case PanelAppointments = 32
  case MOMessages = 33
  case ExploreMoreAuditing = 34
  case MOShortcutPersonalization = 35
  case CovidStatus = 36
  case BrandingPathsLookup = 37
  case MOToDoChangeDetails = 38
  case ToDoPersistentQuestionnaires = 39
  case ToDoPatientCreatedTaskSecurityPoints = 40
  case UpcomingOrders = 41
  case AppleWatchRedesign = 42
  case HPRemoveFunIcons = 43
  case HowToVideos = 44
  case NPPBilling = 45
  case MOPersonalInformation = 46
  case LaunchPreventiveCareForHealthMaint = 47
  case MOToDo = 48
  case MOImmunizations = 49
  case PreloginCovidStatus = 50
  case CovidPDF = 51
  case EMMIEducation = 52
  case CovidRegistryQuery = 53
  case AppleWatchSnowflake = 54
  case CovidVaccineReconciliation = 55
  case CovidStatusAlwaysOn = 56
  case HPMenuAudit = 57
  case MOEducation = 58
  case CovidTestResults = 59
  case CovidCredentialsHowToVideo = 60
  case MOEducationIP = 61
  case EncounterSummaryPDFDownload = 62
  case H2GCovidVaccineSync = 63
  case NewBdsdQNRSecurity = 64
  case MOCommunicationPreferences = 65
  case AccountDeactivation = 66
  case FeatureUsageLogging = 67
  case FeatureLibrary = 68
  case MOAppointmentArrival = 69
  case PatientEstimates = 70
  case ArrivalEventAudit = 71
  case MOTestResults = 72
  case H2GAffiliateBranding = 73
  case MOProviderDetails = 74
  case TwoFactorInfoForLogin = 75
  case MOMyDocuments = 76
  case SelfReportedClinicalUpdates = 77
  case MOAppointmentTicketDecline = 78
  case AppleWallet = 79
  case CustomHealthKitDataTypes = 80
  case BdsdMOTestResults = 81
  case BasicLiveActivityAuditing = 82
  case MOProviderFinder = 83
  case PersonalNotes = 84
  case CovidVaccinationAppleWalletCard = 85
  case MOHealthSummary = 86
  case NPPFDILink = 87
  case MyChartCentral = 88
  case MOTrackMyHealth = 89
  case MOPaperlessSettings = 90
  case MOPastVisitDetails = 91
  case RemoteProxyAccess = 93
  case ExpandedHomePageShortcuts = 94
  case PatientAccessUpdates = 96
  case OIDCFederatedLogout = 97
  case ShouldUseOrgLogoCE = 98
  case MOShareEverywhere = 99
  case MyChartCentralOn = 100
  case MyChartCentralDTC = 101
  case DrivingDirectionsConsentEnabled = 102
  case DeclutteredQNRNavigationButtons = 103
  case MOPageArbitraryDownloadSupport = 104
  case MyChartSearch = 105
  case MOChangePassword = 106
  case PersonalizeEnabledFriendsAndFamily = 108
  case MyChartCentralV1 = 109
  case EpicFunFacts = 110
  case PreviewFeatures = 111
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class TextStyle : PECore.TextStyleProtocol {
  @objc public func fontRamp() -> PECore.FontRamp
  @objc public func fontSize() -> Swift.Float
  @objc public func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
  @objc public func fontWeight() -> PECore.FontWeight
  @objc public func getThemeStyleName() -> Swift.String
  @objc public func getAttributeNames() -> [Swift.String]
  @objc public func getAttributeValue(key: Swift.String) -> Swift.String
  public func applyThemeStyle(style: PECore.ThemeStyle?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DisplayTextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc override public func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class H1TextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc override public func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class H2TextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc override public func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class H3TextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc override public func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class H4TextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc override public func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BodyTextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SubtleTextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LinkTextStyle : PECore.TextStyle {
  @objc override public func getThemeStyleName() -> Swift.String
  @objc override public func fontColor(forceUseStyleColor: Swift.Bool) -> UIKit.UIColor
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BasicHeaderImageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(headerImageKey: Swift.String, bundle: Foundation.Bundle, landscape: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore20BasicHeaderImageViewV4bodyQrvp", 0) __
}
extension Foundation.URL {
  public var isLocalFileURL: Swift.Bool {
    get
  }
}
public enum MyChartNamespaceEnum : Swift.String {
  case None
  case Mychart_2010
  case Mychart_2011
  case Mychart_2012
  case Mychart_2013
  case Mychart_2014
  case Mychart_2015
  case Mychart_2016
  case Mychart_2017
  case Mychart_2018
  case Mychart_2019
  case Mychart_2020
  case Mychart_2021
  case Mychart_2022
  case Mychart_2023
  case Mychart_2024
  case Mychart_2025
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol PEWorkflowStepComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForWorkflowStep(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getWorkflowStepWidget(_ encounterContext: PECore.PEEncounterContext, componentHost: any PECore.PEComponentHostProtocol) -> UIKit.UIViewController?
}
public let blobScheme: Swift.String
extension Foundation.URL {
  public var isBlobURL: Swift.Bool {
    get
  }
  public func getBlobOriginURL(includeUUID: Swift.Bool = false) -> Foundation.URL?
}
@_inheritsConvenienceInitializers @objc public class WebViewConfigManager : ObjectiveC.NSObject {
  @objc public class func getSharedConfiguration() -> WebKit.WKWebViewConfiguration
  public class func setSharedConfiguration(_ newConfig: WebKit.WKWebViewConfiguration)
  @_Concurrency.MainActor public class func clearCookies(forDomainOf url: Foundation.URL? = nil) async
  @objc public class func clearCookies(forDomainOf url: Foundation.URL? = nil, callback: @escaping @_Concurrency.MainActor () -> Swift.Void)
  @_Concurrency.MainActor @objc public class func setMobileOptimizedCookie(for url: Foundation.URL) async
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum PEOrganizationCustomString : Swift.Int {
  case shareEverywhereAdditionalText = 1
  case listSeparatorPrimary = 2
  case testResultsPreText = 3
  case testResultsPostText = 4
  case doctorsCommentHeader = 5
  case medicationsHospitalAdmissionBannerText = 6
  case medicationsHospitalAdmissionBannerProxyText = 7
  case testResults = 8
  case shareEverywhere = 9
  case toDo = 10
  case medications = 11
  case questionnaires = 12
  case eVisitName = 13
  case messages = 14
  case eCheckIn = 15
  case MyDocuments = 16
  case switchPatients = 17
  case selectPatientToView = 18
  case selectPatientToViewAccessibility = 19
  case emergencyPhoneNumber = 20
  case covidScreeningStatusLowRisk = 21
  case covidScreeningStatusMediumRisk = 22
  case covidScreeningStatusHighRisk = 23
  case covidPastScreeningStatusLowRisk = 24
  case covidPastScreeningStatusMediumRisk = 25
  case covidPastScreeningStatusHighRisk = 26
  case covidStateRegistryName = 27
  case shareMyRecord = 28
  case requests = 29
  case covidActivityTitle = 30
  case preventiveCare = 31
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEOrganizationProtocol {
  @objc func getOrganizationName() -> Swift.String
  @objc func getIdentifier() -> Swift.String
  @objc func getMyChartBrandName() -> Swift.String
  @objc func getWebsiteName() -> Swift.String
  @objc func getBrandLogo(useDarkLogo: Swift.Bool, completionHandler: @escaping ((UIKit.UIImage) -> Swift.Void))
  @objc(getBrandHeaderFor:) func getBrandHeader(for delegate: any PECore.ImageLoaderDelegate)
  @objc func getBaseImageUrlPath() -> Swift.String?
  @objc func getTheme() -> any PECore.PEThemeProtocol
  @objc func isFeatureAvailable(_ supportedFeature: PECore.PESupportedFeature) -> Swift.Bool
  @objc func getAllowedHosts() -> [Swift.String]
  @objc func getCustomString(_ customString: PECore.PEOrganizationCustomString, _ defaultValue: Swift.String?) -> Swift.String?
  @objc func getCustomString(_ customString: PECore.PEOrganizationCustomString, _ defaultValue: Swift.String?, _ parameters: [Swift.String : Swift.String]) -> Swift.String?
  @objc func getSamlLoginCookiesToPersist() -> Swift.Array<Swift.String>?
  @objc func getSamlLoginDomainForCookiesToPersist() -> Swift.String?
  @objc func getHasAcordexLicense() -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc open class PEOrganizationInfo : ObjectiveC.NSObject, Swift.Codable, PECore.PEOrganizationInfoProtocol, PECore.ImageDataSource {
  @objc public var organizationId: Swift.String
  @objc public var isExternal: Swift.Bool
  @objc public var logoUrl: Swift.String
  @objc public var organizationName: Swift.String
  @objc public var linkStatus: Swift.Int
  @objc public var organizationLinkType: PECore.ExternalOrganizationLinkType
  @objc public var lastRefreshDate: Foundation.Date?
  public var isPayviderPayer: Swift.Bool
  @objc public var imageURL: Swift.String
  @objc override required dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public init(orgInfoProtocol: any PECore.PEOrganizationInfoProtocol)
  convenience public init?(orgInfoProtocol: (any PECore.PEOrganizationInfoProtocol)?)
  open func encode(to encoder: any Swift.Encoder) throws
  @objc open func getPayerLogo() -> UIKit.UIImage?
  @objc open func getPayerName() -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FormatterUtil {
  public static func needsArabicHandling(locale: PECore.PELocale, arabicOnly: Swift.Bool) -> Swift.Bool
  @objc deinit
}
extension Foundation.NumberFormatter {
  @objc public static func EpicUSFormatter() -> Foundation.NumberFormatter
  @objc public static func EpicDefaultFormatter() -> Foundation.NumberFormatter
  @objc public static func EpicCurrencyFormatter() -> Foundation.NumberFormatter
}
extension Foundation.DateFormatter {
  @objc public static func EpicDateFormatter() -> Foundation.DateFormatter
}
public class ThemeImageLoader {
  public typealias onLoadSuccessFunction = (UIKit.UIImage) -> Swift.Void
  public typealias onLoadFailureFunction = () -> Swift.Void
  public init(baseImageDirectory: Swift.String)
  public func getAllKeys() -> [Swift.String]
  public func getImageForKeyFromLocal(key: Swift.String?) -> UIKit.UIImage?
  public func getImageForKeyFromLocalWithError(key: Swift.String?, listener: @escaping (SVGRasterizer.SVGRasterizerResponse) -> Swift.Void)
  public func getImageForKey(key: Swift.String?, onSuccess success: @escaping PECore.ThemeImageLoader.onLoadSuccessFunction, onFailure fail: @escaping PECore.ThemeImageLoader.onLoadFailureFunction)
  @objc deinit
}
public enum ButtonOrientation : Swift.String {
  case vertical
  case horizontal
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol IOnboardingNavigationDelegate {
  @objc func actionTapped()
  @objc func backTapped()
  @objc func nextTapped()
  @objc func playTapped()
}
@_hasMissingDesignatedInitializers public class ErrorUtil {
  public static func throwInternalAppNotImplementedError()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class EncryptionUtil : ObjectiveC.NSObject {
  @objc public static var derivedKeyMethod1: Foundation.Data {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Data {
  public func toSHA1() -> Foundation.Data
}
extension Swift.String {
  public func fromAES128(key: Foundation.Data) -> Swift.String
  public func toAES128(key: Foundation.Data) -> Swift.String
}
@objc extension Foundation.NSData {
  @objc dynamic public func toSHA1() -> Foundation.NSData
}
@objc extension Foundation.NSString {
  @objc dynamic public func fromAES128String(key: Foundation.Data) -> Foundation.NSString
  @objc dynamic public func toAES128String(key: Foundation.Data) -> Foundation.NSString
}
extension _Concurrency.Task {
  public func join() async
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class AddToWalletButton : UIKit.UIControl {
  @objc deinit
}
@objc public enum PEBrandedColor : Swift.Int, Swift.CaseIterable, Swift.Codable {
  case unknown
  case personColor1
  case personColor2
  case personColor3
  case personColor4
  case personColor5
  case personColor6
  case personColor7
  case personTextColor1
  case personTextColor2
  case personTextColor3
  case personTextColor4
  case personTextColor5
  case personTextColor6
  case personTextColor7
  case backgroundColor
  case barButtonColor
  case barTintColor
  case barTextColor
  case headerBackgroundColor
  case legacyHeaderBackgroundColor
  case headerTextColor
  case inconclusiveButtonColor
  case informationalBackgroundColor
  case linkColor
  case loginButtonColor
  case loginButtonTextColor
  case negativeBackgroundColor
  case negativeButtonColor
  case negativeButtonTextColor
  case negativeTextColor
  case neutralButtonColor
  case neutralButtonTextColor
  case positiveBackgroundColor
  case positiveButtonColor
  case positiveButtonTextColor
  case positiveTextColor
  case signupButtonColor
  case signupButtonTextColor
  case tabBarSelectedItemColor
  case tintColor
  case unreadIndicatorColor
  case unreadIndicatorDotColor
  case warningBackgroundColor
  case positiveSemanticColor
  case negativeSemanticColor
  public init?(rawValue: Swift.Int)
  public typealias AllCases = [PECore.PEBrandedColor]
  public typealias RawValue = Swift.Int
  nonisolated public static var allCases: [PECore.PEBrandedColor] {
    get
  }
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEThemeProtocol {
  @objc func getBrandedColor(_ color: PECore.PEBrandedColor) -> UIKit.UIColor
  @objc func shouldTurnOffToDoTheme() -> Swift.Bool
  @objc func shouldUseTitleCaseForTestResults() -> Swift.Bool
  @objc func shouldSuppressHomepageOnboarding() -> Swift.Bool
  @objc func getBackgroundImageUrl() -> Swift.String?
  @objc func getCardStyle() -> any PECore.CardStyleProtocol
  @objc func getInteractiveCardStyle() -> any PECore.CardStyleProtocol
  @objc func getTextStyle(fontRamp: PECore.FontRamp) -> any PECore.TextStyleProtocol
  @objc func getImageForKeyFromLocal(key: Swift.String?) -> UIKit.UIImage?
  @objc func getImageForKey(key: Swift.String?, success: @escaping (UIKit.UIImage) -> Swift.Void, failure: @escaping () -> Swift.Void)
}
extension SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public func eraseToAnyView() -> SwiftUICore.AnyView
}
public struct GetLoginTokenResponse : Swift.Codable {
  public var redirectURL: Swift.String?
  public var allowedHosts: [Swift.String]?
  public var shouldLaunchOutsideApp: Swift.Bool {
    get
  }
  public var supportMobileTokenJump: Swift.Bool {
    get
  }
  public var supportMobilePrinting: Swift.Bool {
    get
  }
  public var ceLocationId: Swift.String?
  public var fallbackCELocationId: Swift.String?
  public var organizationInfo: PECore.PEOrganizationInfo?
  public func generateUrlRequest() -> Foundation.URLRequest?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class ImageKeyDataSource : PECore.ImageDataSource {
  @objc public var imageURL: Swift.String
  public init(imageKey: Swift.String, defaultImageKey: Swift.String?, tint: UIKit.UIColor?, bundle: Foundation.Bundle?)
  @objc deinit
}
public class PersonPhotoDataSource : PECore.CacheableImageDataSource {
  @objc final public let imageURL: Swift.String
  public init(person: any PECore.PEPersonProtocol, blobResourceTicket: Swift.String? = nil, localResource: UIKit.UIImage? = nil)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CoreShareSheet : SwiftUI.UIViewControllerRepresentable {
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: PECore.CoreShareSheet.Context) -> UIKit.UIActivityViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: UIKit.UIActivityViewController, context: PECore.CoreShareSheet.Context)
  public typealias Body = Swift.Never
  public typealias Coordinator = Swift.Void
  public typealias UIViewControllerType = UIKit.UIActivityViewController
}
@objc public class DirectUrlArgs : ObjectiveC.NSObject {
  @objc convenience public init(directUrl: Swift.String, allowedHosts: Swift.Array<Swift.String>)
  @objc convenience public init(directUrl: Swift.String, allowedHosts: Swift.Array<Swift.String>, patientContext: PECore.PEPatientContext?)
  @objc convenience public init(directUrl: Swift.String, allowedHosts: Swift.Array<Swift.String>, myChartHost: Swift.String?)
  @objc public init(directUrl: Swift.String, allowedHosts: Swift.Array<Swift.String>, myChartHost: Swift.String?, patientContext: PECore.PEPatientContext?)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class CoreWebViewCoordinator : ObjectiveC.NSObject {
  @objc deinit
}
extension PECore.CoreWebViewCoordinator : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction) async -> WebKit.WKNavigationActionPolicy
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class IntrinsicSizeView<ContentView> : UIKit.UIView where ContentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var contentView: UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public init(contentView: UIKit.UIView, fixedWidth: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public var frame: CoreFoundation.CGRect {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency public func resize(systemInitiated: Swift.Bool = false)
  @objc deinit
}
extension PECore.CoreWebView {
  @_Concurrency.MainActor @preconcurrency public static func shouldForceDownload(for fileType: PECore.FileType) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public static func shouldForceDownload(for mimeType: PECore.MimeType) -> Swift.Bool
}
@objc public protocol PEChecklistComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForChecklist(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getChecklistViewController(_ encounterContext: PECore.PEEncounterContext, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
}
@_Concurrency.MainActor @preconcurrency public struct MyChartRadioButton : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(isChecked: Swift.Bool, checkedColor: SwiftUICore.Color, uncheckedColor: SwiftUICore.Color)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore18MyChartRadioButtonV4bodyQrvp", 0) __
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class CardView : UIKit.UIView {
  @objc public enum CardType : Swift.Int {
    case Normal
    case TopHalf
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func setCardType(_ cardType: PECore.CardView.CardType)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class SectionHeaderView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public static let headerLabelHPadding: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public static let headerLabelBottomPadding: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency public static let headerLabelTopPadding: CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String, accessibilityLabel: Swift.String?, lineBreakMode: UIKit.NSLineBreakMode, bottomPadding: CoreFoundation.CGFloat?)
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String, accessibilityLabel: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String, lineBreakMode: UIKit.NSLineBreakMode)
  @_Concurrency.MainActor @preconcurrency public func setTitle(_ title: Swift.String, accessibilityLabel: Swift.String?, lineBreakMode: UIKit.NSLineBreakMode)
  @objc deinit
}
extension Foundation.Timer {
  public static func scheduledConcurrencySafeTimer(withTimeInterval time: Foundation.TimeInterval, repeats: Swift.Bool, onMainThread: Swift.Bool = false, code: @escaping () -> Swift.Void) -> some Combine.Cancellable
  
}
@objc public protocol BaseStyleProtocol {
  @objc func getThemeStyleName() -> Swift.String
  @objc func getAttributeNames() -> [Swift.String]
  @objc func getAttributeValue(key: Swift.String) -> Swift.String
}
public enum PEDeepLinkFeatureIdentifier : Swift.String, Swift.CaseIterable {
  case AccountDeactivation
  case AccountSettings
  case AccountSettings2
  case AccountSettings3
  case AddFlowsheetReadings
  case AddFlowsheetReadings2
  case AppleWalletTestNative
  case AppleWalletTestWeb
  case Allergies
  case Allergies2
  case AppleWatchLinking
  case AppointmentArrivalCheckIn
  case AppointmentArrivalCheckIn2
  case AppointmentArrivalSetup
  case AppointmentTicketDecline
  case Appointments
  case AskAQuestion
  case AskQuestionnaire
  case AskQuestionnaire2
  case AvsPdf
  case BedsideSelfServiceTabletCode
  case BedsideTVVideoVisitInfo
  case BillingAccountDetailsMode
  case BillingAutopay
  case BillingAutoPayMode
  case BillingCustomerService
  case BillingDetails
  case BillingDocument
  case BillingPayments
  case BillingPaymentsMode
  case BillingURL
  case BillingURL2
  case BlobScanPdf
  case CareJourneys
  case CareTeam
  case CareTeam2
  case ChangePassword
  case ChangePassword2
  case Claims
  case CommunicationPreferences
  case CommunicationPreferences2
  case CommunityManageLinked
  case CommunityManage
  case CommunityManage2
  case CommunityResources
  case ComputerReadableExport
  case ContactLensPrescription
  case ContactVerification
  case ContinuingCare
  case ConversationDetails
  case Copyright
  case CostCalculator
  case CovidStatus
  case CustomMode
  case CustomerService
  case CustomerService2
  case DayAtAGlance
  case DebugAppointmentMonitoring
  case DirectSchedule
  case DocumentDownload
  case DocumentHub
  case DrivingDirections
  case ECheckIn
  case ECheckInAdditionalSteps
  case Education
  case EducationPoint
  case EducationQuestion
  case EmailVerification
  case EVisit
  case EVisit2
  case EVisit3
  case EVisit4
  case EyeglassPrescription
  case FamilyAccess
  case FamilyAccess2
  case Fdi
  case Fdi2
  case FeatureLibrary
  case FinancialAssistance
  case FinancialAssistance2
  case FlowsheetDetails
  case FutureAppointmentURL
  case GeneticProfile
  case Goals
  case GrowthCharts
  case GoToSignUp
  case HealthConnections
  case HealthIssues
  case HealthIssues2
  case HealthLinks
  case HealthReminders
  case HealthSummary
  case HealthSummary2
  case HealthSummary3
  case HistoryQnr
  case Immunizations
  case Immunizations2
  case Implants
  case InsuranceCard
  case InsuranceCoverageDetails
  case InsuranceHub
  case InsuranceSummary
  case LearnMore
  case LegacyCustomService
  case LegacyGeneralQnr
  case LegacyInsuranceCards
  case LegacyMedicalAdvice
  case LegacyMessageDetails
  case LegacyTrackMyHealth
  case Letters
  case Letters2
  case Logout
  case ManageLinkedDevices
  case MedicalAdvice
  case MedicarePrescriptionPayPlan
  case Medications
  case Medications2
  case MessageDetails
  case MessageDetails2
  case Messages
  case Messages2
  case MobileAppReview
  case MobileVerification
  case MyChartHome
  case MyChartNowHome
  case MyChartNowHome2
  case MyDocuments
  case MyDocuments2
  case NativeExternalPayment
  case NotificationPreferences
  case OnDemandTelehealth
  case OnDemandTelehealth2
  case OnMyWay
  case OnMyWay2
  case OpenAttachment
  case OpenUrl
  case OrganDonor
  case OrgSelect
  case PaperlessBilling
  case PaperlessBilling2
  case PaperlessBilling3
  case PastAdmissionNotes
  case PastAdmission
  case PastAppointmentNotes
  case PastAppointment
  case PastAppointment2
  case PastAppointment3
  case PatientEstimateDetails
  case PatientEstimateDetailsMode
  case PatientEstimates
  case PatientEstimates2
  case PersonalInformation
  case Personalize
  case PregnancyHubEnroll
  case PremiumBillingAutopay
  case PremiumBillingPayment
  case PremiumBilling
  case PremiumBilling2
  case PrescriptionMessage
  case PreventiveCare
  case ProviderDetails
  case ProviderFinder
  case ProxyConfirmation
  case Questionnaires
  case Questionnaires2
  case Referrals
  case ReimbursementRequest
  case ReportViewer
  case RequestSchedule
  case ResearchStudies
  case SafetyPlan
  case Scheduling
  case SchedulingTickets
  case Screening
  case ShareEverywhere
  case ShareEverywhere2
  case SharingHub
  case SharingHub2
  case ShortcutPersonalization
  case StartVideoVisit
  case SwitchOrg
  case SymptomChecker
  case SymptomCheckerMode
  case TestResultDetail
  case TestResultDetail2
  case TestResults
  case TestResults2
  case TiffAttachment
  case ToDoChangeDetails
  case ToDoChanges
  case ToDoChanges2
  case ToDoLinkTask
  case ToDoManageReminders
  case ToDoOverdue
  case ToDoProgress
  case ToDo
  case TrackMyHealth
  case TrackMyHealth2
  case TrendsDashboard
  case TwoFactorOptInTOTP
  case UpcomingOrders
  case VideoVisitParticipants
  case Visits
  case WelcomeWizard
  case WelcomeWizardJump
  case DebugButtonSandbox
  case DebugSVGThemeLibrary
  case DebugSiteWideThemeOverride
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PECore.PEDeepLinkFeatureIdentifier]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [PECore.PEDeepLinkFeatureIdentifier] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_Concurrency.MainActor @preconcurrency open class SwiftUIViewComponent<Content> : UIKit.UIViewController, PECore.PEHostableComponentViewController where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency weak public var componentHost: (any PECore.PEComponentHostProtocol)?
  @_Concurrency.MainActor @preconcurrency public init(@SwiftUICore.ViewBuilder content: @escaping (PECore.SwiftUIViewComponent<Content>) -> Content)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc public func setComponentHost(_ componentHost: any PECore.PEComponentHostProtocol)
  @_Concurrency.MainActor @preconcurrency @objc open func shouldShowComponentHostUserInfoInNavBar() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc open func getLeftBarButtonItem() -> UIKit.UIBarButtonItem?
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CapturedWorkflowView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var details: PECore.CapturedWorkflowDetails<SwiftUICore.AnyView, SwiftUICore.AnyView, SwiftUICore.AnyView>
  @_Concurrency.MainActor @preconcurrency public init(details: PECore.CapturedWorkflowDetails<SwiftUICore.AnyView, SwiftUICore.AnyView, SwiftUICore.AnyView>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore20CapturedWorkflowViewV4bodyQrvp", 0) __
}
public struct HeaderShape : SwiftUICore.Shape {
  public init(size: CoreFoundation.CGSize, landscapeMode: Swift.Bool)
  public init(size: CoreFoundation.CGSize, curveAmt: CoreFoundation.CGFloat, landscapeMode: Swift.Bool)
  nonisolated public func path(in rect: CoreFoundation.CGRect) -> SwiftUICore.Path
  public typealias AnimatableData = SwiftUICore.EmptyAnimatableData
  public typealias Body = SwiftUICore._ShapeView<PECore.HeaderShape, SwiftUICore.ForegroundStyle>
}
@_Concurrency.MainActor @preconcurrency public struct ProgressDot : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(activeDot: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore11ProgressDotV4bodyQrvp", 0) __
}
@_Concurrency.MainActor @preconcurrency public struct MyChartCard<Content> : SwiftUICore.View where Content : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var isInteractable: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public init(isInteractable: Swift.Bool = false, content: () -> Content)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore11MyChartCardV4bodyQrvp", 0) __<Content>
}
@objc public class ExtensibilityContextItem : ObjectiveC.NSObject, Swift.Codable {
  @objc public init(_ type: Swift.String, _ name: Swift.String, _ value: Swift.String, _ isEncrypted: Swift.Bool)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_Concurrency.MainActor @preconcurrency public class MyChartTextFieldView : PECore.SelfLoadingView {
  @IBOutlet @objc @_Concurrency.MainActor @preconcurrency weak public var backgroundView: UIKit.UIView!
  @IBOutlet @objc @_Concurrency.MainActor @preconcurrency weak public var textField: UIKit.UITextField!
  @objc @_Concurrency.MainActor @preconcurrency public init(hint: Swift.String?, startingValue: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency override public var selfLoadingNibName: Swift.String? {
    get
  }
  @_Concurrency.MainActor @preconcurrency override public func createView()
  @_Concurrency.MainActor @preconcurrency public func setHint(_ hint: Swift.String?)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct CoreWebView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(manager: PECore.CoreWebViewManager = CoreWebViewManager(), url: SwiftUICore.Binding<Foundation.URL?>)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  @_Concurrency.MainActor @preconcurrency public func load(_ request: Foundation.URLRequest)
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore11CoreWebViewV4bodyQrvp", 0) __
}
@objc public enum PEComponentAccessResult : Swift.Int {
  case AccessAllowed = 1
  case NotAuthenticated = 2
  case MissingServerUpdate = 3
  case MissingSecurity = 4
  case MissingAppPermissions = 5
  case UserDisabledSetting = 6
  case Deprecated = 7
  case UnknownError = 8
  case SecurityNotLoaded = 11
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PreloginLocaleManager : ObjectiveC.NSObject {
  @objc public static func getPreloginLocale() -> PECore.PELocale
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PEEncounterAlertProtocol : PECore.PEAlertProtocol {
  @objc func getEncounterAlertCount() -> Swift.Int
  @objc func getEncounterCsn() -> Swift.String
}
extension Swift.Array where Element : PECore.PEEncounterAlertProtocol {
  public func badgeCountForType(_ alertType: PECore.PEAlertType?) -> Swift.Int
}
@objc public protocol PEAlertProtocol {
  @objc func getCount() -> Swift.Int
  @objc func getType() -> PECore.PEAlertType
}
extension Swift.Array where Element : PECore.PEAlertProtocol {
  public func badgeCountForType(_ alertTypes: Swift.Array<PECore.PEAlertType>) -> Swift.Int
}
@_hasMissingDesignatedInitializers public class DeviceUtil {
  public static func hasPairedWatch() -> Swift.Bool
  public static func getName() -> Swift.String
  @objc public static func getID() -> Swift.String
  public static func getModel() -> Swift.String
  @objc deinit
}
@objc public protocol PEPersonProtocol : ObjectiveC.NSObjectProtocol {
  @objc func getFeatureLoadStatus() -> PECore.FeatureLoadStatus
  @objc func getIdentifier() -> Swift.String
  @objc func getEncryptedIdentifier() -> Swift.String
  @objc func hasSecurityPoint(_ feature: Swift.String) -> Swift.Bool
  @objc func getNickname() -> Swift.String?
  @objc(getNicknamePreferingRefusalName:) func getNickname(preferRefusalName: Swift.Bool) -> Swift.String?
  @objc func getFullname() -> Swift.String
  @objc func getColor() -> UIKit.UIColor
  @objc func getTextColor() -> UIKit.UIColor
  @objc func getPhoto(onImageLoaded: ((any PECore.PEPersonProtocol, UIKit.UIImage?) -> Swift.Void)?) -> UIKit.UIImage?
  @objc func getPhoto(useFallback: Swift.Bool, onImageLoaded: ((any PECore.PEPersonProtocol, UIKit.UIImage?) -> Swift.Void)?) -> UIKit.UIImage?
  @objc func getWebServiceUrl(_ urlType: PECore.UrlType) -> Swift.String
  @objc func getAccountIdType() -> PECore.IDType
  @objc(updateNickname:) func update(nickname: Swift.String?)
  @objc(updateColorIndex:) func update(colorIndex: Swift.Int)
  @objc(updatePhoto:) func update(photo: UIKit.UIImage?)
}
@objc public enum FeatureLoadStatus : Swift.Int, Swift.Decodable, Swift.Encodable {
  case unknown = 0
  case fullyLoaded = 1
  case partiallyLoaded = 2
  case loading = 3
  case failed = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum IDType : Swift.Int, Swift.Decodable, Swift.Encodable {
  case unknown = 0
  case internalId = 1
  case CID = 2
  case none = 3
  case relId = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_Concurrency.MainActor @preconcurrency public class GifAnimationView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public func load(bundle: Foundation.Bundle!, resource: Swift.String!)
  @_Concurrency.MainActor @preconcurrency public func hide()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class MyChartWebViewController : UIKit.UIViewController {
  @objc public enum ButtonStyle : Swift.Int {
    case none = 0
    case close
    case finishLater
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public static let h2gOrganizationIdKey: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let h2gOrganizationNameKey: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let h2gOrganizationLogoUrlKey: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let h2gOrganizationIsPayviderPayerKey: Swift.String
  @_Concurrency.MainActor @preconcurrency public static let kWPKeyEpicHttp: Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public static let kWPKeyShowUserInfoInTitleBar: Swift.String
  @_Concurrency.MainActor @preconcurrency public var currentUrl: Foundation.URL? {
    get
  }
  @_Concurrency.MainActor @preconcurrency open var args: PECore.MyChartWebArgs?
  @_Concurrency.MainActor @preconcurrency open var webView: WebKit.WKWebView?
  @_Concurrency.MainActor @preconcurrency open var manager: PECore.MyChartWebViewControllerManager!
  @objc @_Concurrency.MainActor @preconcurrency public var skipSessionMaintenance: Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(webViewArgs: PECore.MyChartWebArgs?) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(webViewArgs: PECore.MyChartWebArgs?, manager: PECore.MyChartWebViewControllerManager?, title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true, queryParameters: [Swift.String : Swift.String]? = nil) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(webViewArgs: PECore.MyChartWebArgs?, manager: PECore.MyChartWebViewControllerManager?, title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true, queryParameters: [Swift.String : Swift.String]? = nil, shouldRefreshAlertsAndHomePageFeed: Swift.Bool = false) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(webViewArgs: PECore.MyChartWebArgs?, manager: PECore.MyChartWebViewControllerManager?, title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true, queryParameters: [Swift.String : Swift.String]? = nil, shouldRefreshAlertsAndHomePageFeed: Swift.Bool = false, shouldHideComponentHostEpicLogo: Swift.Bool = false) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(webViewArgs: PECore.MyChartWebArgs?, manager: PECore.MyChartWebViewControllerManager?, title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true, queryParameters: [Swift.String : Swift.String]? = nil, shouldRefreshAlertsAndHomePageFeed: Swift.Bool = false, shouldHideComponentHostEpicLogo: Swift.Bool = false, shouldRefreshWebViews: Swift.Bool = false) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(webViewArgs: PECore.MyChartWebArgs?, manager: PECore.MyChartWebViewControllerManager?, title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true, queryParameters: [Swift.String : Swift.String]? = nil, shouldRefreshAlertsAndHomePageFeed: Swift.Bool = false, shouldHideComponentHostEpicLogo: Swift.Bool = false, shouldRefreshWebViews: Swift.Bool = false, shouldConstrainToKeyboard: Swift.Bool = false) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(directUrlArgs: PECore.DirectUrlArgs) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(directUrlArgs: PECore.DirectUrlArgs, manager: PECore.MyChartWebViewControllerManager?, title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true) -> PECore.MyChartWebViewController
  @objc @_Concurrency.MainActor @preconcurrency public static func newInstance(directUrlArgs: PECore.DirectUrlArgs, manager: PECore.MyChartWebViewControllerManager?, title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true, disableJavascriptCommunication: Swift.Bool = false) -> PECore.MyChartWebViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func launchPage(args newArgs: PECore.MyChartWebArgs)
  @_Concurrency.MainActor @preconcurrency public func getArgs() -> PECore.MyChartWebArgs?
  @_Concurrency.MainActor @preconcurrency public func setManager(manager newManager: PECore.MyChartWebViewControllerManager)
  @_Concurrency.MainActor @preconcurrency public func getAllowedHosts() -> [Swift.String]?
  @_Concurrency.MainActor @preconcurrency public func getComponentHost() -> (any PECore.PEComponentHostProtocol)?
  @_Concurrency.MainActor @preconcurrency public func getOrganization() -> PECore.PEOrganizationInfo?
  @_Concurrency.MainActor @preconcurrency public func runJavascript(javaScript: Swift.String, listener: @escaping ((Swift.String) -> ()))
  @objc @_Concurrency.MainActor @preconcurrency public func setRefreshNotification()
  @objc @_Concurrency.MainActor @preconcurrency public func reload()
  @_Concurrency.MainActor @preconcurrency public func stopLoading()
  @objc @_Concurrency.MainActor @preconcurrency public func onNavigateAway()
  @_Concurrency.MainActor @preconcurrency public func logoutAndClose(launching deepLinkUrl: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func logoutAndClose(launching deepLink: any PECore.PEDeepLinkProtocol)
  @_Concurrency.MainActor public func logoutAndClose() async
  @_Concurrency.MainActor @preconcurrency public func logoutAndClose()
  @_Concurrency.MainActor @preconcurrency public func showLoadingView()
  @_Concurrency.MainActor @preconcurrency public func hideLoadingView()
  @_Concurrency.MainActor @preconcurrency public func onWebViewDidClose()
  @_Concurrency.MainActor @preconcurrency open func dismissViewController(_ onCompletion: (() -> Swift.Void)? = nil)
  @objc @_Concurrency.MainActor @preconcurrency public func didReceiveNotifications(_ notification: Foundation.Notification)
  @_Concurrency.MainActor @preconcurrency public func isFromH2GDeepLink() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency open func initializeBaseProperties(title: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle, showBackButton: Swift.Bool = true)
  @_Concurrency.MainActor @preconcurrency open func requestLoginToken()
  @_Concurrency.MainActor @preconcurrency public func clearCookies()
  @objc @_Concurrency.MainActor @preconcurrency public func cancelAndClose()
  @objc @_Concurrency.MainActor @preconcurrency public func didTapBackButton()
  @objc @_Concurrency.MainActor @preconcurrency public func didTapCloseButton()
  @_Concurrency.MainActor @preconcurrency public func disableWebViewBounceOnScroll()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension PECore.MyChartWebViewController : PECore.MyChartJavascriptProtocol {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onJavascriptRequestsClose()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func resetIdleTimer()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setWebViewTitle(newTitle: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func disableCloseButton()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func reenableCloseButton()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func locationHandler()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setWebViewStateChanged(stateMessage: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setSearchBarInputValue(query: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func focusSearchBarInput()
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onEpicPxMobileIntegrationReady()
}
extension PECore.MyChartWebViewController {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func handleBackNavigation()
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func canClose() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func shouldOverrideUrlLoadingInMyChart(url: Foundation.URL?, isMyChartSite isMyChartWebsite: Swift.Bool) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func shouldAllowNavigation(url: Foundation.URL) -> Swift.Bool
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func shouldOverrideUrlResponseBehavior(for navigationResponse: WebKit.WKNavigationResponse) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func setNavigationEnabled(_ enabled: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func onPageStarted(url: Foundation.URL)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func onPageFinished(url: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency public func onPageCommitVisible()
  @_Concurrency.MainActor @preconcurrency public func onHttpError()
  @_Concurrency.MainActor @preconcurrency public func onTimeout()
  @_Concurrency.MainActor @preconcurrency public func onMyChartError()
  @_Concurrency.MainActor @preconcurrency public func launchEpicHttpInMyChart(url: Foundation.URL?)
  @_Concurrency.MainActor @preconcurrency public func launchInExternalBrowser(url: Foundation.URL?, data: PECore.GetLoginTokenResponse?)
  @objc @_Concurrency.MainActor @preconcurrency public static func promptUserWithLaunchOutsideAlert(rootVC: UIKit.UIViewController, onLaunch: @escaping () -> (), onClose: @escaping () -> ())
  @_Concurrency.MainActor @preconcurrency public func launchInExternalApp(url: Foundation.URL?, isTrusted: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func onMyChartLoginRedirect()
  @_Concurrency.MainActor @preconcurrency public func onAbandonCurrentLoginRedirect()
  @_Concurrency.MainActor @preconcurrency public func disableEvaluableJavascript() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func launchFileView(fileURL: Foundation.URL, mimeType: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func showLoadingIndicator()
  @_Concurrency.MainActor @preconcurrency public func hideLoadingIndicator()
}
extension PECore.MyChartWebViewController : PECore.ImageLoaderDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didLoadImage(_ image: UIKit.UIImage, forSource source: any PECore.ImageDataSource)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func didFailToLoadImage(forSource source: any PECore.ImageDataSource)
}
@objc extension PECore.MyChartWebViewController : PECore.PEHostableComponentViewController {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setComponentHost(_ host: any PECore.PEComponentHostProtocol)
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func shouldShowComponentHostBackButton(showBackNavigation: @escaping (Swift.Bool) -> ())
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func getLeftBarButtonItem() -> UIKit.UIBarButtonItem?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func getRightBarButtonItem() -> UIKit.UIBarButtonItem?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func shouldWarnUserBeforeUnload(showWarning: @escaping (() -> ()), continueWithoutWarning: @escaping (() -> ()))
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func shouldShowComponentHostUserInfoInNavBar() -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func shouldHideComponentHostEpicLogoInNavBar() -> Swift.Bool
}
extension PECore.MyChartWebViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
extension PECore.MyChartWebViewController : WebKit.WKScriptMessageHandlerWithReply {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage) async -> (Any?, Swift.String?)
}
extension PECore.MyChartWebViewController : PECore.WebActivityListener {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func onActivity()
}
extension PECore.MyChartWebViewController : UIKit.UIScrollViewDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
extension PECore.MyChartWebViewController : PECore.PEDeepLinkLaunchableProtocol {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func setDeepLinkLaunchParameters(_ deepLinkLaunchParameters: [Swift.String : Swift.String])
}
extension PECore.MyChartWebViewController : PECore.PERemoteOrganizationSupportProtocol {
  @_Concurrency.MainActor @preconcurrency public var supportsH2GLaunchContext: Swift.Bool {
    get
  }
  @_Concurrency.MainActor @preconcurrency public var launchesH2GContextLocally: Swift.Bool {
    get
  }
}
public protocol PEDeepLinkComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @discardableResult
  func execute(deepLinkUrl: Swift.String?, in navigationController: UIKit.UINavigationController?, params: [PECore.PEDeepLinkParam : Any]?, options: PECore.PEDeepLinkOption) -> Swift.Bool
  @discardableResult
  func execute(deepLink: any PECore.PEDeepLinkProtocol, in navigationController: UIKit.UINavigationController?) -> Swift.Bool
  func constructDeepLinkFromUrl(_ url: Foundation.URL) -> any PECore.PEDeepLinkProtocol
  func constructEpicHttpDeepLink(feature: PECore.PEDeepLinkFeatureIdentifier, queryParams: [Swift.String : Swift.String]?) -> any PECore.PEDeepLinkProtocol
  func constructEpicHttpDeepLink(feature: PECore.PEDeepLinkFeatureIdentifier, queryParams: [Swift.String : Swift.String]?, encodeParams: Swift.Bool) -> any PECore.PEDeepLinkProtocol
  func getViewController(for deepLinkUrl: Swift.String) -> UIKit.UIViewController?
  func accessResult(for deepLinkUrl: Swift.String, person: any PECore.PEPersonProtocol) -> PECore.PEComponentAccessResult
  func getAndClearDeepLinkPendedForLogin() -> (any PECore.PEDeepLinkProtocol)?
  func hasDeepLinkPendingLogin() -> Swift.Bool
}
@objc public protocol PENativeMessagesComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getNativeProviderMessageViewController(provider: any PECore.PEMessageProvider) -> UIKit.UIViewController?
}
@_inheritsConvenienceInitializers @objc public class ExtensibilityLaunchWebServiceAPI : ObjectiveC.NSObject {
  public class func getNPPExtensibleLink(context: PECore.PEUserContext?, fdiID: Swift.String, fdiIDEncrypted: Swift.Bool, documentID: Swift.String, smartStyle: PECore.SmartStyleModel?) -> PECore.WebService<PECore.GetExtensibleLinkResponse>
  public class func getExtensibleLinkPatientContext(context: PECore.PEPatientContext?, fdiID: Swift.String, fdiIDEncrypted: Swift.Bool, documentID: Swift.String, smartStyle: PECore.SmartStyleModel?) -> PECore.WebService<PECore.GetExtensibleLinkResponse>
  public class func getExtensibleLinkEncounterContext(context: PECore.PEEncounterContext, fdiID: Swift.String, fdiIDEncrypted: Swift.Bool, documentID: Swift.String, smartStyle: PECore.SmartStyleModel?) -> PECore.WebService<PECore.GetExtensibleLinkResponse>
  @objc public class func runExtensibleLink(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext?, fdiID: Swift.String, fdiIDEncrypted: Swift.Bool, documentID: Swift.String, ltkID: Swift.String, ltkInst: Swift.String, ordID: Swift.String, orgID: Swift.String, isOrgExternal: Swift.Bool, contextItems: [PECore.ExtensibilityContextItem], nowEncounterCSN: Swift.String, nowEncounterUCI: Swift.String, smartStyle: PECore.SmartStyleModel?, onSuccess: @escaping (_ response: PECore.GetExtensibleLinkResponse?) -> (), onFailure: @escaping (_ error: PECore.WebServiceFailedError?) -> ())
  @objc override dynamic public init()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct BasicButtonView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(buttons: [PECore.ButtonDetail])
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore15BasicButtonViewV4bodyQrvp", 0) __
}
public struct ButtonDetail {
  public init(text: Swift.String, action: @escaping () -> Swift.Void, buttonType: PECore.CoreButton.ButtonType = .standard, buttonPriority: PECore.ButtonPriority = .primary, buttonTone: PECore.ButtonTone = .positive, buttonDisabled: Swift.Bool = false)
}
@objc @_Concurrency.MainActor @preconcurrency public class AnimatedImageView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var webView: WebKit.WKWebView!
  @_Concurrency.MainActor @preconcurrency public var imageView: UIKit.UIImageView!
  @_Concurrency.MainActor @preconcurrency public var activeSubview: UIKit.UIView!
  @objc @_Concurrency.MainActor @preconcurrency public var tintColorHex: Swift.String?
  @objc @_Concurrency.MainActor @preconcurrency convenience public init(imageNamed resource: Swift.String, in bundle: Foundation.Bundle, tintColor tint: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc @_Concurrency.MainActor @preconcurrency public func setImage(withName resource: Swift.String, in bundle: Foundation.Bundle)
  @_Concurrency.MainActor @preconcurrency public func setImage(withName resource: Swift.String, in bundle: Foundation.Bundle, withTintHex tintHex: Swift.String?)
  @_Concurrency.MainActor @preconcurrency public func setImage(_ image: UIKit.UIImage)
  @objc @_Concurrency.MainActor @preconcurrency public func clearImage()
  @_Concurrency.MainActor @preconcurrency public func setTint(color: UIKit.UIColor)
  @objc deinit
}
@objc public enum ExternalOrganizationLinkType : Swift.Int {
  case Undefined = 0
  case MyChart = 1
  case Fhir = 2
  case Dxr = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol PEOrganizationInfoProtocol {
  @objc var organizationId: Swift.String { get }
  @objc var isExternal: Swift.Bool { get }
  @objc var logoUrl: Swift.String { get }
  @objc var organizationName: Swift.String { get }
  @objc var linkStatus: Swift.Int { get }
  @objc var organizationLinkType: PECore.ExternalOrganizationLinkType { get }
  @objc var lastRefreshDate: Foundation.Date? { get }
  @objc func getPayerLogo() -> UIKit.UIImage?
  @objc func getPayerName() -> Swift.String?
}
@_inheritsConvenienceInitializers @objc public class CookieAllowListManager : ObjectiveC.NSObject {
  @objc public class func getInstance() -> PECore.CookieAllowListManager
  @objc public func addCookieToAllowList(cookieName: Swift.String)
  @objc public func removeCookieFromAllowList(cookieName: Swift.String)
  @objc public func clearAllCookiesFromAllowList()
  @objc public func getCookiesInAllowList() -> Swift.Set<Swift.String>
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc @_Concurrency.MainActor @preconcurrency public class SiteWideThemeOverrideViewController : UIKit.UIViewController {
  @objc @_Concurrency.MainActor @preconcurrency public static func getInstance() -> PECore.SiteWideThemeOverrideViewController
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency public static func getOverrideThemeSettings() -> PECore.ThemeSettings
  @objc deinit
}
@objc public enum PEResponseFormat : Swift.Int {
  case Default
  case JSON
  case JSONWrappedBedside
  case RawData
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol BrandedAssetsProviderProtocol {
  @objc func getWebsiteUrl() -> Swift.String
  @objc func getRelativeHeaderBackgroundImageUrl() -> Swift.String
  @objc func getRelativeBaseImageDirectory() -> Swift.String
  @objc func hasAcordexLicenseAsset() -> Swift.Bool
  @objc func getImageForKeyFromLocal(key: Swift.String?) -> UIKit.UIImage?
  @objc func getImageForKey(key: Swift.String?, success: @escaping (UIKit.UIImage) -> Swift.Void, failure: @escaping () -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class ThemeColors : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public protocol PEApplicationComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func logout()
  @objc optional func logout(withDeepLinkUrl url: Swift.String)
  @objc func switchCurrentPerson(_ person: any PECore.PEPersonProtocol)
  @objc optional func invalidateAlertsForPatient()
  @objc func isInternalBuild() -> Swift.Bool
  @objc func isHealthKitDataAvailable() -> Swift.Bool
  @objc optional func getCurrentLocaleOverride() -> PECore.PELocale?
  @objc func isBrandedApp() -> Swift.Bool
  @objc func isSelfSubmittedApp() -> Swift.Bool
  @objc func isEpicSubmittedApp() -> Swift.Bool
  @objc func getBrandedAppOrgId() -> Swift.String
  @objc func getBrandedCustomerImage() -> UIKit.UIImage?
  @objc optional func shouldEnableLogoutButton() -> Swift.Bool
  @objc func isTestLibraryExpired() -> Swift.Bool
  @objc optional func getServerPrimaryLocale() -> PECore.PELocale?
  @objc optional func getCurrentLocale() -> PECore.PELocale
  @objc optional func getDefaultLocale() -> PECore.PELocale
  @objc optional func getCommandLocale() -> PECore.PELocale
  @objc optional func getFormatterLocale() -> PECore.PELocale
  @objc optional func getCurrencyFormatterLocale() -> PECore.PELocale
  @objc optional func getLocaleSettingsDebugDescription(withDevice: Swift.Bool) -> Swift.String
  @objc optional func getDatePattern(from dateFormatTemplate: Swift.String) -> Swift.String?
  @objc func isFullyAuthenticated() -> Swift.Bool
  @objc optional func getAppleWatchState() -> PECore.PEAppleWatchState
  @objc optional func resetIdleTimer()
  @objc func startIdleTimer()
  @objc func stopIdleTimer()
  @objc func getCurrentUserContext() -> PECore.PEUserContext?
  @objc func getCurrentPatientContext() -> PECore.PEPatientContext?
  @objc optional func getApplicationId() -> Swift.String
  @objc func getApplicationType() -> PECore.ApplicationType
  @objc optional func getDeviceUId() -> Swift.String
  @objc func getPrivacyPolicyURL() -> Swift.String?
  @objc optional func isTimeout() -> Swift.Bool
  @objc optional func isPrintingSupported() -> Swift.Bool
  @objc func getAppDisplayName() -> Swift.String
  @objc func getDefaultTheme() -> any PECore.PEThemeProtocol
  @objc func clearLoginState()
  @objc optional func getAppLaunchScheme() -> Swift.String?
  @objc func isAppReviewModeEnabled() -> Swift.Bool
  @objc func getPhonebookUrl() -> Swift.String
  @objc func shouldSuppressMOPrintingOnboarding() -> Swift.Bool
}
@objc public enum PEAppleWatchState : Swift.Int {
  case notLinkable
  case unlinked
  case linkedToThisOrg
  case linkedToAnotherOrg
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public enum ButtonTone : Swift.String, Swift.CaseIterable {
  case positive
  case negative
  case neutral
  case custom
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PECore.ButtonTone]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [PECore.ButtonTone] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public func getValueFromWebFunctionCallback<T>(function: (@escaping (T) -> Swift.Void) -> Swift.Void) async -> T
public func showDownloadFailedToast()
@_hasMissingDesignatedInitializers @objc open class PEOrganizationContext : ObjectiveC.NSObject {
  @objc public func getUsers() -> [any PECore.PEUserProtocol]?
  @objc open func getOrganization() -> (any PECore.PEOrganizationProtocol)?
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class IOSDeviceLocaleSettings : ObjectiveC.NSObject, PECore.DeviceLocaleSourceReader {
  public static var userPreferredLanguages: [Swift.String] {
    get
  }
  @objc public func readLocales() -> [PECore.PELocale]
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol PEOnboardingComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getTwoFactorEnrollmentOptionalViewController(linkAction: @escaping () -> Swift.Void, positiveAction: @escaping () -> Swift.Void, negativeAction: @escaping () -> Swift.Void, debugText: Swift.String?, debugLinkAction: (() -> Swift.Void)?) -> UIKit.UIViewController
  @objc func getTwoFactorEnrollmentRequiredViewController(linkAction: @escaping () -> Swift.Void, positiveAction: @escaping () -> Swift.Void, negativeAction: @escaping () -> Swift.Void, debugText: Swift.String?, debugLinkAction: (() -> Swift.Void)?) -> UIKit.UIViewController
  @objc func getOrgTermsConditionsViewController(_ phonebook: any PECore.PEPhonebookEntryProtocol, _ userPatient: (any PECore.PEPatientProtocol)?, _ patientList: [any PECore.PEPatientProtocol]?, _ onCompletion: @escaping (Swift.Bool) -> Swift.Void) -> UIKit.UIViewController?
  @objc func getSecondaryLoginSetupViewController(onCompletion: @escaping (Swift.Bool, Swift.Bool) -> Swift.Void) -> UIKit.UIViewController?
  @objc func getPushNotificationSetupViewController(onCompletion: @escaping () -> Swift.Void) -> UIKit.UIViewController?
  @objc func getPreLoginViewController() -> UIKit.UIViewController
  @objc func getHomePageOnboardingViewController(context: PECore.PEUserContext, onboardingDelegate: any PECore.IOnboardingDelegate) -> UIKit.UIViewController
  @objc func addStepToMidLoginOnboardingWorkflow(step: PECore.MidLoginOnboardingStep)
  @objc func clearStepsInMidLoginOnboardingWorkflow()
  @objc func getMidLoginOnboardingWorkflow() -> [Swift.Int]
}
@objc public enum OnboardingType : Swift.Int, Swift.Codable {
  case preLoginOnboarding
  case midLoginOnboarding
  case homePageOnboarding
  case detailedPushNotificationOnboarding
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum PreLoginOnboardingStep : Swift.Int, Swift.Codable {
  case welcome = 0
  case notifications = 1
  case location = 2
  case orgSelect = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum MidLoginOnboardingStep : Swift.Int, Swift.Codable {
  case twoFactorEnrollment = 0
  case requiredPasswordReset = 1
  case orgTermsAndConditions = 2
  case secondaryLoginSetup = 3
  case homePageWelcome = 4
  case selfSubmittedPushNotificationsSetup = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSNotification.Name {
  public static let didFinishOnboardingNotification: Foundation.Notification.Name
}
public protocol PEObserver : AnyObject {
  func clearBindings()
}
extension PECore.PEObserver {
  public func clearBindings()
}
@_hasMissingDesignatedInitializers public class MathUtil {
  public static func degreesToRadians(_ degrees: CoreFoundation.CGFloat) -> CoreFoundation.CGFloat
  @objc deinit
}
@objc public protocol PEToDoComponentBridgingAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getQuestionnaireIDFromTask(withID taskID: Swift.String, atInstant taskInstant: Swift.String, andQuestionnaireIDs questionnaireIDs: [Swift.String], withSeriesID seriesID: Swift.String) -> Swift.String
  @objc func getMarkHealthAdvisoryCompleteViewController(forTopic topicID: Swift.String, named name: Swift.String, withStatusText statusText: Swift.String, andDetailText detailText: Swift.String, completionDelegate: (any PECore.PEHealthAdvisoryCompletionDelegate)?) -> UIKit.UIViewController?
}
@objc public protocol PEHealthAdvisoryCompletionDelegate {
  @objc func healthAdvisoryMarkedComplete(withCompletionDate completionDate: Foundation.Date)
}
extension Foundation.OperationQueue {
  convenience public init(maxNumberOfConcurrentThreads: Swift.Int)
}
@objc @_inheritsConvenienceInitializers open class MyChartWebViewControllerManager : ObjectiveC.NSObject, PECore.PERemoteOrganizationSupportProtocol {
  public enum MyChartWebWorkflowStep : Swift.String {
    case none
    case complete
    case completeAndClose
    public static func fromUrl(_ url: Foundation.URL?) -> PECore.MyChartWebViewControllerManager.MyChartWebWorkflowStep
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  open func getNotificationsToObserve() -> [Foundation.Notification]?
  open func onReceiveNotifications(_ viewController: PECore.MyChartWebViewController, notificationName: Swift.String)
  open func onWebViewDidClose(_ viewController: PECore.MyChartWebViewController)
  open func onMyChartRequestsClose(_ viewController: PECore.MyChartWebViewController)
  open func onMyChartError(_ viewController: PECore.MyChartWebViewController)
  open func onHttpError(_ viewController: PECore.MyChartWebViewController)
  open func onEpicHttpRequest(_ viewController: PECore.MyChartWebViewController, deepLink: any PECore.PEDeepLinkProtocol, forOrganization: PECore.PEOrganizationInfo?)
  open func shouldOverrideAllowedPageLoad(_ viewController: PECore.MyChartWebViewController, url: Foundation.URL, isMyChartWebsite: Swift.Bool) -> Swift.Bool
  open func shouldAllowNavigation(url: Foundation.URL) -> Swift.Bool
  open func onPageStarted(_ viewController: PECore.MyChartWebViewController, url: Foundation.URL)
  open func onPageFinished(_ viewController: PECore.MyChartWebViewController)
  open func onWebViewWillClose(_ viewController: PECore.MyChartWebViewController, callback: @escaping (() -> ()))
  open func onViewDidLoad(_ controller: PECore.MyChartWebViewController)
  open func onViewWillAppear(_ controller: PECore.MyChartWebViewController)
  open func onViewWillDisappear(_ controller: PECore.MyChartWebViewController)
  open func onViewDidAppear(_ controller: PECore.MyChartWebViewController)
  open func onViewDidDisappear(_ controller: PECore.MyChartWebViewController)
  open func onBackNavigationStarted(_ viewController: PECore.MyChartWebViewController)
  open func onFallbackToJumpToken(_ viewController: PECore.MyChartWebViewController)
  open func onWorkflowComplete(_ viewController: PECore.MyChartWebViewController)
  open func onWorkflowCompleteAndClose(_ viewController: PECore.MyChartWebViewController, launching deepLinkUrl: Swift.String? = nil)
  open func showLoadingView(_ viewController: PECore.MyChartWebViewController)
  open func hideLoadingView(_ viewController: PECore.MyChartWebViewController)
  open func allowLaunchOutsideApp() -> Swift.Bool
  open var supportsH2GLaunchContext: Swift.Bool {
    get
  }
  open var launchesH2GContextLocally: Swift.Bool {
    get
  }
  open var shouldSuppressOnboarding: Swift.Bool {
    get
  }
  open var shouldObserveRefreshNotification: Swift.Bool {
    get
  }
  open var alwaysBounceVertical: Swift.Bool {
    get
  }
  open func scrollViewWillBeginDragging()
  open func onWebViewStateChanged(_ viewController: PECore.MyChartWebViewController, stateMessage: Swift.String)
  open func setSearchBarInputValue(query: Swift.String)
  open func focusSearchBarInput()
  open func onEpicPxMobileIntegrationReady()
  open func onForcedLogout(_ viewController: PECore.MyChartWebViewController)
  @objc override dynamic public init()
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MyChartToggleSwitch : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(enabled: PECore.MyChartToggleState)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore19MyChartToggleSwitchV4bodyQrvp", 0) __
}
public class MyChartToggleState : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($enabled) public var enabled: Swift.Bool {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $enabled: Combine.Published<Swift.Bool>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public init(intialState: Swift.Bool, theme: any PECore.PEThemeProtocol)
  public func setNewState(newState: Swift.Bool)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct MyChartText : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var text: Foundation.AttributedString
  @_Concurrency.MainActor @preconcurrency public var fontRamp: PECore.FontRamp
  @_Concurrency.MainActor @preconcurrency public init(text: Swift.String, fontRamp: PECore.FontRamp = .body)
  @_Concurrency.MainActor @preconcurrency public init(segments: [PECore.MyChartTextSegment])
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore11MyChartTextV4bodyQrvp", 0) __
}
public struct MyChartTextSegment {
  public var text: Swift.String
  public var fontRamp: PECore.FontRamp
  public var attributes: [PECore.MyChartTextSegmentAttribute]
  public var overrideTextColor: UIKit.UIColor?
  public init(text: Swift.String, fontRamp: PECore.FontRamp, attributes: [PECore.MyChartTextSegmentAttribute] = [], overrideTextColor: UIKit.UIColor? = nil)
  public static func styleSubstringInText(text: Swift.String, substringToStyle: Swift.String, textStyle: PECore.MyChartTextSegment, substringStyle: PECore.MyChartTextSegment) -> [PECore.MyChartTextSegment]
}
public enum MyChartTextSegmentAttribute {
  case underline, bold
  public static func == (a: PECore.MyChartTextSegmentAttribute, b: PECore.MyChartTextSegmentAttribute) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class WebSessionWebServiceAPI {
  public static func getLoginToken(args: PECore.MyChartWebArgs, peOrganization: PECore.PEOrganizationInfo? = nil, useH2GMyChartFullSiteAccessToken: Swift.Bool = false, usePinchToZoomTokenType: Swift.Bool = false) -> PECore.WebService<PECore.GetLoginTokenResponse>?
  public static func getMyChartUrl(args: PECore.MyChartWebArgs) -> PECore.WebService<PECore.GetMyChartUrlResponse>?
  @objc deinit
}
@objc public protocol PEUtilMiscComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func getSetting(withName name: Swift.String) -> Swift.AnyObject?
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class FileViewController : SwiftUI.UIHostingController<SwiftUICore.AnyView> {
  @_Concurrency.MainActor @preconcurrency public init(fileURL: Foundation.URL, mimeType: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ToolTipManager : ObjectiveC.NSObject {
  final public let toolTipsEnabled: [Swift.String]
  @objc override dynamic public init()
  public class func getToolTipsEnabled() -> [Swift.String]
  @objc public class func setUpToolTips(_ viewController: UIKit.UIViewController)
  @objc deinit
}
public protocol ToolTip {
  func getToolView() -> PECore.ToolTipView
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class ToolTipView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor @preconcurrency public func handleTap(_ sender: UIKit.UIPanGestureRecognizer)
  @objc deinit
}
@objc public protocol PEMyDocumentsComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForMyDocuments(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getMyDocumentsViewController(_ patientContext: PECore.PEPatientContext) -> PECore.MyChartWebViewController?
  @objc func getInpatientMyDocumentsViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?, isBedsideMode: Swift.Bool) -> PECore.MyChartWebViewController?
}
@objc @_Concurrency.MainActor public class CoreWebViewDownloadManager : ObjectiveC.NSObject, WebKit.WKDownloadDelegate {
  public struct DownloadResult {
    public let url: Foundation.URL
    public let mimeType: Swift.String
  }
  @_Concurrency.MainActor public init(onDownloadComplete: @escaping (Swift.Result<PECore.CoreWebViewDownloadManager.DownloadResult, any Swift.Error>) -> Swift.Void)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency @objc public func download(_ download: WebKit.WKDownload, decideDestinationUsing response: Foundation.URLResponse, suggestedFilename: Swift.String) async -> Foundation.URL?
  @_Concurrency.MainActor @preconcurrency @objc public func download(_ download: WebKit.WKDownload, didFailWithError error: any Swift.Error, resumeData: Foundation.Data?)
  @_Concurrency.MainActor @preconcurrency @objc public func downloadDidFinish(_ download: WebKit.WKDownload)
}
@objc public protocol PEFriendsAndFamilyUpdatesComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForFriendsAndFamilyUpdates(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getFriendsAndFamilyUpdatesViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?, buttonStyle: PECore.MyChartWebViewController.ButtonStyle) -> UIKit.UIViewController?
}
extension PECore.CoreWebView {
  @_Concurrency.MainActor @preconcurrency public static func isFrameLoadInterruptedError(_ error: any Swift.Error) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc public class ValidateUtil : ObjectiveC.NSObject {
  @objc public static func isValidEmail(_ email: Swift.String?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
public enum ControlType : Swift.String, Swift.CaseIterable {
  case button
  case link
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PECore.ControlType]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [PECore.ControlType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct LossyCodableArray<E> : Swift.Codable where E : Swift.Decodable, E : Swift.Encodable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension PECore.LossyCodableArray : Swift.Collection {
  public typealias Index = Swift.Int
  public typealias Element = E
  public var startIndex: PECore.LossyCodableArray<E>.Index {
    get
  }
  public var endIndex: PECore.LossyCodableArray<E>.Index {
    get
  }
  public subscript(index: PECore.LossyCodableArray<E>.Index) -> PECore.LossyCodableArray<E>.Element {
    get
    set(newValue)
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Indices = Swift.DefaultIndices<PECore.LossyCodableArray<E>>
  public typealias Iterator = Swift.IndexingIterator<PECore.LossyCodableArray<E>>
  public typealias SubSequence = Swift.Slice<PECore.LossyCodableArray<E>>
}
@objc @_Concurrency.MainActor @preconcurrency public class ProgressArcView : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var baseColor: UIKit.UIColor!
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var progressColor: UIKit.UIColor!
  @_Concurrency.MainActor @preconcurrency public func update(withProgress progress: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class PeekUICollectionView : UIKit.UICollectionView {
  @_Concurrency.MainActor @preconcurrency public static let layoutSubviewsNotification: Foundation.NSNotification.Name
  @_Concurrency.MainActor @preconcurrency weak public var pageDelegate: (any PECore.PageControlChangeProtocol)?
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, pageControl: UIKit.UIPageControl)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func reloadData()
  @_Concurrency.MainActor @preconcurrency public func performAccessibilityScroll(_ direction: UIKit.UIAccessibilityScrollDirection) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency public func setData(newData: [any PECore.PeekUIDataElement])
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @_Concurrency.MainActor public func scrollToItemAsync(at indexPath: Foundation.IndexPath, at scrollPosition: UIKit.UICollectionView.ScrollPosition) async
  @_Concurrency.MainActor @preconcurrency @objc public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
public protocol PageControlChangeProtocol : AnyObject {
  func onPageChanged(pageNumber: Swift.Int, fromUserInitiated: Swift.Bool)
}
public protocol PeekUIDataElement {
  func dequeueReusableCell(collectionView: UIKit.UICollectionView, for indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension PECore.PeekUICollectionView : UIKit.UICollectionViewDataSource {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension PECore.PeekUICollectionView : UIKit.UICollectionViewDelegateFlowLayout {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreFoundation.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreFoundation.CGPoint>)
}
@_inheritsConvenienceInitializers @objc public class DateUtil : ObjectiveC.NSObject {
  @objc public enum DateFormatStyle : Swift.Int {
    case shortHour
    case shortHoursMinutes
    case shortMonthDateYear
    case shortMonthDateYearHoursMinutes
    case mediumMonthDate
    case mediumMonthDateYear
    case mediumMonthDateYearHoursMinutes
    case longMonthDate
    case longDayMonthDate
    case longMonthDateYear
    case day
    case serverDate
    case serverDateTime
    case serverDateTimeWithTimeZone
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  public static func isToday(_ date: Foundation.Date) -> Swift.Bool
  public static func isYesterday(_ date: Foundation.Date) -> Swift.Bool
  public static func isTomorrow(_ date: Foundation.Date) -> Swift.Bool
  public static func getToday() -> Foundation.Date
  public static func getDayMonthYear(fromDate date: Foundation.Date) -> Foundation.Date
  public static func getUTCTimeZoneCalendar() -> Foundation.Calendar
  public static func getUTCTimeZone() -> Foundation.TimeZone
  public static func dayDifferenceFromToday(to date: Foundation.Date) -> Swift.Int?
  public static func getDateString(fromDate date: Foundation.Date?) -> Swift.String
  @objc public static func getDateString(fromDate date: Foundation.Date?, dateStyle style: PECore.DateUtil.DateFormatStyle) -> Swift.String
  @objc public static func getDateString(fromDate date: Foundation.Date?, dateStyle style: PECore.DateUtil.DateFormatStyle, timeZone: Foundation.TimeZone? = nil) -> Swift.String
  @objc public static func getDateString(fromDate date: Foundation.Date, dateStyle style: PECore.DateUtil.DateFormatStyle, timeZone: Foundation.TimeZone? = nil, locale: Foundation.Locale) -> Swift.String
  @objc public static func getDate(fromString dateString: Swift.String?, dateStyle style: PECore.DateUtil.DateFormatStyle) -> Foundation.Date?
  public static func getTimeString(fromDate date: Foundation.Date?) -> Swift.String
  public static func getDaysSinceDate(_ pastDate: Foundation.Date) -> Swift.Int
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc public class UserAgentProvider : ObjectiveC.NSObject {
  @objc public var epicVersion: Swift.String {
    get
  }
  @objc public static var epicVersion: Swift.String {
    @objc get
  }
  public var userAgentPrefix: Swift.String {
    get
    set
  }
  @objc public static var instance: PECore.UserAgentProvider!
  public func getUserAgentString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class PETutorialUIModel : ObjectiveC.NSObject, Swift.Codable {
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class PrintUtil : ObjectiveC.NSObject {
  @objc public static func printWebView(webView: WebKit.WKWebView, jobName: Swift.String)
  @objc public static func displayPrintErrorToast()
  @objc public static func userHasAccessToPrinting(user: any PECore.PEUserProtocol) -> Swift.Bool
  @objc public static func getNavBarPrintMenuActions(webView: WebKit.WKWebView, printJobName: Swift.String) -> [UIKit.UIAlertAction]
  @objc public static func shouldShowPrintOnboarding() -> Swift.Bool
  @objc public static func setPrintOnboardingSeen()
  @objc public static func presentPrintOnboardingIfNeeded(presentingVC: UIKit.UIViewController, userContext: PECore.PEUserContext)
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebSessionManagerToolTip : PECore.ToolTip {
  public func getToolView() -> PECore.ToolTipView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class WebSessionManagerToolTipView : PECore.ToolTipView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
  @objc @_Concurrency.MainActor @preconcurrency public func pressedClearCookies(sender: UIKit.UIButton!)
  @objc @_Concurrency.MainActor @preconcurrency public func pressedClearManager(sender: UIKit.UIButton!)
  @objc @_Concurrency.MainActor @preconcurrency public func pressedFastKeepAlive(sender: UIKit.UIButton!)
  @objc @_Concurrency.MainActor @preconcurrency public func pressedNoCacheURLS(sender: UIKit.UIButton!)
  @objc @_Concurrency.MainActor @preconcurrency public func pressedClearLogoutRequest(sender: UIKit.UIButton!)
}
@objc public protocol MyChartJavascriptProtocol {
  @objc func onJavascriptRequestsClose()
  @objc func resetIdleTimer()
  @objc func disableCloseButton()
  @objc func reenableCloseButton()
  @objc func setWebViewTitle(newTitle: Swift.String)
  @objc func locationHandler()
  @objc func setWebViewStateChanged(stateMessage: Swift.String)
  @objc func setSearchBarInputValue(query: Swift.String)
  @objc func focusSearchBarInput()
  @objc func onEpicPxMobileIntegrationReady()
}
@objc public class MyChartJavascriptManager : ObjectiveC.NSObject {
  public static let jsMessageCloseWindow: Swift.String
  public static let jsMessageWebViewIsActive: Swift.String
  public static let jsMessageDisplayToast: Swift.String
  public static let jsMessageDisableCloseButton: Swift.String
  public static let jsMessageReenableCloseButton: Swift.String
  public static let jsMessageSetWebViewTitle: Swift.String
  public static let jsMessageLocationHandler: Swift.String
  public static let jsMessageCheckDigitalWalletSupport: Swift.String
  public static let jsMessageSetWebViewStateChanged: Swift.String
  public static let jsMessageSetSearchBarInputValue: Swift.String
  public static let jsMessageFocusSearchBarInput: Swift.String
  public static let jsMessageOnEpicPxMobileIntegrationReady: Swift.String
  public static let jsMessageWebViewDownloadEnabled: Swift.String
  public static let jsGetCurrentLocation: Swift.String
  public typealias boolCallback = (Swift.Bool) -> ()
  public typealias stringCallback = (Swift.String) -> ()
  public init(webView: WebKit.WKWebView, delegate: any PECore.MyChartJavascriptProtocol)
  public func locationHandler()
  public func checkIfConnectedToVideoCall(callBack: @escaping (Swift.String?) -> ())
  public func updateLocation(location: CoreLocation.CLLocation)
  public func declineLocationPermissions()
  public func runJavascript(javascript: Swift.String, callback: ((Swift.String?) -> ())?)
  @objc deinit
}
@objc public class Region : ObjectiveC.NSObject {
  @objc public var code: Swift.String
  public init(_ code: Swift.String)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  public static func == (left: PECore.Region, right: PECore.Region) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc public static let Unspecified: PECore.Region
  @objc public static let Australia: PECore.Region
  @objc public static let Belgium: PECore.Region
  @objc public static let Brazil: PECore.Region
  @objc public static let Canada: PECore.Region
  @objc public static let China: PECore.Region
  @objc public static let Denmark: PECore.Region
  @objc public static let Finland: PECore.Region
  @objc public static let France: PECore.Region
  @objc public static let Germany: PECore.Region
  @objc public static let Ireland: PECore.Region
  @objc public static let Lebanon: PECore.Region
  @objc public static let Netherlands: PECore.Region
  @objc public static let Norway: PECore.Region
  @objc public static let SaudiArabia: PECore.Region
  @objc public static let Singapore: PECore.Region
  @objc public static let Sweden: PECore.Region
  @objc public static let Switzerland: PECore.Region
  @objc public static let UnitedArabEmirates: PECore.Region
  @objc public static let UnitedKingdom: PECore.Region
  @objc public static let UnitedStates: PECore.Region
  @objc public static let Russia: PECore.Region
  @objc public static let Epic: PECore.Region
  @objc deinit
}
public enum RegionCodes : Swift.String {
  case UnitedArabEmirates
  case Australia
  case Belgium
  case Brazil
  case Canada
  case Switzerland
  case China
  case Germany
  case Denmark
  case Finland
  case France
  case UnitedKingdom
  case Ireland
  case Lebanon
  case Netherlands
  case Norway
  case SaudiArabia
  case Sweden
  case Singapore
  case UnitedStates
  case Russia
  case Epic
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public class GetExtensibleLinkResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc public var url: Swift.String?
  @objc public var launchMode: PECore.LaunchMode
  @objc public var allowedHosts: [Swift.String]
  @objc public var appStoreUrl: Swift.String?
  @objc public var isWebRTC: Swift.Bool {
    @objc get
  }
  public func isHostInAllowedlist() -> Swift.Bool
  public func launchType() -> PECore.ExtensibilityLaunchType
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc public enum LaunchMode : Swift.Int, Swift.Codable {
  case launchInternal = 1
  case launchExternal = 2
  case launchExternalTab = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PECore.LaunchMode {
  public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class PETutorialStepUIModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public protocol ProgressBarProtocol : AnyObject {
  func progressBarIsFull()
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class ProgressBar : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency weak public var delegate: (any PECore.ProgressBarProtocol)?
  @_Concurrency.MainActor @preconcurrency public static func make() -> PECore.ProgressBar?
  @_Concurrency.MainActor @preconcurrency public func addToView(_ view: UIKit.UIView)
  @_Concurrency.MainActor @preconcurrency public func setBackgroundBarColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setCompletionBarColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func setEmptyBarColor(_ color: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency public func reset()
  @_Concurrency.MainActor @preconcurrency public func setCompletionPercentage(_ completionPercentage: CoreFoundation.CGFloat)
  @_Concurrency.MainActor @preconcurrency public func animate()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc public enum ApplicationType : Swift.Int {
  case MyChart
  case Bedisde
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public protocol IPECacheableImageViewDelegate : AnyObject {
  func imageDidChange(_ newImage: UIKit.UIImage?)
}
@objc public protocol PEInfectionControlComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForCovidStatus(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForPreloginCovidStatus(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func getCovidStatusController(_ patientContext: PECore.PEPatientContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc func getCovidStatusViewModel(_ patientContext: PECore.PEPatientContext, successHandler: @escaping (ObjectiveC.NSObject) -> Swift.Void, failureHandler: @escaping (PECore.WebServiceFailedError) -> Swift.Void) -> ObjectiveC.NSObject?
  @objc func getPreloginCovidStatusWidget(_ phonebookEntry: any PECore.PEPhonebookEntryProtocol, defaultTheme: any PECore.PEThemeProtocol, presentingViewController: UIKit.UIViewController?, existingLiveModel: PECore.PELiveModel?) -> UIKit.UIView?
  @objc func getCovidPreloginOnboardingController(_ patientContext: PECore.PEPatientContext, _ onboardingDelegate: any PECore.IOnboardingDelegate) -> UIKit.UIViewController?
}
public struct RawDataResponse : Swift.Decodable {
  public var rawData: Foundation.NSData?
  public init(from decoder: any Swift.Decoder) throws
}
public class LocalImageDataSource : PECore.ImageDataSource {
  @objc public var imageURL: Swift.String
  public init(localImage: UIKit.UIImage?)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct ClipHeaderImageView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public init(headerImageKey: Swift.String, bundle: Foundation.Bundle, landscape: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s6PECore19ClipHeaderImageViewV4bodyQrvp", 0) __
}
@_hasMissingDesignatedInitializers public class ThemeAssets : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public enum ButtonPriority : Swift.String, Swift.CaseIterable {
  case primary
  case secondary
  case tertiary
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PECore.ButtonPriority]
  public typealias RawValue = Swift.String
  nonisolated public static var allCases: [PECore.ButtonPriority] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency public class MyChartUserContentController : WebKit.WKUserContentController {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func add(_ scriptMessageHandler: any WebKit.WKScriptMessageHandler, name: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func addScriptMessageHandler(_ scriptMessageHandlerWithReply: any WebKit.WKScriptMessageHandlerWithReply, contentWorld: WebKit.WKContentWorld, name: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init()
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class ReportableIssue : ObjectiveC.NSObject {
  public var orgID: Swift.String {
    get
  }
  public var orgName: Swift.String {
    get
  }
  final public let deviceModel: Swift.String
  public var osVersion: Swift.String {
    get
  }
  public var appVersion: Swift.String {
    get
  }
  public var appID: Swift.String {
    get
  }
  public var url: Swift.String {
    get
  }
  public var statusCode: Swift.Int {
    get
  }
  @objc override dynamic public init()
  convenience public init(phonebookEntry: (any PECore.PEPhonebookEntryProtocol)?)
  convenience public init(phonebookEntry: any PECore.PEPhonebookEntryProtocol, error: PECore.WebServiceFailedError)
  convenience public init(error: PECore.WebServiceFailedError)
  public func prepareAndSend()
  public static func getHeader(localize: Swift.Bool = false) -> Swift.String
  public func toString(localize: Swift.Bool = false) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LocalesToolTip : PECore.ToolTip {
  public func getToolView() -> PECore.ToolTipView
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class LocalesToolTipView : PECore.ToolTipView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @objc deinit
}
@objc public protocol PEProblemListComponentAPIProtocol : PECore.PEComponentAPIProtocol {
  @objc func hasAccessForOutpatientProblemList(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc func hasAccessForEncounterSpecificProblemList(_ encounterContext: PECore.PEEncounterContext) -> PECore.PEComponentAccessResult
  @objc func getProblemListViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
}
@objc public enum PERequestFormat : Swift.Int {
  case defaultForCategory
  case get
  case jsonPost
  case jsonGet
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension PECore.FontWeight : Swift.Equatable {}
extension PECore.FontWeight : Swift.Hashable {}
extension PECore.FontWeight : Swift.RawRepresentable {}
extension PECore.FontRamp : Swift.Equatable {}
extension PECore.FontRamp : Swift.Hashable {}
extension PECore.FontRamp : Swift.RawRepresentable {}
extension PECore.AuditUtil.E1MEntryType : Swift.Equatable {}
extension PECore.AuditUtil.E1MEntryType : Swift.Hashable {}
extension PECore.AuditUtil.E1MEntryType : Swift.RawRepresentable {}
extension PECore.AuditUtil.FeatureTrackingMetric : Swift.Equatable {}
extension PECore.AuditUtil.FeatureTrackingMetric : Swift.Hashable {}
extension PECore.AuditUtil.FeatureTrackingMetric : Swift.RawRepresentable {}
extension PECore.PEComponentRequestControllerErrorCode : Swift.Equatable {}
extension PECore.PEComponentRequestControllerErrorCode : Swift.Hashable {}
extension PECore.PEComponentRequestControllerErrorCode : Swift.RawRepresentable {}
extension PECore.PEDeepLinkParam : Swift.Equatable {}
extension PECore.PEDeepLinkParam : Swift.Hashable {}
extension PECore.CommunityUpdateContext : Swift.Equatable {}
extension PECore.CommunityUpdateContext : Swift.Hashable {}
extension PECore.CommunityUpdateContext : Swift.RawRepresentable {}
extension PECore.CenteredMessageTextViewStyle : Swift.Equatable {}
extension PECore.CenteredMessageTextViewStyle : Swift.Hashable {}
extension PECore.CenteredMessageTextViewStyle : Swift.RawRepresentable {}
extension PECore.PEComponentAPIKey : Swift.Equatable {}
extension PECore.PEComponentAPIKey : Swift.Hashable {}
extension PECore.PEComponentAPIKey : Swift.RawRepresentable {}
extension PECore.PEAlertType : Swift.Equatable {}
extension PECore.PEAlertType : Swift.Hashable {}
extension PECore.PEAlertType : Swift.RawRepresentable {}
extension PECore.PEMyChartNowSwitcherContext : Swift.Equatable {}
extension PECore.PEMyChartNowSwitcherContext : Swift.Hashable {}
extension PECore.PEMyChartNowSwitcherContext : Swift.RawRepresentable {}
extension PECore.PEMyChartNowSharedAnimationElementViewTag : Swift.Equatable {}
extension PECore.PEMyChartNowSharedAnimationElementViewTag : Swift.Hashable {}
extension PECore.PEMyChartNowSharedAnimationElementViewTag : Swift.RawRepresentable {}
extension PECore.UnreadIndicatorView.UnreadIndicatorStyle : Swift.Equatable {}
extension PECore.UnreadIndicatorView.UnreadIndicatorStyle : Swift.Hashable {}
extension PECore.UnreadIndicatorView.UnreadIndicatorStyle : Swift.RawRepresentable {}
extension PECore.MyChartSecureTextField : Swift.Sendable {}
extension PECore.BiometricAuthenticationType : Swift.Equatable {}
extension PECore.BiometricAuthenticationType : Swift.Hashable {}
extension PECore.BiometricAuthenticationType : Swift.RawRepresentable {}
extension PECore.ExtensibilityLaunchType : Swift.Equatable {}
extension PECore.ExtensibilityLaunchType : Swift.Hashable {}
extension PECore.MimeType : Swift.Equatable {}
extension PECore.MimeType : Swift.Hashable {}
extension PECore.MimeType : Swift.RawRepresentable {}
extension PECore.BasicBodyView : Swift.Sendable {}
extension PECore.PEChangeObservable : PECore.PEObservable {}
extension PECore.FileView : Swift.Sendable {}
extension PECore.RestrictedAccessTokenType : Swift.Equatable {}
extension PECore.RestrictedAccessTokenType : Swift.Hashable {}
extension PECore.RestrictedAccessTokenType : Swift.RawRepresentable {}
extension PECore.PEAuthType : Swift.Equatable {}
extension PECore.PEAuthType : Swift.Hashable {}
extension PECore.MyChartTabView : Swift.Sendable {}
extension PECore.FileType : Swift.Equatable {}
extension PECore.FileType : Swift.Hashable {}
extension PECore.PEEventObservable : PECore.PEObservable {}
extension PECore.FileUtil.FileType : Swift.Equatable {}
extension PECore.FileUtil.FileType : Swift.Hashable {}
extension PECore.FileUtil.FileType : Swift.RawRepresentable {}
extension PECore.PEImageDataSource.AssetType : Swift.Equatable {}
extension PECore.PEImageDataSource.AssetType : Swift.Hashable {}
extension PECore.TokenType : Swift.Equatable {}
extension PECore.TokenType : Swift.Hashable {}
extension PECore.TokenType : Swift.RawRepresentable {}
extension PECore.CoreButtonView : Swift.Sendable {}
extension PECore.PersonSwiftUIImageView : Swift.Sendable {}
extension PECore.PEEducationButtonStyle : Swift.Equatable {}
extension PECore.PEEducationButtonStyle : Swift.Hashable {}
extension PECore.PEEducationButtonStyle : Swift.RawRepresentable {}
extension PECore.PEEducationPointCompletedStatus : Swift.Equatable {}
extension PECore.PEEducationPointCompletedStatus : Swift.Hashable {}
extension PECore.PEEducationPointCompletedStatus : Swift.RawRepresentable {}
extension PECore.TextAlignment : Swift.Equatable {}
extension PECore.TextAlignment : Swift.Hashable {}
extension PECore.TextAlignment : Swift.RawRepresentable {}
extension PECore.LanguageCodes : Swift.Equatable {}
extension PECore.LanguageCodes : Swift.Hashable {}
extension PECore.LanguageCodes : Swift.RawRepresentable {}
extension PECore.PEArrayObservable : PECore.PEObservable {}
extension PECore.ButtonStyle : Swift.Equatable {}
extension PECore.ButtonStyle : Swift.Hashable {}
extension PECore.NavigationType : Swift.Equatable {}
extension PECore.NavigationType : Swift.Hashable {}
extension PECore.NavigationType : Swift.RawRepresentable {}
extension PECore.WebServiceErrorType : Swift.Equatable {}
extension PECore.WebServiceErrorType : Swift.Hashable {}
extension PECore.WebServiceErrorType : Swift.RawRepresentable {}
extension PECore.PEEventInfoObservable : PECore.PEObservable {}
extension PECore.CommunityDataRefreshView.CommunityDataRefreshStatus : Swift.Equatable {}
extension PECore.CommunityDataRefreshView.CommunityDataRefreshStatus : Swift.Hashable {}
extension PECore.CommunityDataRefreshView.CommunityDataRefreshStatus : Swift.RawRepresentable {}
extension PECore.UrlType : Swift.Equatable {}
extension PECore.UrlType : Swift.Hashable {}
extension PECore.UrlType : Swift.RawRepresentable {}
extension PECore.Toast.ToastDuration : Swift.Equatable {}
extension PECore.Toast.ToastDuration : Swift.Hashable {}
extension PECore.PEBillingMode : Swift.Equatable {}
extension PECore.PEBillingMode : Swift.Hashable {}
extension PECore.PEBillingMode : Swift.RawRepresentable {}
extension PECore.PEEstimatesMode : Swift.Equatable {}
extension PECore.PEEstimatesMode : Swift.Hashable {}
extension PECore.PEEstimatesMode : Swift.RawRepresentable {}
extension PECore.CoreButton.ButtonType : Swift.Equatable {}
extension PECore.CoreButton.ButtonType : Swift.Hashable {}
extension PECore.CoreButton.ButtonType : Swift.RawRepresentable {}
extension PECore.MyChartTextField : Swift.Sendable {}
extension PECore.Validator : Swift.Equatable {}
extension PECore.Validator : Swift.Hashable {}
extension PECore.HomepageOverlayType : Swift.Equatable {}
extension PECore.HomepageOverlayType : Swift.Hashable {}
extension PECore.HomepageOverlayType : Swift.RawRepresentable {}
extension PECore.OrgSource : Swift.Equatable {}
extension PECore.OrgSource : Swift.Hashable {}
extension PECore.PELiveModel.LoadingStatus : Swift.Equatable {}
extension PECore.PELiveModel.LoadingStatus : Swift.Hashable {}
extension PECore.InlineEducationType : Swift.Equatable {}
extension PECore.InlineEducationType : Swift.Hashable {}
extension PECore.InlineEducationType : Swift.RawRepresentable {}
extension PECore.PESupportedFeature : Swift.Equatable {}
extension PECore.PESupportedFeature : Swift.Hashable {}
extension PECore.PESupportedFeature : Swift.RawRepresentable {}
extension PECore.BasicHeaderImageView : Swift.Sendable {}
extension PECore.MyChartNamespaceEnum : Swift.Equatable {}
extension PECore.MyChartNamespaceEnum : Swift.Hashable {}
extension PECore.MyChartNamespaceEnum : Swift.RawRepresentable {}
extension PECore.PEOrganizationCustomString : Swift.Equatable {}
extension PECore.PEOrganizationCustomString : Swift.Hashable {}
extension PECore.PEOrganizationCustomString : Swift.RawRepresentable {}
extension PECore.ButtonOrientation : Swift.Equatable {}
extension PECore.ButtonOrientation : Swift.Hashable {}
extension PECore.ButtonOrientation : Swift.RawRepresentable {}
extension PECore.PEBrandedColor : Swift.Equatable {}
extension PECore.PEBrandedColor : Swift.Hashable {}
extension PECore.PEBrandedColor : Swift.RawRepresentable {}
extension PECore.CoreShareSheet : Swift.Sendable {}
extension PECore.CoreWebView : Swift.Sendable {}
extension PECore.MyChartRadioButton : Swift.Sendable {}
extension PECore.CardView.CardType : Swift.Equatable {}
extension PECore.CardView.CardType : Swift.Hashable {}
extension PECore.CardView.CardType : Swift.RawRepresentable {}
extension PECore.PEDeepLinkFeatureIdentifier : Swift.Equatable {}
extension PECore.PEDeepLinkFeatureIdentifier : Swift.Hashable {}
extension PECore.PEDeepLinkFeatureIdentifier : Swift.RawRepresentable {}
extension PECore.CapturedWorkflowView : Swift.Sendable {}
extension PECore.ProgressDot : Swift.Sendable {}
extension PECore.MyChartCard : Swift.Sendable {}
extension PECore.PEComponentAccessResult : Swift.Equatable {}
extension PECore.PEComponentAccessResult : Swift.Hashable {}
extension PECore.PEComponentAccessResult : Swift.RawRepresentable {}
extension PECore.FeatureLoadStatus : Swift.Equatable {}
extension PECore.FeatureLoadStatus : Swift.Hashable {}
extension PECore.FeatureLoadStatus : Swift.RawRepresentable {}
extension PECore.IDType : Swift.Equatable {}
extension PECore.IDType : Swift.Hashable {}
extension PECore.IDType : Swift.RawRepresentable {}
extension PECore.MyChartWebViewController.ButtonStyle : Swift.Equatable {}
extension PECore.MyChartWebViewController.ButtonStyle : Swift.Hashable {}
extension PECore.MyChartWebViewController.ButtonStyle : Swift.RawRepresentable {}
extension PECore.BasicButtonView : Swift.Sendable {}
extension PECore.ExternalOrganizationLinkType : Swift.Equatable {}
extension PECore.ExternalOrganizationLinkType : Swift.Hashable {}
extension PECore.ExternalOrganizationLinkType : Swift.RawRepresentable {}
extension PECore.PEResponseFormat : Swift.Equatable {}
extension PECore.PEResponseFormat : Swift.Hashable {}
extension PECore.PEResponseFormat : Swift.RawRepresentable {}
extension PECore.PEAppleWatchState : Swift.Equatable {}
extension PECore.PEAppleWatchState : Swift.Hashable {}
extension PECore.PEAppleWatchState : Swift.RawRepresentable {}
extension PECore.ButtonTone : Swift.Equatable {}
extension PECore.ButtonTone : Swift.Hashable {}
extension PECore.ButtonTone : Swift.RawRepresentable {}
extension PECore.OnboardingType : Swift.Equatable {}
extension PECore.OnboardingType : Swift.Hashable {}
extension PECore.OnboardingType : Swift.RawRepresentable {}
extension PECore.PreLoginOnboardingStep : Swift.Equatable {}
extension PECore.PreLoginOnboardingStep : Swift.Hashable {}
extension PECore.PreLoginOnboardingStep : Swift.RawRepresentable {}
extension PECore.MidLoginOnboardingStep : Swift.Equatable {}
extension PECore.MidLoginOnboardingStep : Swift.Hashable {}
extension PECore.MidLoginOnboardingStep : Swift.RawRepresentable {}
extension PECore.MyChartWebViewControllerManager.MyChartWebWorkflowStep : Swift.Equatable {}
extension PECore.MyChartWebViewControllerManager.MyChartWebWorkflowStep : Swift.Hashable {}
extension PECore.MyChartWebViewControllerManager.MyChartWebWorkflowStep : Swift.RawRepresentable {}
extension PECore.MyChartToggleSwitch : Swift.Sendable {}
extension PECore.MyChartText : Swift.Sendable {}
extension PECore.MyChartTextSegmentAttribute : Swift.Equatable {}
extension PECore.MyChartTextSegmentAttribute : Swift.Hashable {}
extension PECore.CoreWebViewDownloadManager : Swift.Sendable {}
extension PECore.ControlType : Swift.Equatable {}
extension PECore.ControlType : Swift.Hashable {}
extension PECore.ControlType : Swift.RawRepresentable {}
extension PECore.DateUtil.DateFormatStyle : Swift.Equatable {}
extension PECore.DateUtil.DateFormatStyle : Swift.Hashable {}
extension PECore.DateUtil.DateFormatStyle : Swift.RawRepresentable {}
extension PECore.RegionCodes : Swift.Equatable {}
extension PECore.RegionCodes : Swift.Hashable {}
extension PECore.RegionCodes : Swift.RawRepresentable {}
extension PECore.LaunchMode : Swift.Equatable {}
extension PECore.LaunchMode : Swift.Hashable {}
extension PECore.LaunchMode : Swift.RawRepresentable {}
extension PECore.ApplicationType : Swift.Equatable {}
extension PECore.ApplicationType : Swift.Hashable {}
extension PECore.ApplicationType : Swift.RawRepresentable {}
extension PECore.ClipHeaderImageView : Swift.Sendable {}
extension PECore.ButtonPriority : Swift.Equatable {}
extension PECore.ButtonPriority : Swift.Hashable {}
extension PECore.ButtonPriority : Swift.RawRepresentable {}
extension PECore.PERequestFormat : Swift.Equatable {}
extension PECore.PERequestFormat : Swift.Hashable {}
extension PECore.PERequestFormat : Swift.RawRepresentable {}
