// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target x86_64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Education
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import DeveloperToolsSupport
@_exported import Education
import Foundation
import PECore
import SafariServices
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class EducationWebViewControllerManager : PECore.MyChartWebViewControllerManager {
  public init(delegate: (any PECore.PEEducationPointCompletionDelegate)?, shouldLaunchMedicalAdviceMessageComposer launchComposer: Swift.Bool, educationName name: Swift.String, patientContext context: PECore.PEPatientContext, componentHost host: (any PECore.PEComponentHostProtocol)?)
  override public func shouldOverrideAllowedPageLoad(_ viewController: PECore.MyChartWebViewController, url: Foundation.URL, isMyChartWebsite: Swift.Bool) -> Swift.Bool
  override public func onViewWillAppear(_ controller: PECore.MyChartWebViewController)
  override public func onViewWillDisappear(_ controller: PECore.MyChartWebViewController)
  override public func onViewDidAppear(_ controller: PECore.MyChartWebViewController)
  override public func getNotificationsToObserve() -> [Foundation.Notification]?
  override public func onReceiveNotifications(_ viewController: PECore.MyChartWebViewController, notificationName: Swift.String)
  override public func onPageFinished(_ viewController: PECore.MyChartWebViewController)
  @objc deinit
}
@objc public enum EducationStatus : Swift.Int, Swift.Codable {
  case Unread = 0
  case Read = 1
  case Done = 2
  case Hidden = 3
  case Question = 4
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PEEducationComponentAPI : ObjectiveC.NSObject, PECore.PEEducationComponentAPIProtocol {
  public static let UnreadColor: UIKit.UIColor
  @objc public func getInpatientEducationTitlesViewController(_ encounterContext: PECore.PEEncounterContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc public func getOutpatientEducationTitlesViewController(_ patientContext: PECore.PEPatientContext, viewControllerTitle: Swift.String?) -> UIKit.UIViewController?
  @objc public func hasAccessForInpatientEducation(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc public func hasAccessForOutpatientEducation(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc public func hasAccessForEducationPoint(_ patientContext: PECore.PEPatientContext) -> PECore.PEComponentAccessResult
  @objc public func getEducationPointViewController(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext, pointID: Swift.String, educationTitle: Swift.String, completionDelegate: (any PECore.PEEducationPointCompletionDelegate)?, shouldLaunchMedicalAdviceMessageComposer: Swift.Bool, buttonStyle: PECore.PEEducationButtonStyle, pointStatus: Foundation.NSNumber?, educationKey: Swift.String, componentHost: (any PECore.PEComponentHostProtocol)?, taskID: Swift.String? = "", taskInstant: Swift.String? = "") -> PECore.MyChartWebViewController?
  @objc public func getEducationTOCViewController(userContext: PECore.PEUserContext, patientContext: PECore.PEPatientContext, titleId: Swift.String, activityTitle: Swift.String) -> PECore.MyChartWebViewController?
  @objc public func getEducationWebViewController(patientContext: PECore.PEPatientContext, activityTitle: Swift.String) -> UIKit.UIViewController?
  @objc override dynamic public init()
  @objc deinit
}
extension Education.EducationStatus : Swift.Equatable {}
extension Education.EducationStatus : Swift.Hashable {}
extension Education.EducationStatus : Swift.RawRepresentable {}
