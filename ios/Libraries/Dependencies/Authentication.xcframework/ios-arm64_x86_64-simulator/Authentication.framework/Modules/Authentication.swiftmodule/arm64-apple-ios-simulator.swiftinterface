// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios16.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name Authentication
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
@_exported import Authentication
import Combine
import DeveloperToolsSupport
import Foundation
import LocalAuthentication
import PECore
import SafariServices
import Swift
import SwiftUI
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_inheritsConvenienceInitializers @objc public class TwoFactorOptInWebViewControllerManager : PECore.MyChartWebViewControllerManager {
  override public func onBackNavigationStarted(_ viewController: PECore.MyChartWebViewController)
  override public func onWebViewWillClose(_ viewController: PECore.MyChartWebViewController, callback: @escaping (() -> ()))
  override public func onForcedLogout(_ viewController: PECore.MyChartWebViewController)
  override public var supportsH2GLaunchContext: Swift.Bool {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class AccessInformation : ObjectiveC.NSObject, Swift.Codable {
  public var enabledFeatures: [Swift.String]
  public var disabledFeatures: [Swift.String]
  @objc final public let allowRxRefill: Swift.Bool
  @objc public func featureEnabled(for featureString: Swift.String) -> Swift.Bool
  @objc public func featureDisabled(for featureString: Swift.String) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
public struct LoginWorkflowData {
  public enum Workflow {
    case standard
    case preLoginDeepLink
    case orgselect
    case orgselectInternal
    case authTokenLogin(username: Swift.String?, token: Swift.String)
    case oAuthTokenLogin(token: Swift.String)
    case signUp
  }
  public init(orgId: Swift.String, workflow: Authentication.LoginWorkflowData.Workflow)
}
@objc @_inheritsConvenienceInitializers @objcMembers open class MyChartPerson : ObjectiveC.NSObject, PECore.PEPersonProtocol, Swift.Codable {
  @objc open var photo: UIKit.UIImage?
  @objc open var accountId: Swift.String
  @objc open var allowedServiceAreas: [Swift.String]
  @objc open var accountIdType: PECore.IDType
  @objc public var colorIndex: Swift.Int
  @objc open var encryptedAccountId: Swift.String?
  @objc open var homeUrl: Swift.String
  @objc open var legalName: Swift.String
  @objc open var name: Swift.String?
  @objc open var photoBlobResourceTicket: Swift.String?
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
  public func toPersonType<T>(_ type: T.Type) throws -> T where T : Swift.Decodable
  @objc public func setFeatureLoadStatus(_ newStatus: PECore.FeatureLoadStatus)
  @objc deinit
}
extension Authentication.MyChartPerson {
  @objc dynamic open func getColor() -> UIKit.UIColor
  @objc dynamic open func getTextColor() -> UIKit.UIColor
}
extension Authentication.MyChartPerson {
  @objc dynamic open func getIdentifier() -> Swift.String
  @objc dynamic open func hasSecurityPoint(_ feature: Swift.String) -> Swift.Bool
  @objc dynamic open func getEncryptedIdentifier() -> Swift.String
  @objc dynamic open func getNickname() -> Swift.String?
  @objc dynamic open func getNickname(preferRefusalName: Swift.Bool) -> Swift.String?
  @objc dynamic open func getFullname() -> Swift.String
  @objc dynamic open func getPhoto(onImageLoaded: ((any PECore.PEPersonProtocol, UIKit.UIImage?) -> Swift.Void)?) -> UIKit.UIImage?
  @objc dynamic open func getPhoto(useFallback: Swift.Bool, onImageLoaded: ((any PECore.PEPersonProtocol, UIKit.UIImage?) -> Swift.Void)?) -> UIKit.UIImage?
  @objc dynamic open func getFeatureLoadStatus() -> PECore.FeatureLoadStatus
  @objc dynamic open func getAccountIdType() -> PECore.IDType
  @objc dynamic open func getWebServiceUrl(_ urlType: PECore.UrlType) -> Swift.String
  @objc dynamic open func update(nickname: Swift.String?)
  @objc dynamic open func update(colorIndex: Swift.Int)
  @objc dynamic open func update(photo: UIKit.UIImage?)
}
extension Foundation.NSNotification.Name {
  public static let launchGetHelpNotification: Foundation.Notification.Name
}
extension Foundation.NSNotification.Name {
  public static let launchOrgSelectionNotification: Foundation.Notification.Name
  public static let launchPreLoginExtensibilityLoginNotification: Foundation.Notification.Name
  public static let didChangeFavoriteOrganizationsNotification: Foundation.Notification.Name
}
public protocol IAuthenticationComponentHostingApplication : AnyObject {
  func loadPhonebookEntries(success: @escaping ([any PECore.PEPhonebookEntryProtocol], Swift.Bool) -> Swift.Void, failure: @escaping ((PECore.WebServiceFailedError) -> Swift.Void))
  var logoutTask: _Concurrency.Task<Swift.Void, Swift.Never>? { get async }
  func notificationsOnboardingViewed() -> Swift.Bool
  func locationOnboardingViewed() -> Swift.Bool
  func getPreferredOrgIds() -> [Swift.String]
  func addOrgToPreferredOrgs(org: any PECore.PEPhonebookEntryProtocol)
  var currentInternalPhonebookUrl: Swift.String? { get }
  func clearFavoriteOrganizations()
  func getOrgSelectionViewController() -> UIKit.UINavigationController
  func scanOrgSelectQRCode(viewController: UIKit.UIViewController)
  func loadLegacyThemeForServer(pbEntry: any PECore.PEPhonebookEntryProtocol, websiteUrl: Swift.String, hasNewBrandingPaths: Swift.Bool, locale: Swift.String, success: @escaping (any PECore.PEThemeProtocol) -> Swift.Void, failure: @escaping (() -> Swift.Void))
  func getLegacyCacheStringForTheme(theme: (any PECore.PEThemeProtocol)?) -> Swift.String?
  func convertLegacyCacheStringToTheme(cacheString: Swift.String?) -> (any PECore.PEThemeProtocol)?
  func onInitialLoginCompleted(authResponse: Authentication.AuthenticateResponse, phonebookEntry: any PECore.PEPhonebookEntryProtocol, authType: PECore.PEAuthType)
  func onPatientsLoaded(patients: [Authentication.MyChartPatient])
  func onPatientsUpdated(patients: [Authentication.MyChartPatient]) async
  func setAllFeaturesAsDone()
  func getFeatureLoadStatusForPatient(accountID: Swift.String) -> PECore.FeatureLoadStatus
  func onLoginCompleted()
  func getAppStoreUrl() -> Swift.String?
  func tryPasscodeLogin(passcode: Swift.String, server: any PECore.PEPhonebookEntryProtocol, onCompletion: @escaping (_ token: Swift.String, _ username: Swift.String, _ attemptsRemaining: Swift.Int) -> Swift.Void)
  func getTokenForBiometric(server: any PECore.PEPhonebookEntryProtocol, onCompletion: @escaping (_ token: Swift.String, _ username: Swift.String) -> Swift.Void)
  var isSecondaryLoginFeatureAvailable: Swift.Bool { get }
  var isPasscodeLoginFeatureAvailable: Swift.Bool { get }
  var isBiometricLoginFeatureAvailable: Swift.Bool { get }
  func canLaunchSignUpWorkflow(server: any PECore.PEPhonebookEntryProtocol) -> Swift.Bool
  func launchSignUpWorkflow(for server: any PECore.PEPhonebookEntryProtocol, in navigationController: UIKit.UIViewController, with theme: any PECore.PEThemeProtocol)
  func canLaunchForgotUsernameWorkflow(server: any PECore.PEPhonebookEntryProtocol) -> Swift.Bool
  func launchForgotUsernameWorkflow(for server: any PECore.PEPhonebookEntryProtocol, in navigationController: UIKit.UIViewController, with theme: any PECore.PEThemeProtocol)
  func canLaunchForgotPasswordWorkflow(server: any PECore.PEPhonebookEntryProtocol) -> Swift.Bool
  func launchForgotPasswordWorkflow(for server: any PECore.PEPhonebookEntryProtocol, in navigationController: UIKit.UIViewController, with theme: any PECore.PEThemeProtocol)
  func canLaunchResetPasswordWorkflow(server: any PECore.PEPhonebookEntryProtocol) -> Swift.Bool
  func launchResetPasswordWorkflow(for server: any PECore.PEPhonebookEntryProtocol, in navigationController: UIKit.UIViewController, with theme: any PECore.PEThemeProtocol)
  func shouldHideOrgSelection() -> Swift.Bool
  func getPasswordChangeExpireViewController(onCompletion: @escaping (_ success: Swift.Bool, _ updatedPassword: Swift.String?) -> Swift.Void) -> UIKit.UIViewController?
  func loadCustomStrings(onCompletion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  func performAsyncLoginTasks(onCompletion: @escaping (_ success: Swift.Bool) -> Swift.Void)
  func pendPostSignupDeepLink(_ deepLinkUrl: Swift.String)
  func performLoadingBrandingTasks(onCompletion: @escaping () -> Swift.Void)
  func launchHomePage(with deepLink: (any PECore.PEDeepLinkProtocol)?)
  func isWebSessionToolOn() -> Swift.Bool
  func showAppUriLaunchErrorAlert(url: Foundation.URL, webView: WebKit.WKWebView, presentFrom: UIKit.UIViewController)
  func removeWebServerFromPreferred(orgId: Swift.String)
}
public struct ServerConfigData : Swift.Decodable {
  public let allowedHosts: [Swift.String]
  public let deviceTimeout: Swift.Int
  public let educationContentSourceFlags: [Swift.String]
  public let isFinlandEnv: Swift.Bool
  public let showTerms: Authentication.ShowTerms
  public let readOnlyServer: Swift.Bool
  public let showNonProductionWarning: Swift.Bool
  public let ticketTimeout: Swift.Int
  public let requiresCopyrightLink: Swift.Bool
  public let allowedLocales: [Swift.String]
  public let defaultLocale: Swift.String?
  public let serverPrimaryLocale: Swift.String?
  public let isUsingBluetoothBeacons: Swift.Bool
  public init(from decoder: any Swift.Decoder) throws
}
@objc public enum WPEncryptionMethod : Swift.Int, Swift.Decodable {
  case noEncryption = 1
  case aes128 = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class SessionTicket : ObjectiveC.NSObject {
  @objc public var value: Swift.String {
    get
  }
  @objc public var encryptionMethod: Authentication.WPEncryptionMethod {
    get
  }
  @objc(initWithTicket:andEncryptionMethod:) convenience public init?(ticket: Swift.String?, encryptionMethod: Authentication.WPEncryptionMethod = .aes128)
  required public init(ticket: Swift.String, encryptionMethod: Authentication.WPEncryptionMethod = .aes128)
  @objc public func updateTicket(_ newTicket: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BiometricAuthenticator : ObjectiveC.NSObject {
  @objc public enum BiometricResult : Swift.Int {
    case authenticated
    case canceled
    case failed
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc public class func registerGenericBiometricKey() throws
  @objc public class func readGenericBiometricKey(prompt: Swift.String) throws -> Swift.String
  @objc public class func deleteGenericBiometricKey() throws
  @objc public class func authenticateBiometrics(prompt: Swift.String) -> Authentication.BiometricAuthenticator.BiometricResult
  @objc override dynamic public init()
  @objc deinit
}
extension Foundation.Bundle {
  public static var authentication: Foundation.Bundle {
    get
  }
}
@_hasMissingDesignatedInitializers public class AuthenticationWebServiceAPI {
  @objc deinit
}
extension Authentication.AuthenticationWebServiceAPI {
  public static func requestSecondaryLogin(token: Swift.String, deviceId: Swift.String, websiteName: Swift.String, username: Swift.String, screenWidth: Swift.Int, screenHeight: Swift.Int, serverUrl: Swift.String? = nil, appId: Swift.String) -> PECore.WebService<Authentication.AuthenticateResponse>
  public static func getRestrictedAccessToken<T>(withUserContext context: PECore.PEUserContext?, forDevice deviceName: Swift.String, forTokenType tokenType: Swift.Int, forAppId appId: Swift.String) -> PECore.WebService<T> where T : Swift.Decodable
  public static func removeRestrictedAccessTokens<T>(withUserContext context: PECore.PEUserContext, forDevice deviceId: Swift.String, withTokens tokens: [Swift.String], forTokenType tokenType: Swift.Int) -> PECore.WebService<T> where T : Swift.Decodable
}
@objc public enum TermsType : Swift.Int, Swift.Decodable {
  case doNotShow = -1
  case showTermsAndConditions = 0
  case showProxyDisclaimer = 1
  case showEula = 2
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers open class MyChartUser : Authentication.MyChartPerson, PECore.PEUserProtocol {
  @objc public var available2011Features: Authentication.EpicServicesAvailable2011 {
    get
  }
  @objc public var available2012Features: Authentication.EpicServicesAvailable2012 {
    get
  }
  @objc public var available2013Features: Authentication.EpicServicesAvailable2013 {
    get
  }
  @objc public var available2014Features: Authentication.EpicServicesAvailable2014 {
    get
  }
  @objc public var available2015Features: Authentication.EpicServicesAvailable2015 {
    get
  }
  @objc public var available2016Features: Authentication.EpicServicesAvailable2016 {
    get
  }
  @objc public var available2017Features: Authentication.EpicServicesAvailable2017 {
    get
  }
  @objc public var available2018Features: Authentication.EpicServicesAvailable2018 {
    get
  }
  @objc public var available2019Features: Authentication.EpicServicesAvailable2019 {
    get
  }
  @objc public var available2020Features: Authentication.EpicServicesAvailable2020 {
    get
  }
  @objc public var available2021Features: Authentication.EpicServicesAvailable2021 {
    get
  }
  @objc public var available2022Features: Authentication.EpicServicesAvailable2022 {
    get
  }
  @objc public var available2023Features: Authentication.EpicServicesAvailable2023 {
    get
  }
  @objc public var available2024Features: Authentication.EpicServicesAvailable2024 {
    get
  }
  @objc public var available2025Features: Authentication.EpicServicesAvailable2025 {
    get
  }
  @objc public var allowedHosts: [Swift.String] {
    get
  }
  @objc public var username: Swift.String
  @objc public var bannerLogoFileName: Swift.String? {
    get
  }
  @objc public var isPatient: Swift.Bool {
    get
  }
  @objc public var selectedEncryptionMethod: Authentication.WPEncryptionMethod {
    get
  }
  @objc public var myChartBrandingConfigurationUrl: Swift.String? {
    get
  }
  @objc public var ssoUsernameForCache: Swift.String? {
    get
  }
  @objc public var ticket: Authentication.SessionTicket? {
    get
  }
  @objc public var launchedForTheUserContext: Swift.Bool {
    get
  }
  @objc public var isRestrictedToProxySubjectAccess: Swift.Bool {
    get
  }
  @objc public var patientData: [Authentication.MyChartPatient]
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  override open func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension Authentication.MyChartUser : PECore.PEPatientIndexProtocol {
  @objc dynamic public func getPatientIndex() -> Swift.Int
}
extension Authentication.MyChartUser {
  @objc dynamic open func isTimeout() -> Swift.Bool
}
extension Authentication.MyChartUser {
  @objc dynamic open func getDeviceID() -> Swift.String
  @objc dynamic open func getCommandLocaleString() -> Swift.String
  @objc dynamic open func setToken(_ token: Swift.String, forType tokenType: PECore.TokenType)
  @objc dynamic open func getToken(_ tokenType: PECore.TokenType) -> Swift.String
  @objc dynamic open func getUsername() -> Swift.String
  @objc override dynamic open func getFullname() -> Swift.String
  @objc override dynamic open func update(photo: UIKit.UIImage?)
  @objc override dynamic open func update(nickname: Swift.String?)
  @objc override dynamic open func update(colorIndex: Swift.Int)
  @objc dynamic open func getPatient() -> (any PECore.PEPatientProtocol)?
}
@_hasMissingDesignatedInitializers public class LoginWebServiceAPI {
  public class func performLogin(_ loginRequest: PECore.PELoginRequest) -> PECore.WebService<Authentication.AuthenticateResponse>?
  @objc deinit
}
@objc public class AuthenticateResponse : ObjectiveC.NSObject, Swift.Decodable {
  final public let loginStatus: Authentication.LoginStatus
  public var userData: Authentication.MyChartUser
  final public let serverData: Authentication.ServerConfigData
  required public init(from decoder: any Swift.Decoder) throws
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers open class MyChartPatient : Authentication.MyChartPerson, PECore.PEPatientProtocol {
  @objc open var isCareCompanionEnrolled: Swift.Bool
  @objc open var isInED: Swift.Bool
  @objc open var isAdmitted: Swift.Bool
  @objc public var allowRxRefill: Swift.Bool {
    @objc get
  }
  @objc open var internalPatientID: Swift.String?
  @objc open var isSelfProxy: Swift.Bool
  @objc open var needsDataFromHomeDeployment: Swift.Bool
  @objc open var relationshipID: Swift.String?
  @objc open var proxyRelationshipStatusString: Swift.String?
  @objc open var accessExpirationDate: Foundation.Date?
  @objc open var isContextForRedeemedOauthToken: Swift.Bool
  @objc override dynamic public init()
  required public init(from decoder: any Swift.Decoder) throws
  override public func encode(to encoder: any Swift.Encoder) throws
  @objc deinit
}
extension Authentication.MyChartPatient {
  @objc dynamic open func getAlerts() -> [any PECore.PEAlertProtocol]
}
extension Authentication.MyChartPatient {
  @objc dynamic open func getIsInED() -> Swift.Bool
  @objc dynamic open func getIsAdmitted() -> Swift.Bool
  @objc dynamic open func getNowContext() -> Swift.String
  @objc dynamic open func setNowContext(_ nowContextId: Swift.String)
}
public enum LoginResultCode : Swift.Int {
  case unknown, success, expiredTestLibrary, webserviceError, genericError, maxAttemptsExceeded, maxPasswordResetTriesReached, readOnlyServer, passwordExpired, termsAndConditionsFailed, twoFactorFailed, passwordExpiredFailed, usernamePasswordFailed, loginInactive, loginDeleted, loginExpired, loginServerError, proxyOnly, appVersionTooLow, secondaryLoginInvalidAuthToken, secondaryLoginPasswordChanged, maxPasswordExceededCanReset, maxPasswordExceededCannotReset, networkNotAvailable, userCanceled, serverOverload, passcodeNotSet, touchIDFailed, touchIDNotAvailable, mustUsePassword, secondaryLoginIncorrectPasscode, secondaryLoginIncorrectPasscodeDisabled, secondaryLoginMethodDisabledByOrganization
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Authentication.LoginResultCode {
  public static let RemainingPasscodeAttemptsKey: Swift.String
  public typealias ErrorInfo = [Swift.String : Any]
  public static func getCodeForStatus(_ status: Authentication.LoginStatus) -> Authentication.LoginResultCode
}
@_hasMissingDesignatedInitializers public class PreloginDeeplinkManager {
  public static let epicHttpUrlPrefix: Swift.String
  public static let epicMyChartScheme: Swift.String
  public static let orgIdParameter: Swift.String
  public static func launchLoginWorkflow(workflowData: Authentication.LoginWorkflowData)
  public static func handlePreloginMyChartDeepLink(_ orgId: Swift.String, _ url: Swift.String)
  public static func handleLogoutDeepLink(urlString: Swift.String)
  public static func handleOrgSelectDeepLink(uriString: Swift.String)
  public static func isTokenLoginDeepLink(url: Foundation.URL) -> Swift.Bool
  public static func handleTokenLoginDeepLink(url: Foundation.URL)
  @objc deinit
}
public class LibraryLoginHelper {
  public init(listener: any Authentication.ILibraryLoginDelegate, phonebookEntry: any PECore.PEPhonebookEntryProtocol)
  @objc deinit
  public func performUsernamePasswordLogin(username: Swift.String, password: Swift.String, saveUsername: Swift.Bool)
  public func performBiometricLogin()
  public func performPasscodeLogin(passcode: Swift.String)
  public func performLucyTokenLogin(username: Swift.String, token: Swift.String)
}
public protocol ILibraryLoginDelegate : AnyObject {
  func loginSucceeded(withDeeplink deeplink: (any PECore.PEDeepLinkProtocol)?)
  func loginFailed(errorCode: Swift.Int, errorMessage: Swift.String?, errorInfo: [Swift.String : Any]?)
}
public enum LoginStatus : Swift.Int, Swift.Decodable {
  case success
  case failed
  case passwordExpired
  case loginInactive
  case loginDeleted
  case loginExpired
  case unauthorizedWebsite
  case nonHomeAccess
  case reHomeOrMergeInProgress
  case remotelyAuthorized
  case remoteAuthorizationFailed
  case remoteProxyLogin
  case remoteProxySelfLogin
  case pointerMisMatch
  case proxyOnly
  case maxAttemptsExceeded
  case requestForEncryptedPassword
  case redirectToHome
  case loginServerError
  case appVersionTooLow
  case secondaryLoginUnknownError
  case secondaryLoginInvalidAuthToken
  case secondaryLoginPasswordChanged
  case secondaryLoginDeviceInActive
  case secondaryLoginDeviceNotFound
  case secondaryLoginDisabledByOrganization
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum ShowTerms : Swift.Int, Swift.Decodable {
  case doNotShow = 0
  case new
  case updated
  case proxyDisclaimer
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class SamlSessionManager : ObjectiveC.NSObject {
  public class func cacheSamlCookies(_ webViewConfig: WebKit.WKWebViewConfiguration, _ logoutDomain: Swift.String, _ organization: any PECore.PEOrganizationProtocol)
  public static func logoutOfSaml(isIdleTimeout: Swift.Bool) async
  @objc public class func setExternalLogoutUrl(_ logoutUrl: Swift.String?)
  @objc public class func clearExternalLogoutUrl()
  @objc public class func getExternalLogoutUrl() -> Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
@objc public enum LoginMethods : Swift.Int, Swift.Decodable {
  case none
  case password
  case biometric
  case passcode
  case authenticationToken
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class PEAuthenticationComponentAPI : ObjectiveC.NSObject, PECore.PEAuthenticationComponentAPIProtocol {
  @objc public static let CustomServerId: Swift.String
  @objc public func getViewControllerForTwoFactorAuthentication(withContext userContext: PECore.PEUserContext, twoFactorInformation: any PECore.TwoFactorInformationProtocol, completionHandler: ((Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)?) -> UIKit.UIViewController?
  @objc public func getViewControllerForTwoFactorEnrollment(withContext userContext: PECore.PEUserContext, twoFactorInformation: any PECore.TwoFactorInformationProtocol, completionHandler: ((Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)?) -> UIKit.UIViewController?
  @objc public func supportsTwoFactorOptIn(withContext userContext: PECore.PEUserContext) -> Swift.Bool
  @objc public func loadTwoFactorInformation(withContext userContext: PECore.PEUserContext, completionHandler: @escaping (((any PECore.TwoFactorInformationProtocol)?) -> Swift.Void), errorHandler: @escaping ((PECore.WebServiceFailedError) -> Swift.Void))
  @objc public func getViewControllerForTwoFactorOptIn(withContext userContext: PECore.PEUserContext, twoFactorInformation: any PECore.TwoFactorInformationProtocol, completionHandler: ((Swift.Bool, Swift.Bool, Swift.Bool) -> Swift.Void)?) -> UIKit.UIViewController?
  @objc public func getViewControllerForTwoFactorOptIn(withContext userContext: PECore.PEUserContext, deepLink: Swift.String) -> UIKit.UIViewController?
  @objc public func getViewControllerForTwoFactorOnboarding(withContext userContext: PECore.PEUserContext, twoFactorInformation: (any PECore.TwoFactorInformationProtocol)?) -> UIKit.UIViewController?
  @objc public func getLoginViewController() -> UIKit.UIViewController
  @objc public func hasRestrictedAccessToken(tokenType: PECore.RestrictedAccessTokenType, forOrgId orgId: Swift.String?) -> Swift.Bool
  @objc public func getRestrictedAccessToken(tokenType: PECore.RestrictedAccessTokenType) -> (any PECore.RestrictedAccessTokenProtocol)?
  @objc public func loginWithRestrictedAccessToken(tokenType: PECore.RestrictedAccessTokenType, phonebookEntry: any PECore.PEPhonebookEntryProtocol, defaultTheme: any PECore.PEThemeProtocol, completionHandler: @escaping ((PECore.PEPatientContext) -> Swift.Void), errorHandler: @escaping ((Swift.String) -> Swift.Void))
  @objc public func createRestrictedAccessToken(userContext: PECore.PEUserContext, tokenType: PECore.RestrictedAccessTokenType, username: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func removeRestrictedAccessTokenFromDevice(withTokenType tokenType: PECore.RestrictedAccessTokenType)
  @objc public func removeRestrictedAccessTokenFromDeviceAndServer(withTokenType tokenType: PECore.RestrictedAccessTokenType, userContext: PECore.PEUserContext)
  @objc public func recreateRestrictedAccessTokenIfNeeded(userContext: PECore.PEUserContext, tokenType: PECore.RestrictedAccessTokenType, username: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  @objc public func clearCurrentRestrictedAccessSession()
  @objc public func hasCurrentRestrictedAccessSession() -> Swift.Bool
  @objc public func getSamlToken() -> Swift.String?
  @objc public func getFavoritedOrgs() -> [any PECore.PEPhonebookEntryProtocol]
  @objc public func setFavoritedOrgs(orgs: [any PECore.PEPhonebookEntryProtocol])
  @objc public func executeOrgSelectDeeplink(orgId: Swift.String)
  @objc public func getCurrentFeatureAccessInformation()
  @objc public func getFullFeatureAccessInformation(completion: ((Swift.Bool) -> Swift.Void)?)
  @objc public func getFeatureLoadStatusForPatient(accountID: Swift.String) -> PECore.FeatureLoadStatus
  @objc public var currentPreLoginTheme: (any PECore.PEThemeProtocol)? {
    @objc get
  }
  @objc public func launchLoginWorkflow(orgId: Swift.String)
  @objc public var shouldSkipOnboardingOrgSelectionStep: Swift.Bool {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension Authentication.WPEncryptionMethod : Swift.Equatable {}
extension Authentication.WPEncryptionMethod : Swift.Hashable {}
extension Authentication.WPEncryptionMethod : Swift.RawRepresentable {}
extension Authentication.BiometricAuthenticator.BiometricResult : Swift.Equatable {}
extension Authentication.BiometricAuthenticator.BiometricResult : Swift.Hashable {}
extension Authentication.BiometricAuthenticator.BiometricResult : Swift.RawRepresentable {}
extension Authentication.TermsType : Swift.Equatable {}
extension Authentication.TermsType : Swift.Hashable {}
extension Authentication.TermsType : Swift.RawRepresentable {}
extension Authentication.LoginResultCode : Swift.Equatable {}
extension Authentication.LoginResultCode : Swift.Hashable {}
extension Authentication.LoginResultCode : Swift.RawRepresentable {}
extension Authentication.LoginStatus : Swift.Equatable {}
extension Authentication.LoginStatus : Swift.Hashable {}
extension Authentication.LoginStatus : Swift.RawRepresentable {}
extension Authentication.ShowTerms : Swift.Equatable {}
extension Authentication.ShowTerms : Swift.Hashable {}
extension Authentication.ShowTerms : Swift.RawRepresentable {}
extension Authentication.LoginMethods : Swift.Equatable {}
extension Authentication.LoginMethods : Swift.Hashable {}
extension Authentication.LoginMethods : Swift.RawRepresentable {}
